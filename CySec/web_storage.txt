
=> Storage

Data Storage (lowest level)
│
├── Client-Side Storage (browser-side)
│   ├── Local Storage (Web Storage API)
│   ├── Session Storage (Web Storage API)
│   ├── Cookies (part of the HTTP protocol)
│   ├── IndexedDB (Browser-based NoSQL DB)
│   └── Cache Storage ((used with Service Workers))
│
├── Server-Side Storage
│   ├── Databases (MySQL, MongoDB)
│   ├── File Systems
│   └── Session Stores (Redis, etc.)
│
└── Application State Management (higher level logic)
    ├── Frontend State (React state, Redux, Vuex)
    └── Backend State (session tracking, auth, caching)


=> Client-Side Storage (browser)

- Cookies
    - Small key-value pairs
    - Sent with every HTTP request
    - Used for: sessions, auth tokens, tracking
    - Size limit: ~4 KB
    - Persistent (until expiration)
- Local Storage
    - Simple key-value storage (window.localStorage)
    - Persistent (until manually cleared)
    - Used for: UI preferences, theme, saved inputs
    - Size limit: ~5–10 MB
    - Domain-scoped
- Session Storage
    - Similar to localStorage but temporary (window.sessionStorage)
    - Cleared when browser tab is closed
    - Used for: one-tab session data, temporary form state
    - Size limit: ~5–10 MB
    - Tab/session-scoped
- IndexedDB
    - Low-level NoSQL database
    - Persistent storage for large or structured data
    - Used for: offline apps, large data caching, file storage
    - Size: Hundreds of MBs (varies by browser)
    - Async API
- Web SQL (Deprecated)
    - SQL-based client-side DB
    - Not supported in all browsers
    - Avoid using in new projects
    - Cache Storage (Service Workers)
    - Stores HTTP responses (HTML, CSS, JS, images)
    - Used for: offline functionality, Progressive Web Apps (PWAs)
    - Managed via service workers
- In-Memory (RAM)
    - Temporary data in JS variables
    - Cleared when page is refreshed or navigated away
    - Used for: transient data, runtime calculations
