
=> Android

- Android is an open-source operating system (OS) primarily designed for mobile devices (smartphones, tablets, TVs, wearables, IoT). It’s based on the Linux kernel and developed by Google.
- Android provides:
    - A middleware framework
    - A runtime environment
    - Application support, so developers can build apps in Java, Kotlin, or C/C++.

Android Components:
- Linux Kernel (Lowest Layer):
    - Serves as the base layer of Android.
    - Directly communicates with device hardware via drivers.
    - Hardware abstraction -> device drivers, power, memory, security.
    - Handles:
        - Security
        - Memory Management
        - Process Management
        - Networking
        - Drivers (camera, display, Wi-Fi, Bluetooth, USB, Binder (IPC) etc.)
    - Android adds Binder IPC driver for communication between processes.
- Hardware Abstraction Layer (HAL):
    - Sits above the kernel.
    - Provides standard interfaces and APIs that allow the Android framework to interact with hardware-specific drivers.
    - Acts like a translator between Android framework (Java/Kotlin world) and hardware drivers (C/C++ world).
    - Ensures that apps and system services don’t need to know hardware details.
    - Example: A camera app -> HAL -> hardware driver -> physical camera.
- Android Runtime & Native Libraries:
    - Android Runtime (ART/Dalvik):
        - Executes apps.
        - Dalvik VM (older versions) and now ART (Android Runtime) (Replaced Dalvik VM from Android 5.0+).
        - Uses Just-In-Time (JIT) and Ahead-Of-Time (AOT) compilation.
        - Garbage Collection
        - Each app runs in its own sandboxed process for security.
    - Libraries (C/C++ libraries):
        - Pre-built native C/C++ libraries providing core functionalities:
        - Examples:
            - SQLite -> for databases
            - OpenGL ES -> for graphics
            - WebKit -> for browsing
            - SSL -> for secure networking
            - Media Framework -> Audio/Video playback
- Application Framework:
    - Provides high-level APIs and services for apps.
    - Examples:
        - Activity Manager: manages app lifecycles
        - Package Manager -> App installation & permissions
        - Resource Manager: handles layouts, strings, images
        - Notification Manager: manages system notifications
        - Location Manager -> GPS
        - Telephony Manager -> Calls, SMS
        - View System: UI components like buttons, text, etc
        - Content Providers: share data between apps
- Applications:
    - System apps (Phone, Contacts, Camera, etc.) + user-installed apps (WhatsApp, Instagram, etc.).
    - Built using Java/Kotlin (sometimes C/C++ for native parts).

Components of Android Applications:
- Android apps are made of four main components (declared in the AndroidManifest.xml).
- All four are connected by Intents (messaging objects that pass data or actions between components).
- Activities:
    - An Activity is a single screen with a UI. Manages user interaction.
    - Example: WhatsApp’s chat screen is one Activity, and status screen is another.
- Services:
    - A Service runs in the background without UI.
    - Example: Music player running while you browse other apps, or Firebase push notification service.
- Broadcast Receivers:
    - Respond to system-wide messages/events.
    - Example: Low battery notification, incoming SMS, Wi-Fi connected.
- Content Providers:
    - Manage and share data between apps.
    - Example: Contacts app provides contact data that WhatsApp can read to show your friends list.

Android File System Structure:
- Android uses a Linux-like directory structure, but with some mobile-specific differences.
- Root Directory (/): Contains essential system folders:
    - /system -> Core Android OS files (read-only for apps)
        - /system/app -> Pre-installed system apps
        - /system/framework -> Android frameworks (.jar files)
        - /system/lib or /system/lib64 -> Shared libraries (.so files)
        - /system/bin -> Core binaries (sh, toolbox, etc.)
    - /vendor -> Device-specific files (drivers, firmware, HAL)
    - /boot -> Kernel + ramdisk
    - /recovery -> Separate boot partition for system recovery
    - /data -> User data (writable)
        - /data/app -> Installed apps (APK files)
        - /data/data/<package_name> -> App-specific data (databases, cache, prefs)
        - /data/dalvik-cache -> Compiled code cache
    - /cache -> Temporary data, OTA updates
    - /sdcard or /storage/emulated/0 -> User files (media, downloads, documents)
    - /dev -> Device nodes for hardware
    - /proc -> Runtime kernel/system info
    - /etc -> Config files

WebView:
- WebView is an Android system component that allows apps to display web content inside an app, without opening a browser.
- It’s basically a mini browser engine (based on Chromium) embedded in Android.
- Developers use it when they want to load a webpage, HTML, or run JavaScript inside their app’s UI.
- Packaged as a system app: Android System WebView.
- How WebView Works:
    - Exposes an API (android.webkit.WebView) that developers can add to their app.
    - The app can then:
        - Load a remote webpage (https://example.com).
        - Render local HTML/JS files stored inside the app.
        - Interact with JavaScript via JavaScript Interfaces (bridge between app code and web code).
- Why WebView Matters (Pentesting):
    - WebView is a common attack surface because it mixes web security with mobile app security.
    - Vulnerabilities include:
        - JavaScript Injection -> if developer uses addJavascriptInterface() insecurely.
        - Insecure URL loading -> if app loads arbitrary user-controlled URLs.
        - Phishing / XSS inside apps -> if input isn’t sanitized.
        - Man-in-the-middle (MITM) risks -> if HTTPS validation is weak or bypassed.
