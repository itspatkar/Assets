
=> Clickjacking

- Clickjacking (also known as UI redressing) is a security vulnerability where a malicious actor tricks a user into clicking something different from what the user perceives—usually by overlaying or hiding elements in a deceptive way.
- What is Clickjacking: Clickjacking is a technique used to "hijack" clicks meant for one element (like a visible button or link) and instead have them act on another element, often invisible or disguised.
- For example:
    - A user thinks they're clicking a “Play” button on a video,
    - But in reality, they're clicking a hidden “Transfer Funds” button from their online banking session.
- How Clickjacking Works:
    - Attacker creates a malicious website.
    - The site loads a legitimate website (e.g., your bank, social media, etc.) inside an <iframe>.
    - The attacker makes the iframe transparent or hidden, and positions it above visible elements (like buttons).
    - When the user clicks a visible button (e.g., “Click Here to Win”), they’re actually clicking on a hidden element inside the iframe.
- Why Clickjacking Happens:
    - Clickjacking is possible due to:
    - Lack of X-Frame-Options or CSP frame-ancestors: These prevent embedding your site in iframes.
    - UI elements being manipulable with CSS/JS: Attackers can hide, shrink, or reposition interface elements.
    - User sessions being active: If a user is already logged in (e.g., to a bank or social media), actions inside the iframe can execute as them.

Example:
- Attacker HTML:
    <iframe src="https://example-bank.com/transfer" style="opacity: 0; position: absolute; top: 0; left: 0; z-index: 9999;"></iframe>
    <button>Click to Claim Your Prize</button>
- This would trick the user into transferring money when they think they’re claiming a prize.

Impact of Clickjacking:
- Depending on the context, it can lead to:
- Unauthorized actions (like changing settings, liking a post, transferring money).
- Social engineering tricks (user thinks they did one thing, actually did another).
- Account compromise when combined with CSRF.

Mitigation Techniques:
- Set X-Frame-Options header:
    - Prevents your site from being loaded in <iframe>.
    - X-Frame-Options: DENY Or X-Frame-Options: SAMEORIGIN
- Use Content Security Policy (CSP):
    - Controls which sites can frame your site.
    - Content-Security-Policy: frame-ancestors 'self';
- Frame busting scripts (less reliable):
    if (top !== self) {
        top.location = self.location;
    }
    - Not always effective—modern browsers can bypass this.
- UI/UX Enhancements:
    - Use double-click confirmation or CAPTCHAs for sensitive actions.
    - Avoid putting critical buttons where overlays could be easily misused.
- User Education: Teach users to beware of suspicious links/pages and verify URLs before interaction.
