
Headers are additional bits of data that are sent to the web server when making requests. Although no headers are strictly required when making an HTTP request, if they are not sent, it is difficult to view a website properly.

=> HTTP Request Headers

- X-Original-URL: It is an HTTP request header sometimes used by reverse proxies, load balancers, or middleware to preserve the original URL path requested by a client before it was rewritten or altered by an intermediary component.
- X-Rewrite-URL
- X-Forwarded-For
- Referer
- Content-Disposition


=> Security Headers

Security headers are HTTP response headers that a web server includes to enhance the security of web applications and protect users from various types of attacks. They instruct the browser how to behave while handling content from the server and help prevent vulnerabilities like XSS, clickjacking, MIME sniffing, and data injection.

Header and Purpose:
- Strict-Transport-Security (HSTS): Forces browsers to use HTTPS, preventing protocol downgrade attacks.
- Content-Security-Policy (CSP): Restricts sources of content (scripts, styles, etc.) to prevent XSS and data injection.
- X-Content-Type-Options: X-Content-Type-Options Prevents MIME-type sniffing, which could lead to content being interpreted incorrectly.
- X-Frame-Options: X-Frame-Options Prevents the site from being embedded in iframes, mitigating clickjacking attacks.
- Referrer-Policy: Referrer-Policy Controls how much referrer information is sent with requests.
- Permissions-Policy (formerly Feature-Policy): Controls access to browser features like camera, microphone, geolocation, etc.
- Cross-Origin-Embedder-Policy (COEP): Helps enforce secure cross-origin resource sharing.
- Cross-Origin-Resource-Policy (CORP): Specifies who can load the resource (same-site, cross-site, etc.).
- Cross-Origin-Opener-Policy (COOP): Isolates browsing context to prevent cross-origin attacks like Spectre.



=> Cross-Origin Resource Sharing (CORS)

CORS (Cross-Origin Resource Sharing) is a security feature built into web browsers that controls how a web page in one origin (domain) can request resources from a different origin. CORS (Cross-Origin Resource Sharing) is a server-side configuration that affects how browsers (clients) handle cross-origin requests. CORS is server-related — the server must explicitly allow or deny cross-origin requests by setting specific HTTP response headers. If the server doesn’t include the right CORS headers, the browser blocks the response, even if the request succeeded.

CORS Headers and Role:
- Access-Control-Allow-Origin: Specifies which origin(s) are allowed
- Access-Control-Allow-Methods: Lists allowed HTTP methods (e.g., GET, POST)
- Access-Control-Allow-Headers: Specifies allowed custom headers
- Access-Control-Allow-Credentials: Indicates if cookies/auth headers are allowed
- Access-Control-Expose-Headers: Defines which headers can be read by the browser



Optional/Legacy Headers

=> Pragma Header
The Pragma header is an HTTP/1.0 general header used for backward compatibility with older HTTP versions. It is mainly used for caching control. This tells the browser or intermediary caches not to cache the response, and instead always request a fresh copy from the server. In security testing, the presence or absence of the Pragma header is usually not a critical issue on its own, but it may be noted as part of secure caching practices, especially for sensitive content (like personal data, tokens, etc.).
- Pragma: no-cache

=> Cache-Control
Cache-Control is an HTTP header used to define caching rules for both requests and responses. It tells browsers and intermediate caches (like CDNs, proxies) what to store, for how long, and whether to revalidate.
- Cache-Control: no-store, no-cache, must-revalidate

=> X-XSS-Protection
X-XSS-Protection is a legacy HTTP response header used to enable or disable the Cross-Site Scripting (XSS) filter built into older versions of web browsers like Internet Explorer and early versions of Chrome. Enables XSS filtering and blocks the page entirely if an attack is detected (more secure than just sanitizing). Use the Content-Security-Policy (CSP) header instead, which is much more powerful and reliable.
- X-XSS-Protection: 0
