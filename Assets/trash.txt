
At tack Authent icat ion Mechanism
• Exploit design and implementation flaws in web applications, such as failure to check password strength or insecure transmission of credentials, to bypass authentication mechanisms
Username Enumeration
• Verbose failure messages • Predictable usernames
Password Attacks Cookie Exploitation
• Cookie poisoning • Cookie sniffing • Cookie replay
• Password functionality exploits • Password guessing • Brute-force attack • Dictionary attack • Attack password reset mechanism
Session Attacks
• Session prediction • Session brute-forcing • Session poisoning
Bypass Authentication
• Bypass SAML-based SSO • Bypass rate limit • Bypass multi-factor authentication

Usernam e Enum erat ion
• If a login error states which part of the username and password is incorrect, guess the users of the application using the trial-and-error method
• Some applications automatically generate account usernames based on a sequence (i.e., user101, user102), and attackers can determine the sequence and enumerate valid usernames

Password At tacks:
Password Funct ionality Exploits Password Changing
• Determine password change functionality within the application by spidering the application or creating a login account
• Try random strings for ‘Old Password’, ‘New Password’, and ‘Confirm the New Password’ fields and analyze errors to identify vulnerabilities in password change functionality
Password Recovery •
“Forgot Password” features generally present a challenge to the user; if the number of attempts is not limited, an attacker can guess the challenge answer successfully with the help of social engineering
• Applications may also send a unique recovery URL or existing password to an email address specified by the attacker if the challenge is solved
‘Remember Me’ Exploit •
“Remember Me” functions are implemented using a simple persistent cookie, such as RememberUser=jason or a persistent session identifier such as RememberUser=ABY112010
• Attackers can use an enumerated username or predict the session identifier to bypass authentication mechanisms 

Password At tacks: Password Brute-forcing
• Create a list of possible passwords using common passwords, footprinting the target and using social engineering techniques, and try each password until the correct password is discovered
• Create a dictionary of all possible passwords using tools such as Dictionary Maker to perform dictionary attacks
• Try to crack the log-in passwords by trying all possible values from a set of alphabets, numeric, and special characters
• Use password cracking tools such as Burp Suite to brute-force passwords

Password At tacks: At tack Password Reset Mechanism Steps to perform password reset poisoning attack:
• Step 1: Attacker obtains the email address used on the website by the target through techniques such as social engineering, and OSINT
• Step 2: Attacker sends a password reset request link to the victim using the altered Host header ▪ For example: POST https://certifiedhacker.com/reset.php HTTP/1.1 Accept: */* Content-Type: application/json Host: badhost.com
▪ The resultant URL for resetting the password is https://badhost.com/reset-password.php?token=87654321-8765-8765-8765-10987654321
• Step 3: The attacker then waits for the victim to receive the modified email • Step 4: Once the victim clicks on the malicious link embedded in the email, the attacker extracts the password reset token and performs various malicious activities

Session At tacks: Session ID Predict ion/ Brute-forcing 1
In the first step, collect some valid session ID values by sniffing traffic from authenticated users 2 3 4
Analyze captured session IDs to determine elements of the session ID generation process such as the session ID structure, the information that is used to create it, and the encryption or hash algorithm used by the application to protect it
Vulnerable session generation mechanisms that use session IDs composed using predictable information such as username, timestamp, or client IP address, can be exploited easily by guessing valid session IDs
In addition, you can implement a brute force technique to generate and test different session ID values until you successfully get access to the application

Cookie Exploitat ion: Cookie Poisoning •
If the cookie contains passwords or session identifiers, steal the cookie using techniques such as script injection and eavesdropping
• Then replay the cookie with the same or altered passwords or session identifiers to bypass web application authentication
• You can trap cookies using tools such as OWASP Zed Attack Proxy and Burp Suite

Bypass Authent icat ion: Bypass SAML-based SSO
• Single Sign-on (SSO) authentication processes permit a user to sign into an application using a single set of credentials and use the same login session to access multiple applications irrespective of domains or platforms
• The communication between these applications can be done through SAML messages
• SAML messages are encrypted using Base64 encoding and can be easily decrypted to extract the content of messages
• Attackers use tools such as SAML Raider to bypass SAM-based SSO authentication

Bypass Authent icat ion: Bypass Rate Lim it
• Rate limiting is a security mechanism designed to prevent attacks on a system or application by limiting the number of login attempts a user or an entity can make within a specific time frame Rate Limit Bypass Techniques
1. Explore Different Endpoints and Parameters
Attackers try various endpoint versions, such as /api/v3/sign-up, /Sign-up, /SignUp, /signup, and /api/sign-up, until successful in their brute force attacks
2. Including Blank Characters in Code or Parameters
Attackers can include blank bytes such as %00, %0d%0a, %0d, %0a, %09, %0C, %20 into code or parameters to bypass the web application authentication mechanism
3. Altering the IP Origin using Headers
Attackers modify headers such as X-Originating-IP, X-Forwarded-For, X-Remote-IP, X-Remote-Addr, X-Client-IP, and so on to make it appear as though requests are coming from different IP addresses


Bypass Authent icat ion: Bypass Mult i-Factor Authent icat ion HTTP
Response Body Manipulation
Check the response of the MFA request. If the request contains 'Success: false', modify it to 'Success: true' and assess
whether this adjustment aids in bypassing the 2FA implementation
Valid request with incorrect OTP: POST /otp-verify HOST: certifiedhacker.com <redacting_required_headers> {"otp":50563} Valid response: 200 OK <redacted> __ {"success":false}__ Tampered response (with the same incorrect OTP): 200 OK <redacted> {"success":true}"

Status Code Manipulation
If the response status code is 400, 401, 402, 403, etc. and showing “Invalid Token” message, then modify the response status code to '200 OK' with 'Success: true'
Valid request with incorrect OTP: POST /otp-verify HOST: certifiedhacker.com <redacting_required_headers> {"otp":50563} Valid response: 403 Forbidden <redacted> {"error":true, "message":"Invalid Token"} Tampered response (with the same incorrect OTP): 200 OK <redacted> {"success":true}

----

Attack Authentication Mechanism

In general, web applications authenticate users through authentication mechanisms such as login functionality. During web application analysis, attackers try to find authentication vulnerabilities such as weak passwords (e.g., short or blank, common dictionary words or names, user’s names, defaults). Attackers exploit these vulnerabilities to gain access to the web application by network eavesdropping, brute-force attacks, dictionary attacks, cookie replay attacks, credential theft, etc.
Most authentication mechanisms used by web applications have design flaws. Attackers can identify these flaws and exploit them to gain unauthorized access to the web application. Such design flaws include failure to check password strength, insecure transmission of credentials over the Internet, etc. Web applications usually authenticate their clients or users by a combination of a username and password, which can be identified and exploited.

▪ Username Enumeration
Attackers can enumerate usernames in two ways: verbose failure messages and predictable usernames.
o Verbose Failure Message
In a typical login system, the user enters two fields, namely username and password. In some cases, an application will ask for additional information. If the user is trying to log in and fails, it implies that at least one field was incorrect. This provides grounds for an attacker to exploit the application.
Examples:
• Account <username> not found
• Incorrect password provided
• Account <username> has been locked out
o Predictable Usernames
Some applications automatically generate account usernames according to some
predictable sequence. This makes it very easy for the attacker to discern the sequence for a potentially exhaustive list of all valid usernames.

▪ Password Attacks
A password attack is a process of trying various password cracking techniques to discover a user account password by which the attacker can gain access to an application.
Methods for cracking passwords include the following:
o Password functionality exploits
o Password guessing
o Brute-force attack
o Dictionary attack
o Attack password reset mechanism

▪ Session Attacks
The following types of session attacks are employed by attackers against authentication mechanisms:
o Session prediction: It focuses on predicting session ID values that allow the attacker to bypass the authentication mechanism of an application. By analyzing and understanding the session ID generation process, the attacker can predict a valid session ID value and gain access to the application.
o Session brute-forcing: An attacker brute-forces the session ID of a target user and uses it to log in as a legitimate user and gain access to the application.
o Session poisoning: It allows an attacker to inject malicious content, modify the user ́s online experience, and obtain unauthorized information.

▪ Cookie Exploitation
Cookie exploitation attacks are of the following types:
o Cookie poisoning: It is a type of parameter tampering attack in which the attacker modifies the cookie contents to draw unauthorized information about a user and thus perform identity theft.
o Cookie sniffing: It is a technique in which an attacker sniffs a cookie containing the session ID of the victim who has logged in to a target website and uses the cookie to bypass the authentication process and log in to the victim’s account.
o Cookie replay: It is a technique used to impersonate a legitimate user by replaying the session/cookie that contains the session ID of that user (as long as he/she remains logged in). This attack stops working once the user logs out of the session.

▪ Bypass Authentication
o Bypass SAML-based SSO: Attackers take advantage of signature misconfigurations, session expiry timeouts, session replays, misdirected SAML messages, etc., to bypass SAML-based SSO authentication.
o Bypass rate limit: Rate limiting restricts the number of login attempts within a timeframe to prevent unauthorized access and thwart brute-force attacks. Attackers can employ various techniques to bypass rate limiting and gain unauthorized entry.
o Bypass multi-factor authentication: Multi-factor authentication (MFA) bypass involves methods or techniques that circumvent the MFA mechanism, potentially leading to unauthorized access to systems, applications, or data.
